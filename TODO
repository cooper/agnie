##########################################################################################
##                                                                                      ##
##                            juno-ircd planned features                                ##
##                                                                                      ##
##########################################################################################

Legend
------------------------------------------------------------------------------------------

[ ] = planned but unimplemented
[x] = plan canceled or unlikely to happen
[~] = work in progress but far from complete
[*] = implemented partially and mostly functional
[√] = completed

Configuration
------------------------------------------------------------------------------------------

[√] default.conf fallback configuration

[√] multiple IPs in connect blocks

[ ] some way to fetch configuration over other protocols

[ ] some way to share configurations across servers

Modules
------------------------------------------------------------------------------------------

    [*] SASL                    SASL account authentication
                                works but currently only has PLAIN authentication
                                
    [ ] Channel::Modesync       see "Mode synchronization" below
    
    [ ] Configuration::Fetch    fetch configuration values from HTTP or other sources
    
    [ ] Configuration::Sync     share configurations between servers (how to do securely?)

Evented::Socket modules
    
    [ ] SSL                     make SSL modular with a separate daemon
    
    [ ] WolframAlpha            interface to Wolfram|Alpha
    
    [ ] UrbanDictionary         interface to Urban Dictionary
    
    [ ] Lastfm                  interface to now playing on last.fm
    
    [ ] Omegle                  interface to Omegle.com with Net::Async::Omegle
    
    [ ] Relay                   IRC relay

    [ ] HTTP                    perhaps could be used for HTTP requests so that other
                                modules like Lastfm, UrbanDictionary, WolframAlpha
                                can run in the IRCd but make requests externally

    [ ] HTTPd                   HTTP server for other modules to extend


Server linkage and management
------------------------------------------------------------------------------------------

Mode synchronization

    [ ] Mode loading synchronization (all modes)
    
        It is now necessary for servers to track which of its own modes are familiar to
        other servers. This way, a server can determine if it needs to send out ADDUMODE,
        ADDCMODE, AUM, or ACM commands when new modes are added.
        
        Example: a new module was downloaded from the repository. The server configuration
        updated to include the mode provided by the new module. The server is rehashed.
        
        The server has tracked its own modes and is aware that NO servers are aware of the
        new mode, so it sends an ACM message to all servers. Mode-adding commands should
        be forwarded only if they occur outside of a burst.
        

    [ ] MODESYNC server command (channels only)
    
        The MODESYNC command allows servers to synchronize modes set on channels. Because
        mode handling functionality is provided by modules, the IRCd cannot queue modes
        for modules that might be loaded in the future. MODESYNC solves this problem by
        negotiating channel modes when new mode functionality is loaded on a server.
    
        Example: a server loads the Access module which registered the 'access' mode.
        
        The servers sends to all other servers:
        
            :0 MODESYNC REQ * access
            :<sid> MODESYNC REQ <channel_mask> <mode_name>|* [<other_mode>, ...]
        
        If any server is unfamiliar with any mode, that mode should be ignored.
        Otherwise, it will reply for each matching channel affected by the mode(s).
        
            :1 MODESYNC REP 0 #k :+AAA admin:$r:vulpia op:$r:alyx owner:$r:mitch
            :<sid> MODESYNC REP <requesting sid>|* <channel> :<relevant mode string>

        In scenarios where all modes are unknown or no channels are affected by the
        mode(s), no replies should be sent.
        
        All servers send replies when necessary, not only the directly connected
        server(s). Ideally, all the replies will be identical, but this will sometimes
        not be the case due to the possibility of mode-providing modules being loaded
        inconsistently across the network.
        
        Because MODESYNC messages are for synchronizing all servers, they should always
        be forwarded throughout the network. Servers will ignore messages that are not
        applicable to them.
                
        User modes are far more simple and therefore do not require the mode sync
        mechanism. Servers keep track of user modes whether they are familiar with them
        or not; they are simply hidden from the local clients until the local server can
        assign a letter to them.

    [ ] MODESYNC user command
    
        In the rare but possible frustration of a mode desync, the MODESYNC user command
        should utilize the same MODESYNC functionality above to solve desync problems
        without the necessity of reconnecting servers.
        
        Example: an IRC operator notices a channel mode desync and issues the command:
        
            MODESYNC #k
            MODESYNC <channel_mask> [<mode_name>|*]
            
        The server the user is connected to sends out a mode sync request to all servers.
        Additionally, it must send a reply for other servers to interpret.
        
            :0 MODESYNC REQ #k *
            :0 MODESYNC REP #k * :+AAntb admin:$r:vulpia op:$r:alyx github*!*@*
            
        All other servers should then send replies as well if applicable.
            
Server linkage

    [*] Connection timers continue even after an ERROR message is received. Sometimes two
        timers may be ticking for the same server.

    [*] SQUIT and CONNECT still do not work quite right, probably due to the above issues
        with connection timers.
        
    [ ] SQUIT and CONNECT probably do not accept server masks.
    
    [ ] CONNECT probably does not work remotely.
        e.g. CONNECT server1.example.com server2.example.com
        
    [√] The SERVER command during registration does not interpret IP address wildcards.
    
    [√] Configuration connect blocks need to accept lists of IPs rather than a fixed one.
    
Support for multiple linking protocols

    [~] Move JELP out of core. Commands should be fired in response to IRCd events.
    
    [ ] Implement the TS6 protocol.
    
User commands that are in desperate need of rewriting
------------------------------------------------------------------------------------------

    [ ] WHO             needs to be evented, extensible, and fully supportive of WHOX
    
    [ ] WHOIS           needs to be evented and extensible
        
Other user commands
------------------------------------------------------------------------------------------

    [√] ECHO            send message to a channel and back to the source if successful
    
    [ ] WHOWAS          

Efficiency
------------------------------------------------------------------------------------------

    [ ] Connection objects might be leaking. During the destruction of an IRCd with only a
        few active connections, a large number of connection::DESTROYs were reported.
        Perhaps connections esablished by server::linkage are not properly disposed of, or
        maybe all connection objects have cyclical references. This may have been fixed by
        the addition of ->delete_all_events() though.
    
    
