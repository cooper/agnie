##########################################################################################
##                                                                                      ##
##                            juno-ircd planned features                                ##
##                                                                                      ##
##########################################################################################

Legend
------------------------------------------------------------------------------------------

[ ] = planned but unimplemented
[x] = plan canceled or unlikely to happen
[~] = work in progress but far from complete
[*] = implemented partially and mostly functional
[√] = completed

Configuration
------------------------------------------------------------------------------------------

    [√] default.conf fallback configuration

    [√] multiple IPs in connect blocks

    [ ] some way to fetch configuration over other protocols

    [ ] some way to share configurations across servers

Modules
------------------------------------------------------------------------------------------

    [~] SASL                    SASL account authentication

        works but currently only has PLAIN authentication.
        also need to implement in TS6/JELP remote SASL.
        see "remote SASL" below.

    [ ] Channel::ModeSync       see "Mode synchronization" below
    
    [ ] Configuration::Fetch    fetch configuration values from HTTP or other sources
    
    [ ] Configuration::Sync     share configurations between servers (how to do securely?)

    [*] Account                 implement user accounts

        [ ] {account}s attached to users are not updated when the actual account is
            modified via ACCTINFO.

        [ ] send ACCTIDK if the times are wrong or something else went wrong.

Evented::Socket modules
    
    [ ] SSL                     make SSL modular with a separate daemon
    
    [ ] WolframAlpha            interface to Wolfram|Alpha
    
    [ ] UrbanDictionary         interface to Urban Dictionary
    
    [ ] Lastfm                  interface to now playing on last.fm
    
    [ ] Omegle                  interface to Omegle.com with Net::Async::Omegle
    
    [ ] Relay                   IRC relay

    [ ] HTTP                    perhaps could be used for HTTP requests so that other
                                modules like Lastfm, UrbanDictionary, WolframAlpha
                                can run in the IRCd but make requests externally

    [ ] HTTPd                   HTTP server for other modules to extend


Server linkage and management
------------------------------------------------------------------------------------------

Mode synchronization

    [ ] Mode loading synchronization (all modes)
    
        It is now necessary for servers to track which of its own modes are familiar to
        other servers. This way, a server can determine if it needs to send out ADDUMODE,
        ADDCMODE, AUM, or ACM commands when new modes are added.
        
        Example: a new module was downloaded from the repository. The server configuration
        updated to include the mode provided by the new module. The server is rehashed.
        
        The server has tracked its own modes and is aware that NO servers are aware of the
        new mode, so it sends an ACM message to all servers. Mode-adding commands should
        be forwarded only if they occur outside of a burst.
        

    [ ] MODESYNC server command (channels only)
    
        The MODESYNC command allows servers to synchronize modes set on channels. Because
        mode handling functionality is provided by modules, the IRCd cannot queue modes
        for modules that might be loaded in the future. MODESYNC solves this problem by
        negotiating channel modes when new mode functionality is loaded on a server.
    
        Example: a server loads the Access module which registered the 'access' mode.
        
        The servers sends to all other servers:
        
            :0 MODESYNC REQ * A
            :<sid> MODESYNC REQ <channel_mask> <mode_string>|*
        
        If any server is unfamiliar with any mode, that mode should be ignored.
        Otherwise, it will reply for each matching channel affected by the mode(s).
        
            :1 MODESYNC REP #k 0 :+AAA admin:$r:vulpia op:$r:alyx owner:$r:mitch
            :<sid> MODESYNC REP <channel> <requesting sid>|* :<relevant mode string>

        In scenarios where all modes are unknown or no channels are affected by the
        mode(s), no replies should be sent.
        
        All servers send replies when necessary, not only the directly connected
        server(s). Ideally, all the replies will be identical, but this will sometimes
        not be the case due to the possibility of mode-providing modules being loaded
        inconsistently across the network.
        
        Because MODESYNC messages are for synchronizing all servers, they should always
        be forwarded throughout the network. Servers will ignore messages that are not
        applicable to them.
                
        User modes are far more simple and therefore do not require the mode sync
        mechanism. Servers keep track of user modes whether they are familiar with them
        or not; they are simply hidden from the local clients until the local server can
        assign a letter to them.

    [ ] MODESYNC user command
    
        In the rare but possible frustration of a mode desync, the MODESYNC user command
        should utilize the same MODESYNC functionality above to solve desync problems
        without the necessity of reconnecting servers.
        
        Example: an IRC operator notices a channel mode desync and issues the command:
        
            MODESYNC #k
            MODESYNC <channel_mask> [<mode_name>|*]
            
        The server the user is connected to sends out a mode sync request to all servers.
        Additionally, it must send a reply for other servers to interpret.
        
            :0 MODESYNC REQ #k *
            :0 MODESYNC REP #k * :+AAntb admin:$r:vulpia op:$r:alyx github*!*@*
            
        All other servers should then send replies as well if applicable.

Remote SASL

    [ ] TS6 ENCAP SASL

    [ ] JELP equivalent
            
Server linkage

    [*] Connection timers continue even after an ERROR message is received. Sometimes two
        timers may be ticking for the same server.

    [ ] SQUIT and CONNECT still do not work quite right, probably due to the above issues
        with connection timers.
        
    [ ] SQUIT and CONNECT probably do not accept server masks.
    
    [ ] CONNECT probably does not work remotely.
        e.g. CONNECT server1.example.com server2.example.com
        
    [√] The SERVER command during registration does not interpret IP address wildcards.
    
    [√] Configuration connect blocks need to accept lists of IPs rather than a fixed one.
    
Support for multiple linking protocols

    [~] Move JELP out of core. Commands should be fired in response to IRCd events.
    
    [~] Implement the TS6 protocol.

        [ ] Complex PRIVMSG
            a status character ('@'/'+') followed by a channel name, to send to users
            with that status or higher only.
            capab:          CHW
            propagation:    all servers with -D users with appropriate status

        [ ] Complex PRIVMSG
            '=' followed by a channel name, to send to chanops only, for cmode +z.
            capab:          CHW and EOPMOD
            propagation:    all servers with -D chanops

        [ ] Complex PRIVMSG
            a user@server message, to send to users on a specific server. The exact
            meaning of the part before the '@' is not prescribed, except that "opers"
            allows IRC operators to send to all IRC operators on the server in an
            unspecified format.
            propagation: one-to-one

        [ ] Complex PRIVMSG
            a message to all users on server names matching a mask ('$$' followed by mask)
            propagation: broadcast
            Only allowed to IRC operators.

        [ ] Complex PRIVMSG
            a message to all users with hostnames matching a mask ('$#' followed by mask).
            Note that this is often implemented poorly.
            propagation: broadcast
            Only allowed to IRC operators.

        [ ] Propagate away messages in burst.

        [ ] Propagate oper flags in burst.

        [ ] Messages like SJOIN should be split up rather than sending one huge one. I
            should make something that does this easily, that way I can use it for the
            NAMES client protocol command as well.

        [ ] ts6_sid() only works for integral SIDs. It cannot convert TS6 SIDs with
            non-numeric characters to juno SIDs.

Other protocol-related TODOs

    [ ] IRCd version, name, etc. are not sent over the linking protocol. And the few
        things that are sent are wrong for nonlocal servers.

Unfinished or missing IRC functionality
------------------------------------------------------------------------------------------

    [√] ECHO            send message to a channel and back to the source if successful.
    
    [ ] WHOWAS          look up a disconnected user.

    [√] WHOIS           Lacks numeric 137 idle time.

    [√] Invite except   Exception mode (+I) exists, but it is not taken into account yet.

    [ ] MOTD            Missing remote MOTD (<server> parameter) support.

    [ ] Message block   Bans do not prevent messages from being sent to a channel.
                        There is currently no mechanism for anything to do that.
                        The only things that do that, such as +n, are hard coded. :(

    [~] LIST            Does not allow matching certain channels. +s and +p modes are not
                        taken into account. At least I don't think so. Check Secret.pm.

    [ ] TRACE           trace route

    [ ] STATS           

        [ ] l - returns a list of the server's connections, showing how long each
                connection has been established and the traffic over that connection in
                Kbytes and messages for each direction;

        [ ] m - returns the usage count for each of commands supported by the server;
                commands for which the usage count is zero MAY be omitted;

        [ ] o - returns a list of configured privileged users, operators;

        [ ] u - returns a string showing how long the server has been up.

    [√] TIME            Server time

    [√] ADMIN           Server administrator

    [ ] RPL_ISUPPORT    A lot of the information is just hard coded. Therefore it could be
                        wrong. In fact, some of it is wrong for sure. Plus it's hideous.

    [ ] Local channels  Do I really need to do this?

    [ ] Number of modes in a single MODE message is unlimited.

    [√] Number of channels a user may join is unlimited.

    [ ] Number of entries in a channel mode list is unlimited.

    [ ] Several commands can only take one target, others can take infinitely many.
        It's both inconsistent and vulnerable.

    [ ] Some server notices should be broadcasted, especially those used in modules.
        For things like new users, we should stick to how it is, but for things like
        eval, modules, etc., we can use broadcast. Just add an option for registering
        them as broadcast notices.

Miscellaneous
------------------------------------------------------------------------------------------

    [ ] Upgrades that are currently in misc_upgrades() need to be in a separate package,
        and they should have identifiers to track which ones have been done already.

    [ ] HUP signal is not handled at all.





##########################################################################################
##                                                                                      ##
##                            juno-ircd bugs and issues                                 ##
##                                                                                      ##
##########################################################################################

Efficiency
------------------------------------------------------------------------------------------

    [ ] Connection objects might be leaking. During the destruction of an IRCd with only a
        few active connections, a large number of connection::DESTROYs were reported.
        Perhaps connections esablished by server::linkage are not properly disposed of, or
        maybe all connection objects have cyclical references. This may have been fixed by
        the addition of ->delete_all_events() though.

    [ ] In message.pm, the :rest or ... matchers require splitting twice. It's not
        efficient and also just annoying.

Cleanup
------------------------------------------------------------------------------------------

    [ ] WHO - needs to be evented, extensible, and fully supportive of WHOX.

    [√] WHOIS - needs to be evented and extensible.

    [ ] NAMES - why is it in channel.pm?

    [ ] channel::handle_privmsgnotice() is just a mess. needs more events.

    [ ] user mode handler uses ridiculous regex, needs to work just like the newer
        channel mode handler.

Bugs
------------------------------------------------------------------------------------------

    [ ] Pretty sure that user modes must be equal on all servers for some reason.

    [ ] SQUIT cannot stop a connection timer by server name wildcards, but it can
        disconnect servers matching wildcards. therefore it is confusing since that only
        works sometimes.


