# juno configuration file


# Server info

[ server ]

    network     = 'JunoDevNet'                  # network name
    name        = 'devserver.example.com'       # server name
    description = 'juno development server'     # server description
    sex         = 'male'                        # server gender
    id          = 0                             # server ID (must be unique and integral)
    casemapping = 'rfc1459'                     # 'rfc1459' or 'ascii'
                                                # you MUST use rfc1459 if using TS6

# Modules to load automatically

[ api ]

    # Basic stuff

    Core                        # Loads core commands, modes, etc.
    Resolve                     # Resolve hostnames
    Ident                       # Resolve user identities (ident protocol)
    Cloak                       # Hostname cloaking
    Alias                       # Support for command aliases
    SASL                        # Support for SASL authentication (for services)
    JELP                        # Juno Extensible Linking Protocol
    #TS6                        # TS6 linking protocol

    # Channel features

    Channel::Fantasy            # Fantasy commands
    Channel::Access             # Access list mode (+A)
    Channel::Invite             # Invitation support (INVITE, +i, +I, +g)
    Channel::Key                # Key support (+k)
    Channel::Limit              # Member limit support (+l)
    Channel::Secret             # Secret/private channel support (+s/+p)
    Channel::OperOnly           # Oper-only channel support (+O)
    Channel::Forward            # Channel forward support (+f, +F)
    Channel::Mute               # Mute/quiet bans (+Z)
    Channel::TopicAdditions     # Commands to prepend or append topic
    Channel::Permanent          # Preserve empty channels, make permanent (+P)
    Channel::RegisteredOnly     # Registered only channel support (+r)
    Channel::SSLOnly            # SSL users only channel support (+S)
    Channel::NoColor            # Strip colors from messages (+c)
    Channel::OpModerate         # Sends blocked messages to chanops (+z)
    Channel::ModeSync           # Improves channel mode synchronization
    Channel::JoinThrottle       # Prevents channel join flooding (+j)

    # Server management

    Modules                     # Manage IRCd modules directly from IRC
    Git                         # Manage IRCd git repository directly from IRC
    #Configuration::Set         # Manage IRCd configuration directly from IRC
    Reload                      # Reload or upgrade the IRCd in 1 command
    Grant                       # grant user oper flags from IRC
    #Eval                       # Evaluate Perl code directly from IRC

    # Global ban support

    Ban::Dline                  # server/user IP ban (D-Line/Z-Line)
    Ban::Kline                  # user hostmask ban (K-Line)
    Ban::Resv                   # nick and channel reservations (required for services)

    # Extras

    #DNSBL                      # Built-in host blacklist checking
    #LOLCAT                     # SPEEK LIEK A LOLCATZ!


# Maximum values

[ limit ]

    # the maximum number of:

    connection  = 100                           # connections
    perip       = 3                             # local  connections per IP address
    globalperip = 5                             # global connections per IP address
    client      = 80                            # users (currently unused)
    bytes_line  = 2048                          # bytes per line
    lines_sec   = 30                            # lines per second
    channel     = 100                           # channels a user can be in at once

    # the maximum number of characters in:

    nick        = 32                            # nicknames
    topic       = 1000                          # channel topics
    kickmsg     = 300                           # kick messages
    channelname = 50                            # channel names
    away        = 100                           # away messages
    key         = 50                            # channel keys


# File paths

[ file ]

    motd = 'etc/ircd.motd.example'              # message of the day
    log  = 'var/log/ircd.log'                   # where to write logs


# User options

[ users ]

    automodes = '+ix'                           # set these modes on users at connect
                                                # the default is invisible and cloaked

# Channel options

[ channels ]

    automodes = '+ntqo +user +user'             # set these modes as users enter channel

    invite_must_exist           = off           # restrict INVITE to existing channels
    only_ops_invite             = off           # restrict INVITE to chanops

    client_max_modes_simple     = 46            # max simple mode count per msg
    client_max_mode_params      = 10            # max mode params per msg, MODES in RPL_ISUPPORT

    max_modes_per_line          = 5             # max modes per outgoing MODE message
    max_modes_per_server_line   = 10            # same as above, except for servers
    max_param_length            = 50            # number of characters permitted for parameters
    max_ban_length              = 195           # number of characters permitted for a ban


# Services options

[ services ]

    nickserv = 'NickServ'       # nickname of nick service. used with TS6.
    saslserv = 'SaslServ'       # nickname of SASL service. used by SASL module.


# IPv4 listen

[ listen: 0.0.0.0 ]

    port    = [6667..6669, 7000]                # unsecured listening ports
    sslport = [6697]                            # secure ports


# IPv6 listen

[ listen: :: ]

    port    = [6667..6669, 7000]                # unsecured listening ports
    sslport = [6697]                            # secure ports


# Server uplinks

[ connect: server2.example.com ]

    # Address(es) to accept connection from.
    # MUST be IP addresses, not hostnames.
    # Wildcards are accepted. Any number of address allowed.

        address = ['192.168.1.*', '127.0.0.1']

    # Outgoing port. If initiating a connection, the server will try this port.
    # Currently, this option does not affect incoming connections.

        port = 7000

    # Enable SSL connection? If so, be sure that the above port is an SSL listen
    # port and that the other server has SSL configured properly. This setting
    # is only applicable to outgoing connections which this server initiates.

        ssl = on

    # Plain text outgoing password

        send_password = 'k'

    # Incoming password and the encryption for it.
    # Accepted crypts: sha1, sha224, sha256, sha384, sha512, md5, none

        receive_password = '13fbd79c3d390e5d6585a21e11ff5ec1970cff0c'
        encryption       = 'sha1'

    # Auto connect on startup. Note that this only applies to when the server
    # is first started. To reconnect dropped connections, see auto_timer.

        #autoconnect

    # Reconnect timer. If connection drops, try again every x seconds.
    # Uncomment below if you wish to enable this feature.

        #auto_timer = 30


# IRC operators

[ oper: admin ]

    # Operator class (optional).
    # If present, the oper will receive flags and notices defined in this class
    # and all other classes from which it may inherit.

        class = 'netadmin'

    # Hostmask(s) to accept for opering.
    # These can include either hostnames or IP addresses.
    # Multiple values accepted. Wildcards accepted.

        host = ['*@*']

    # The password and encryption for it

        password   = '13fbd79c3d390e5d6585a21e11ff5ec1970cff0c'
        encryption = 'sha1'

    # Flags (optional).
    # Oper flags which are specific to this oper. These will be granted in
    # conjunction with any others that might exist from oper classes.
    # Multiple flags accepted. Wildcards NOT accepted.
    # See doc/oper_flags.md. 'all' matches all flags.

        flags = ['all']

    # Oper notice flags (optional).
    # Notice flags which are specific to this oper. These will be granted in
    # conjunction with any others that might exist from oper classes.
    # Multiple flags accepted. Wildcards not accepted. 'all' matches all flags.

        notices = ['all']


# Command aliases. Requires Alias module.
# $N will be replaced with the Nth parameter;
# $N- will be replaced with the Nth parameter and all which follow it.

[ aliases ]

    nickserv  = 'PRIVMSG NickServ $1-'
    chanserv  = 'PRIVMSG ChanServ $1-'
    operserv  = 'PRIVMSG OperServ $1-'
    botserv   = 'PRIVMSG BotServ $1-'
    groupserv = 'PRIVMSG GroupServ $1-'

    ns = 'PRIVMSG NickServ $1-'
    cs = 'PRIVMSG ChanServ $1-'
    os = 'PRIVMSG OperServ $1-'
    bs = 'PRIVMSG BotServ $1-'
    gs = 'PRIVMSG GroupServ $1-'

# DNS blacklists. Requires DNSBL module.

[ dnsbl: EFnet RBL ]

    host     = "rbl.efnetrbl.org"
    ipv4     = on
    ipv6     = off
    timeout  = 3
    duration = '1d'
    reason   = "Your host is listed on EFnet RBL. See http://efnetrbl.org/?i=%ip"


# Administrator information

[ admin ]

    line1 = 'John Doe'
    line2 = 'Server administrator'
    email = 'admin@example.com'
