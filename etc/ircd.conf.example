# juno configuration file


[ server ]
    
    network     = 'JunoDevNet'                  # network name
    name        = 'devserver.example.com'       # server name
    description = 'juno development server'     # server description
    sex         = 'male'                        # server gender
    id          = 0                             # server ID (must be unique and integral)


[ api ]

    Core                # Loads core commands, modes, etc.
    JELP                # Juno Extensible Linking Protocol support
    Resolve             # Resolve hostnames
    Reload              # Reload or upgrade the IRCd in 1 command
    Channel::Fantasy    # Channel fantasy commands
    Channel::Access     # Channel access mode (+A)
    Account             # Support for user accounts
    Modules             # Manage IRCd modules from IRC
    LOLCAT              # SPEEK LIEK A LOLCATZ!
    Eval                # Evaluate Perl code from IRC
    Channel::Invite     # Channel invitation support (INVITE, +i, +I)
    Channel::Key        # Channel key support (+k)
    Channel::Limit      # Channel user limit support (+l)
    Channel::Secret     # Secret channel support (+s)
    Channel::OperOnly   # Oper-only channel support (+O)
    Channel::Forward    # Channel forward support (+f)
    Channel::Mute       # Channel mute/quiet ban (+Z)
    SASL                # Support for SASL plain authentication
    Grant               # grant user oper flags from IRC
    Alias               # support for command aliases

[ limit ]

    # the maximum number of:

    connection  = 100                           # connections
    perip       = 3                             # local  connections per IP address
    globalperip = 5                             # global connections per IP address
    client      = 80                            # users (currently unused)
    bytes_line  = 2048                          # bytes per line
    lines_sec   = 30                            # lines per second
    channel     = 100                           # channels a user can be in at once

    # the maximum number of characters in:

    nick        = 32                            # nicknames
    topic       = 1000                          # channel topics
    kickmsg     = 300                           # kick messages
    channelname = 50                            # channel names
    away        = 100                           # away messages
    key         = 50                            # channel keys

[ users ]

    automodes = '+i'                            # set these modes on users at connect


[ channels ]

    automodes = '+ntqo +user +user'             # set these modes as users enter channel


# IPv4 listen

[ listen: 0.0.0.0 ]

    port    = [6667..6669, 7000]                # unsecured listening ports
    sslport = [6697]                            # secure ports


# IPv6 listen

[ listen: :: ]

    port    = [6667..6669, 7000]                # unsecured listening ports
    sslport = [6697]                            # secure ports


[ connect: server2.example.com ]

    # Address(es) to accept connection from.
    # MUST be IP addresses, not hostnames.
    # Wildcards are accepted. Any number of address allowed.
    
        address = ['192.168.1.*', '127.0.0.1'] 
    
    # Outgoing port. If initiating a connection, the server will try this port.
    # Currently, the port does not affect incoming connections.
    
        port = 7000
    
    # Plain text outgoing password
    
        send_password = 'k'
    
    # Incoming password and the encryption for it
    
        receive_password = '13fbd79c3d390e5d6585a21e11ff5ec1970cff0c'
        encryption       = 'sha1'
    
    # Auto connect on startup.
    
        #autoconnect
    
    # Reconnect timer. If connection drops, try again every x seconds.
    # Uncomment below if you wish to enable this feature.
    
        #auto_timer = 30


[ oper: admin ]

    # Operator class (optional)
    # If present, the oper will receive flags and notices defined in this class
    # and all other classes from which it may inherit.
    
        class      = 'netadmin'
        
    # Hostmask(s) to accept for opering.
    # These can include either hostnames or IP addresses.
    # Multiple values accepted. Wildcards accepted.
    
        host = ['*@*']
        
    # The password and encyption for it
    
        password   = '13fbd79c3d390e5d6585a21e11ff5ec1970cff0c'
        encryption = 'sha1'
        
    # Flags (optional)
    # Oper flags which are specific to this oper. These will be granted in
    # conjunction with any others that might exist from oper classes.
    # Multiple flags accepted. Wildcards not accepted. 'all' matches all flags.
    
        flags = ['all']
    
    # Oper notice flags (optional)
    # Notice flags which are specific to this oper. These will be granted in
    # conjunction with any others that might exist from oper classes.
    # Multiple flags accepted. Wildcards not accepted. 'all' matches all flags.
    
        notices = ['all']


# Require Alias module

[ aliases ]

    nickserv  = 'PRIVMSG NickServ $1-'
    chanserv  = 'PRIVMSG ChanServ $1-'
    operserv  = 'PRIVMSG OperServ $1-'
    botserv   = 'PRIVMSG BotServ $1-'
    groupserv = 'PRIVMSG GroupServ $1-'

    ns = 'PRIVMSG NickServ $1-'
    cs = 'PRIVMSG ChanServ $1-'
    os = 'PRIVMSG OperServ $1-'
    bs = 'PRIVMSG BotServ $1-'
    gs = 'PRIVMSG GroupServ $1-'


# Administrator information

[ admin ]

    line1 = 'John Doe'
    line2 = 'Server administrator'
    email = 'admin@example.com'
