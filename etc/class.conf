################################################################################
###                                                                          ###
###           ʌ                                                 ʌ            ###
###          / \             COPY BEFORE EDITING               / \           ###
###         / ! \            !!!!!!!!!!!!!!!!!!!              / ! \          ###
###         ¯¯¯¯¯                                             ¯¯¯¯¯          ###
################################################################################
#
# /!\ If you intend to edit this, copy it to another filename and then       /!\
# /!\ change the include statement at the bottom of your ircd.conf!          /!\
#
# /!\ If you intend to edit this, copy it to another filename and then       /!\
# /!\ change the include statement at the bottom of your ircd.conf!          /!\
#
# /!\ If you intend to edit this, copy it to another filename and then       /!\
# /!\ change the include statement at the bottom of your ircd.conf!          /!\
#
################################################################################
###                                                                          ###
###           ʌ                                                 ʌ            ###
###          / \             COPY BEFORE EDITING               / \           ###
###         / ! \            !!!!!!!!!!!!!!!!!!!              / ! \          ###
###         ¯¯¯¯¯                                             ¯¯¯¯¯          ###
################################################################################


# Connection classes
#
# A connection can belong to only one class; however, classes can inherit from
# each other. Matching is determined by the following:
#
#   requires_oper   if specified, the class can only be matched through the
#                   OPER command
#
#   allow_anons     if specified, unregistered connections matching this IP or
#                   hostname mask will fit the class
#
#   allow_users     if specified, users matching this ident@host mask will fit
#                   the class
#
#   allow_servers   if specified, servers matching this server name mask will
#                   fit the class
#
#   priority        if a connection matches more than one class, the one with
#                   the highest priority will be chosen. if no priority is
#                   specified, it is equal to the number of non-wildcard
#                   characters in allow_users or allow_servers, meaning the
#                   more specific masks have a higher priority

[ class: default ]

    # Base class for all connections.
    
    # Connections match this class before registering as a user or server.
    # After registration, these values are overridden by their matching user or
    # server class.

    # Note that the two options below ONLY apply to unregistered connections,
    # so using them in classes with allow_users or allow_servers has no effect.
    #
    max_perip       = 3                         # local  connections per IP address
    max_globalperip = 5                         # global connections per IP address

    max_bytes_line  = 2048                      # bytes per line
    max_lines_sec   = 30                        # lines per second
    
    ping_freq       = 30                        # how often to send pings
    ping_timeout    = 120                       # seconds with no pong to drop user
    
    # Allows unregistered connections from all IPs and hostnames.
    allow_anons = '*'

[ class: users ]

    # Base class for all users

    extends         = 'default'                 # inherit from default
    allow_users     = '*@*'                     # allow all users to fit this class

    max_channel     = 100                       # channels a user can be in at once
    max_monitor     = 100                       # monitor entries; off = unlimited

    #max_bytes_line  = 2048                      # bytes per line
    #max_lines_sec   = 30                        # lines per second
    
    #ping_freq       = 30                        # how often to send pings
    #ping_timeout    = 120                       # seconds with no pong to drop user

[ class: lanusers ]

    # Example user class with increased limits, requiring a specified mask
    # and password

    extends         = 'users'                   # inherit from users
    allow_users     = '*@192.168.*'             # allow users on LAN
    max_bytes_line  = 4096                      # increased limits
    max_lines_sec   = 60
    
    # Password (for PASS command) and encryption (NOT YET SUPPORTED)
    # Use ./juno mkpasswd to generated an encrypted password.
    # Accepted crypts: sha1, sha224, sha256, sha384, sha512, md5, none
    #
    password        = '13fbd79c3d390e5d6585a21e11ff5ec1970cff0c'
    encryption      = 'sha1'

[ class: servers ]

    # Base class for all servers

    extends         = 'default'                 # inherit from default
    allow_servers   = '*'                       # allow all servers to fit this class
    
    ping_freq       = 20                        # how often to send pings
    ping_timeout    = 300                       # seconds with no pong to drop server
    ping_warn       = 60                        # seconds to warn about pings
    
    delta_max       = 120                       # max time delta in seconds
    delta_warn      = 30                        # time delta to produce a warning
    
####################
### OPER CLASSES ###
####################

[ class: locop ]

    requires_oper                               # only allow with OPER command
    extends = 'users'
    priv_rehash                                 # local rehash
    priv_see_invisible                          # see invisible users
    priv_see_hidden                             # see hidden servers
    priv_see_hosts                              # see real hosts
    priv_see_secret                             # see secret channels
    priv_set_permanent                          # set permanent channels
    priv_set_large_banlist                      # set large channel lists
    priv_modesync                               # use MODESYNC command
    priv_squit                                  # disconnect local uplinks
    priv_connect                                # connect local uplinks
    priv_kill                                   # kill local users
    noti_user_mode_unknown
    noti_channel_mode_unknown
    noti_perl_warning
    noti_exception
    noti_rehash
    noti_rehash_success
    noti_rehash_fail
    noti_new_server
    noti_server_closing
    noti_server_quit
    noti_server_burst
    noti_server_endburst
    noti_connect
    noti_connect_attempt
    noti_connect_fail
    noti_connect_success
    noti_squit
    noti_server_reintroduced
    noti_server_identifier_taken
    noti_server_protocol_warning
    noti_server_protocol_error
    
[ class: globop ]

    extends = 'locop'
    priv_grehash                                # global rehash
    priv_gsquit                                 # global uplink disconnect
    priv_gconnect                               # global uplink connect
    priv_gkill                                  # kill global users
    priv_modules                                # MODLOAD, MODUNLOAD, MODRELOAD
    priv_kline                                  # set K-Lines
    priv_dline                                  # set D-Lines
    priv_resv                                   # set nick/channel reserves
    priv_list_bans                              # view global bans
    noti_kline
    noti_kline_delete
    noti_kline_expire
    noti_dline
    noti_dline_delete
    noti_dline_expire
    noti_resv
    noti_resv_delete
    noti_resv_expire
    noti_module_load
    noti_module_unload
    noti_module_reload
    noti_reload
    noti_update
    noti_update_fail
    noti_grant
    noti_ungrant
    
[ class: netadmin ]

    extends = 'globop'
    priv_gcheckout                              # checkout any server
    priv_gupdate                                # update any server
    priv_greload                                # reload any server
    priv_gconfget                               # view global configuration

[ class: god ]

    extends = 'netadmin'
    priv_gconfset                               # modify global configuration
    priv_grant                                  # dynamically grant oper flags
    priv_all                                    # all other flags
    noti_all                                    # all notices
