#!/bin/bash
# Copyright (c) 2010-14, Mitchell Cooper

DIR=`dirname "$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"`

showusage() {
    cat << EOF
usage: $0 [action]
    start       start juno IRCd
    forcestart  attempt to start juno under any circumstances
    stop        terminate juno IRCd
    debug       start in NOFORK mode with printed output
    forever     run continuously
    foreverd    run continuously in debug mode
    rehash      rehash the server configuration file
    mkpasswd    runs the password generator
    dev         various developer actions ($0 dev help)
    help        print this information
EOF
}

showdevusage() {
    cat << EOF
usage: $0 dev [action]
    makemodule  create a .module and .pm
    pullsubs    run git pull for all submodules
    runlocal    run in debug mode using local submodules
EOF
}

runningq() {
    if [ -e "$DIR/etc/juno.pid" ]; then
        PID=`cat $DIR/etc/juno.pid`
        if kill -0 $PID; then
            RUNNING=true
        fi
    fi
}

splash() {
VER=$(printf %.3f $(cat VERSION))
echo "
##############################################################################
#      _                                     _                        _      #
#     ( )                                   (_)                      | |     #
#      _     _   _     _ __      ___         _     _ __    ___     __| |     #
#     | |   | | | |   | '_ \    / _ \       | |   | '__/  / __|   / _\` |     #
#     | |   | |_| |   | | | |  | (_) |  ==  | |   | |    | (__   | (_| |     #
#     | |    \__,_|   |_| |_|   \___/       |_|   |_|     \___|   \__,_|     #
#    _/ |                                                                    #
#   |__/   version $VER          https://github.com/cooper/agnie            #
#                                                                            #
##############################################################################
"
}

check_if_running() {
    if [ ! "$RUNNING" ]; then
        echo "juno is not running!"
        exit 1
    fi
}

dostart() {
    echo "Starting juno"
    splash
    $DIR/bin/ircd $DIR
}

start() {
    if [ "$RUNNING" ]; then
        echo "juno is already running!"
        exit 1
    fi
    dostart
}

forcestart() {
    if [ -e "$DIR/etc/juno.pid" ]; then
        rm -v $DIR/etc/juno.pid
    fi
    dostart
}

debug() {
    if [ "$RUNNING" ]; then
        echo "juno is already running!"
        exit 1
    fi
    echo "Running in NOFORK mode."
    splash
    $DIR/bin/ircd $DIR NOFORK & pid=$!
    trap ' echo "Signaling $pid TERM"; kill -TERM $pid' INT
    wait $pid
}

forever() {
    if [ "$RUNNING" ]; then
        echo "juno is already running!"
        exit 1
    fi
    splash
    $DIR/bin/ircd_forever $DIR & pid=$!
    trap ' echo "Signaling $pid TERM"; kill -TERM $pid' INT
    wait $pid
}

forever_nofork() {
    if [ "$RUNNING" ]; then
        echo "juno is already running!"
        exit 1
    fi
    echo "Running in NOFORK mode."
    splash
    $DIR/bin/ircd_forever $DIR NOFORK & pid=$!
    trap ' echo "Signaling $pid TERM"; kill -TERM $pid' INT
    wait $pid
}

stop() {
    check_if_running
    echo "Signaling $PID TERM"
    kill -TERM $PID
}

main() {
    case "$1" in

        start)
            start
            ;;

        forever)
            forever
            ;;
            
        foreverd)
            forever_nofork
            ;;
            
        debug)
            debug
            ;;

        forcestart)
            forcestart
            ;;

        rehash)
            check_if_running
            echo "Rehashing server"
            echo rehash > $DIR/etc/HUP
            kill -HUP $PID
            ;;

        stop)
            stop
            ;;

        restart)
            stop
            #sleep .01
            forcestart
            ;;

        reset)
            rm -v $DIR/etc/juno.pid
            ;;

        mkpasswd)
            $DIR/bin/mkpasswd
            ;;

        genssl)
            SSLDIR=$DIR/etc/ssl
            mkdir -p $SSLDIR
            openssl req -x509 -nodes -newkey rsa:2048 -keyout $SSLDIR/key.pem -out $SSLDIR/cert.pem
            echo "Use the 'sslport' key in listener configuration blocks" 
            echo "Enjoy using SSL"
            ;;

        lines)
            $DIR/bin/lines
            ;;
            
        dev)
            case "$2" in
            
                makemodule)
                    mkdir -p $DIR/modules/${3}.module
                    file=$DIR/modules/${3}.module/$(basename $3).pm
                    touch $file
                    
                    comments="# Copyright (c) $(date +%Y), ${USER:-$(whoami)}
#
# Created on $(hostname)
# $(date)
# $(basename $file)
#
# @name:            '$3'
# @package:         'M::$3'
# @description:     ''
#
# @author.name:     'Mitchell Cooper'
# @author.website:  'https://github.com/cooper'
#
package M::$3;

use warnings;
use strict;
use 5.010;

our (\$api, \$mod, \$pool);

sub init {
}

\$mod
"
                    echo "$comments" >> $file
                ;;
                
                pullsubs)
                    oldpwd=$(pwd)
                    for MOD in $(ls $DIR/lib)
                    do
                        echo "=> Updating $MOD"
                        cd $DIR/lib/$MOD
                        git pull origin master
                        cd $oldpwd
                    done
                ;;
                
                runlocal)
                    perl -I$DIR/../evented-object/lib -I$DIR/../evented-configuration/lib   \
                         -I$DIR/../evented-database/lib  -I$DIR/../evented-api-engine/lib   \
                         -I$DIR/../evented-properties/lib                                   \
                         -MEvented::Object -MEvented::Configuration -MEvented::Database     \
                         -MEvented::API::Engine -MEvented::Properties                       \
                         $DIR/bin/ircd $DIR NOFORK
                ;;
                
                commit)
                
                    # get commit message
                    file=$DIR/commit.tmp
                    editor=${EDITOR:-nano}
                    $editor $file
                    message=$(cat $file)
                    rm $file
                    
                    # increment version
                    oldversion=$(cat $DIR/VERSION)
                    newversion=$(echo print $oldversion + 0.01 | perl)
                    echo "VERSION: $oldversion -> $newversion"
                    echo $newversion > $DIR/VERSION
                    
                    # add to changelog
                    printf "\n$newversion: $message\n" >> $DIR/INDEV
                    
                    # commit
                    git add --all .
                    git commit -m "$newversion: $message"
                    
                ;;
                    
                *)
                    showdevusage
                ;;
                
            esac
        ;;
            

        *)
            showusage
            ;;

    esac
}

if [ ! "$1" ]; then
    showusage
    exit
fi

runningq
main $@