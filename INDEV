Development log
---------------

CHANGES:

(-1). Late 1990s - June 5, 2002 - pIRCd, the perl IRCd daemon by Jay Koninek

    01/04/00 - The world didn't end. How disappointing. pircd has now been moved to SourceForge. Check out all the neat things you can do over in the side bar.
    
    01/21/00 - Aww yeah. Alpha Thirteen is out. Check out the change log to see what is new. Or just download it.
    
    01/24/00 - I know you're reading this web page. Go take the survey!
    
    08/18/00 - Hmm. Sort of dead, eh? Work has been continuing, albeit slowly. Hopefully it will culminate in a new release soon, with more features and increased stability. Until then, though, lots of people keep wanting to know how to set the oper password. This small Perl program can be used to generated encrypted passwords.
    
    10/13/00 - There is some munchkin out there who keeps submitting pircd to IRC related web pages' link lists. This I don't mind. But they're using MY email address, increasing the amount of spam that I am going to get. This is lame in the extreme. Stop it. Now.
    
    12/14/00 - pircd Beta Zero is out! It now has SSL support, a feature present in few other IRC servers!
    
    06/05/02 - pircd Beta One is out! Not quite as exciting as Beta Zero, but if it were, then it would be called Gamma Zero, instead of Beta One. This release fixes some rather annoying bugs regarding channel keys and channel limits. If you make significant use of channel keys, UPDATE!
    
0. pIRCd2, first fork pIRCd.

    pIRCd2 was not versioned.
    It added a few features, the most famous being the allowance of the dollar sign ($) in nicknames.
    pIRCd2 eventually evolved to be become the first version juno-ircd.

1. May 29, 2010 - July 5, 2010 (first commit) - version 1 of juno-ircd is based on pIRCd, the perl IRCd daemon.
    Although juno version 1 was not versioned, this lists some of the main features added.
    
    Reverse DNS is checked for resolving back to the connection IP, unlike in pIRCd.
    
    Prefixes ~, &, and % were added, making juno a 5-prefix server with owner, administrator, operator, halfop, and voice.
    
    NAMES outputs multiple prefixes, allowing clients to keep track of multiple status modes set on users.
    
    The server now responds to CAP messages.
    
    Added channel link (+L) mode. If the population limit (set by +l) is reached, users are forwarded to the linked channel.
    
    Automatic modes are set when channels are created.
    
    Added internal logging channel where the IRCd sends messages to an operator-only channel.
    
    Added network administrator lines (NA).
    
    Added operator override mode (+O) to prevent accidental abuse of override capabilities, which is unset after 2 minutes of inactivity.
    
    In viewing of ban and mute lists, juno now keeps track of the users or servers who set the modes.
    
    Masks are now checked to be valid when setting modes such as ban and mute.
    
    Added mute/quiet channel mode (+Z), similar to +q of charybdis.
    
    Users who are banned from channels but are in them can no longer speak.
    
    Fixed K:Line, adding the ability for operators to add K:Lines through the use of an IRCd command.
    
    Rewrote the linking protocol, properly sending bursts, modes, topics, joins, and more.
    
    Fixed an issue where XChat users report enormous amounts of lag on their lag indicators.
    
    Added a network name configuration option (NETWORK in RPL_ISUPPORT.)

    Fixed many, many other bugs of pIRCd, making it almost usable.

2. February 18, 2011 - version two of juno-ircd is a complete rewrite.

    0. February 18, 2011

        5. February 18, 2011

            0. February 18, 2011

                * Adds LIST command.

                * Changes filehandle to while (my $line = <$MOTD>) in user::handle_motd.

            1. February 19, 2011

                * Adds channel mode z - ops may view what a user is saying if he or she is incapable of PRIVMSGing or NOTICEing the channel.

                * Fixes a bug with sprintf in user::sendserv in WHO and NAMES where the % prefix caused issues.

            2. February 19, 2011

                * Rehash notice is sent before actually rehashing.

                * Added ISON command.

                * Redid cloaking - you don't even want to know the issue before. (Now requires Digest::SHA (core))

            3. February 19, 2011

                * Supposedly fixes bug in perl module loader with an import. (this was a fatal bug.)

            4. February 19, 2011

                * Actually fixes bug in perl module loader with an import. (this was a fatal bug.)

                * Adds --version to juno.pl

            5. February 19, 2011

                * Does cloaking by each piece of the host rather than the entire entire host hashed.

                * Adds checking for both actual host and visible host with bans.

                * After forgetting, add z to CHANMODES.

                * Display time properly in 003 numeric.

            6. February 22, 2011

                * Fixes bug in NICK command that does not allow you to change your nick from say Someone to SomeOne.

                * Fixes bug in NICK command where the nick change is not relayed to the user who sent it if they are in no channels.

                * Fixes "Odd number of elements in hash assignment at user.pm line 344." in user::handle_nick.

            7. February 22, 2011

                * Major cleanups in user.pm (in almost every handler).

                * Replaces user::sendnum with user::numeric and the %user::numerics hash. (this has existed, but is just now being cleaned up.)
                  Note: sendnum is still a valid function; it is used in the numerics displayed upon connecting in VERSION.

            8. February 22, 2011

                * Replaces a few various variables with %main::GV.
                  This hash is used to store information more easily with less of a mess.

                * The MOTD is now stored in %main::GV rather than opening and reading the file with every /MOTD.

                * Cleaned up user::new by removing all of the now broken host resolving stuff.

                * Fixed channel.pm to where nonops can see the ban and mute lists but still not entirely fixed because I and e should be op-only.

            9. February 22, 2011

                * Cleaned up numerics in channel.pm where it matters, but didn't clean up the stuff that will be eventually redone.

                * Also cleaned up channel::allsend with sprintf.

                * Other various cleanup in channel.pm.

                * Fixed numeric 432 => 433 in handle.pm (Nick is already in use).
                  - I forgot a bracket and pushed, but then I fixed it immediately after.

                * After committing a fail, I fixed channel::allsend. Syntax is now channel->allsend(string, user to be ignored or 0, sprintf values).

        6. February 24, 2011

            0. February 24, 2011

                * Cleaned up channel.pm by completely rewriting the messy handlestatus and sendmasklist subs.

                * Also cleaned up the channel mode handler a bit.
                  This should fix the bug with viewing bans, exceptions, invite exceptions, and mutes.
                  Because the majority of channel.pm has been rewritten and lightly tested, it is likely that bugs will be discovered from here on.

            1. February 25, 2011

                * S is now for away in WHO query. (how that happened, the world may never know.)

                * Added user::acceptcheck. This checks if the server is accepting new connections. (defined by limit:clients)
                
                * Added user::ip_accept. This prevents a user from connecting if their per-ip limit is reached. (defined by limit:perip)
                  This will also be used when Z-Line is added, forcing the user to disconnect before they finish the connection process.
                  These fixes should fix the crash that occurs when the server accepts more connections than it can handle.

                * Changed ping:msg to use sprintf for the number of seconds.

                * Changed SIGINT handler to quit each user properly before killing the IRCd.

                * Moved juno.pl to juno, making it executable and updating documentation and ./juno --help.

            2. February 25, 2011

                * Misc. cleanup.

                * Cleaned up WHOIS numerics.

                * Fixed bug in part - forgot a parameter for sprintf.

                * Fixed 324 numeric (forgot +).

                * Fixed "You're not a channel" in channel status setting.

                * Fixed bug where anyone can set modes e, b, Z, and I.

            3. February 26, 2011

                * Adds Z-Line.
                  This adds the zline block to the configuration.

                * Fixes rehash to clear all configuration options (excluding listen) before resetting them.

            4. February 26, 2011

                * Fixed bug where attempting to set qaohv without parameters replies with a "You're not a channel operator" numeric.

                * Added channel mode l (channel user limit).

                * Fixed misc. bugs in channel mode handler.

                * Prepared mode handler for future modes.

            5. February 28, 2011

                * A user may not change his nick if he is banned or muted in a channel.
                  Why was such a small change an increase in version..?

            6. February 28, 2011

                * Discovered bug and fixed the entire channel::dojoin subroutine.

                * This bug caused various issues upon joining, such as replying with "you are banned" even if you aren't, allowing you in a +i channel without an invite, etc.

                * After forgetting, add i to CHANMODES.

            7. March 1, 2011

                * Fixed bug in channel.pm where topic changes are sent improperly.

                * Fixed a similar bug in viewing topics (too many sprintf parameters).

                * Fixed bug where MOTD is not reset and is instead appended upon rehash.

            8. March 1, 2011

                * Prepared for displayed host changing by redoing the way cloaking sets cloaks.

            9. March 1, 2011

                * Added auto-access mode A. This gives accesss to a user that matches the mask provided. (see README.)

        7. March 1, 2011

            0. March 1, 2011

                * Channel mode A now checks both displayed and actual hosts (formerly only displayed).

                * Fixed bug in part - user::fullcloak != user::nick.

            1. March 1, 2011

                * Fixed bug where everyone gets every status in auto-access. (wow, fail)
                * Added vhost to oper block - set virtual host upon opering.

                * Fixed bug in auto-access so that you only receive each mode that applies to you once.

                * Made host matching insensitive to case for bans, mutes, etc.

            2. March 3, 2011

                * Masks in channel modes are now fully insensitive.

                * Setting mode -b SOMEONE!*@* before would not remove a ban on someone!*@*, but now it will.

                * Did a bit of cleanup in channel.pm.

            3. March 4, 2011

                * Put package above use in all packages.

                * Began the base of the module API.

                * Added Hello World module as an example module.

                * Automatically loaded modules are separated by commas in main:modules.

                * If no modules are to be loaded, set as 0 to disable.

                * Because the module API requires Class::Unload, added a configuration option to enable or disable the API completely.

            4. March 5, 2011

                * Added API::alias_register: this is used to add serverside aliases to juno more easily.
                  Unfortunately, there are not yet variables for arguments sent, but this is planned.
                  See hello world module for an example.

                * All API functions must now return true value in order to be successful - see helloworld module.

                * Added MODLOAD command and modload oper flag.
                - "Prepend" should have been "append" in the commit, but "prepend" each module with .pm (this failed)

            5. March 5, 2011

                * Fixed syntax error with .pm in API.

                * Forgot to do the same in MODLOAD; fixed.

                * Fixed main file to where API is not required (defined by enabled:API).

                * Added API timers and a timertest module for an example.

            6. March 6, 2011

                * A LOT of misc. cleanup, perhaps the largest cleanup in juno's history. (this is bound to result in future bugs.)

                * Added --stop argument and --restart argument.

                * Added TERM signal handler.

            7. March 6, 2011

                * Fixed a major bug where the outbuffer does not clear properly.

                * Fixed bug in numeric where the user object was being sent in numerics. (Fail)
                
                * Added a sleep to --restart argument to ensure that the process was killed before attempting to listen.

            8. March 7, 2011

                * API modules must be named API::module::mode_name_here as of now.
                  Formerly, API::module_name_here was acceptable, but due to future API extensions this is no longer valid.

                * Fixed bug in user::ison that pretty much broke the entire channel system.

                * Fixed bug in NAMES and WHO commands with sprintf - no longer prefixes nick twice with % if the user is halfopped.

            9. March 13, 2011

                * Created a bash script to handle stop, start, rehash, etc.
                  This script allows juno to be run from any directory - juno was also edited to work properly with this script.
                  Juno may no longer be run without the use of this script unless all proper parameters are given.

                * Now deleted PID file when exiting.

        8. March 13, 2011

            0. March 13, 2011

                * All API plans have been canceled.

                * Moved version stuff to etc/version.

                * Added restart option to ./juno.

            1. March 19, 2011

                * Changed all spacing from two to four spaces because it looks nicer.

                * Removed a few more remains of the module API.

                * Removed indev from the git ignore file.

            2. March 20, 2011

                * Moved miscellaneous functions to utils package rather than main.

                * Discovered bug: nick changes are sent twice if to the user changing his nick if he is in a channel with himself. (or at least I think that's the problem.)

                * "Read error" -> "Connection closed"

            3. March 20, 2011

                * Misc. Cleanup, mostly in the invite handler. Also changed split()s.

                * Majorly cleaned up bin/juno - just a cleanliness check.

                * Channel mode z no longer allows users to override channel mode n; users must be in the channel to be affected by this mode.

                * Added SACONNECT command like that in InspIRCd.

                * Removed a few more things about the former module API from docs.

            4. March 24, 2011

                * Made indev prettier.

                * Rewrote start/stop/rehash script.
                  It now has help and version actions.
                  Attempting to run it without arguments prints the usage help.

            5. March 24, 2011

                * Fail, $D should be $DIR in bin/juno... who knows how that happened? Fixed.

                * Version script failed, but I fixed it.

                * Added LOCOPS command.
                  It's exactly the same as GLOBOPS since we currently only support one server.
                  This adds the locops oper flag.

                * Fixed the "No text to send" bug.
                  Blank messages are no longer accepted.

                * Fixed the bug where nick changes are sometimes sent twice.

            6. March 24, 2011

                * Fixed bug where user mode x can be set/unset even if cloaking is not enabled.

                * bin/juno now fatal()s if an attempt to listen using SSL is made and SSL is disabled in the configuration.

                * Start/stop/rehash/etc script now has a forcestart option which starts juno whether or not a PID file exists.

            7. March 25, 2011

                * Beginning redesigned module API.
                
                * Added API::Module package (currently nonfunctional).
                  By the way, the API is excluded from versioning and changelog until it is functional.

                * Added HelloWorld module.

            8. March 26, 2011

                * Fixed a fatal bug in REHASH command.

                * Fixed cloaking (I think)... I guess it's been like this for a long time and I just noticed.

                * Fixed bug in start/stop script that preventing juno from starting without the force option.

                * Fixed bug where all users were shown as using SSL in WHOIS command.

            9. March 27, 2011

                * Misc. cleanup.

                * Added CHGHOST command.
                  This adds the chghost oper flag.

                * Fixed a fatal bug that occured when the outgoing buffer is not empty and a user quits.

                * Updated 004 numeric.

        9. March 27, 2011

            0. March 27, 2011

                * Completely rewrote handle.pm due to bugs and other issues.

            1. March 28, 2011

                * Cleaned up user.pm A LOT.
                  (Expect new bugs.)

                * Moved user numerics to utils.

                * Moved user handlers to a new package called userhandlers.

                * Did some other cleanup in bin/juno and utils.pm.

            2. March 29, 2011

                * Replaced splits by / / in the user handler to split by whitespace.
                  This fixes several bugs that allowed an incorrect number of parameters in command handlers, causing all kinds of messups.

                * Replaced some undefined functions from the transition from user.pm to userhandlers.pm...
                  This fixes several fatal bugs, but don't be surprised to find more.

                * Added channel::prefix to fetch a user prefix.
                  NAMES command now uses this function.

                * WHOIS queries now display the channels that a user is in.

                * Fixed bug in user mode handler where modes i and x were thought to be nonexistent.

            3. March 30, 2011

                * Did some cleanup in bin/juno.

                * Fixed bug where include didn't work in the configuration at all because confparse() unsets options before parsing a file.

            4. March 30, 2011

                * Cleaned up channel.pm A LOT.

                * Fixed several bugs... maybe they'd be listed here if Filezilla didn't cause me to lose my unsaved data.

                * Fatal bug fix: sha1 != sha256 in loading of the cloaking module.

                * Fixed bug in user::quit, caused by user.pm cleanup in 0.9.1 that didn't relay quits correctly at all.

                * user::numeric uses int now.

                * Fixed bug where it's possible to a kick user when they are not in the channel.

            5. April 2, 2011

                * Finished API::Module.
                  This adds enabled:api to enable the module API.
                  It also adds main:modules to load modules on startup.

                * Finished API::Command.

                * Fixed bug where QUIT is not sent to a user when he is /kill'd.

                * Finished HelloWorld module.

                * Cleaned up configuration parser.

            6. April 2, 2011

                * Added mode limit to new channel mode handler as defined by limit:chanmodes.

                * Added updown module.

                * Fixed several bugs in channel mode handler.

                * API register_command now requires a command description parameter.

                * Added COMMANDS command to list commands.

            7. April 6, 2011

                * Fixed bug in handle.pm where USER didn't give a numeric if the username was invalid.

                * Cleanup: user.pm handle.pm.

                * The largest cleanup of 0.9 begins here (userhandlers.pm.)
                  Expect new bugs to come about.
                  I'm completely ignoring the versioning system for a while so that new bugs from here on can be marked as "caused by userhandlers cleanup."

            8. April 6, 2011

                * Bug fix: no such nick/channel in MODE when setting or viewing a channel mode.

                * Bug fix: parameter messups in OPER command.

                * up module's UP command no longer sets modes that are already set.

                * Added sync module.

                * Cleanup.

                * Added API::Core: registers core API commands MODLOAD and MODUNLOAD.
                  In order to be considered a "successful" unload, modules must return a true value in their void subroutine.
                  This adds the modload and modunload oper flags.

                * Notices from API::Module and API::Command are now snotice()d as well as say()d.

            9. April 7, 2011

                * Bug fix: TOPIC was blank if less than the character limit.

                * Auto-status mode A now supports multiple statuses in a single mode.
                  For example, mode +A qao:*!*@* grants modes q, a, and o to all users.

                * Added Denny's API::Loop. This registers a code block to be executed each time juno runs through the main loop.

                * Added example::loop module.

                * Cleanup.

                * Fix bug in WHOIS where it said "no such server" when doing WHOIS <nick> <nick>.

                * New wiki: https://github.com/cooper879/juno/wiki
                * Modes in 004 are accurate now I think.

                * Fixed bug in ping timeout.

    1. April 10, 2011

        0. April 10, 2011

            0. April 10, 2011

                * Added grant module.
                  This adds the grant and deoper oper flags.

            1. April 10, 2011

                * Fixed fatal bug where ./juno rehash crashes server. :(
                * Fixed bug in channel mode handler where l could not be unset and other stuff failed.

                * Added rules module by ebest97.
                  The directory to the rules file is set by rules:file configuration option.

                * Added admin module by ebest97.
                  The lines are defined by admin:line1, admin:line2, and admin:line3.

                * Redid oper privs system to be based on individual flags, not oper accounts.
                  $user->{oper} no longer exists; use $user->ismode('o').

                * Added grant module.
                  It requires 1.0.1 and above.

            2. April 12, 2011

                * Added an easy way to setup "oper classes" (sorta.) See the example configuration.

                * Fix bug: set o if granted flags when o is not set.

            3. April 16, 2011

                * Fixed a bug in del_privs that caused an endless loop. :(
                * Added UNGRANT command to grant module.

                * Fixed several bugs in new oper system, one of which was fatal.

                * Fixed bug in topic char limit.

                * Added message char limit (PRIVMSG and NOTICE), defined by limit:msg.

                * Added PRIVS command to grant module.

            4. April 18, 2011

                * What's an operatgror? o_O
                * Channel automodes now support parameters. (you'll probably laugh at how I made that possible.)
                  Also, nonexistent modes will be ignored.

                * Added genssl and mkpasswd options to ./juno script.

                * Added currently nonfunctional module manager.

                * Added ./juno mod to enter the module manager.

                * Moved API modules to juno-mods repository.

                * Two modules can no longer have the same name.

                * Added API::Event.

            5. April 22, 2011

                * The module manager isn't quite finished but is now officially supported in dev-1.0.5.

                * Added ./juno debug to start in NOFORK mode.

                * Fixed fatal bug in API events.

                * Strip whitespace from the end of a snotice().

                * API::Core's MODUNLOAD command now requires the modload flag rather than modunload.

                * API::Core's MODLOAD and MODUNLOAD commands now accept the 'modules' oper flag.

                * Since just about every command has a parameter check, juno's command handler now has built-in parameter check.
                  API::Command now has an optional parameter for extended options. This will be used for future options as well.
                  The params option sets the required number of parameters for the command to be successful.
                  If the Required parameters are not met, a numerical "not enough parameters" error will be displayed.
                  Example: register_command('hello', 'Hello World!', \&handle_hello, { params => 2 }); # says that two parameters are required.
                  /HELLO Hello (incorrect) /HELLO Hello World! (correct)

            6. April 23, 2011

                * Changed all of the handlers in userhandlers.pm to use the new parameter option.
                  I wouldn't be all that surprised if this caused a few bugs here and there.

                * Fixed bug where the module API was loading modules relative to the location where you started juno rather than juno's installation directory.

                * Made /COMMANDS prettier.

                * Added 'flag' option to register_command.
                  If the user does not have the specified flag, a "permission denied" numeric error will be displayed.

                * Fixed a bug in the new params option where the command counted as a parameter.

                * Z-Lines are now D-Lines as to follow STATS numerics in rfc2812. The configuration now accepts either zline or dline.

                * Added time2seconds() and add_commas() utils.

                * Edited userhandlers.pm to use the new 'flag' extended option.

            7. April 24, 2011

                * Made the README prettier.

                * Added a valid_ipv4() util and a disgusting valid_ipv6() one too.

                * Fixed bug: sometimes MODE takes only one parameter.

            8. April 25, 2011

                * The module manager now uses both its version and juno's version to validate compatibility.
                  In order to use our module server, you must upgrade juno.

                * The module manager no longer allows non-compatible modules to be installed.

                * K-Line check shouldn't check nick!ident@host. I fail.

                * Fixed the API::Core "no such file or directory" error every time.

                * checkkline() was using nick instead of user. I fail.

                * Fixed checkkline() so now it doesn't send a quit server notice if a k-lined user attempts to connect.

                * checkkline() is no longer case-sensitive.

            9. April 26, 2011

                * utils.pm cleanup.

                * Added numerics 252, 254, and 255 to LUSERS.

                * Finished channel mode k and fixed join to work properly with it.
                  JOIN channel,channel key,key

        1. April 28, 2011

            0. April 28, 2011

                * Now supports commands in the form of ':source command' (you'd think this would have been done a long time ago.)

                * Fixed bug in API::Command where an incorrect parameter in register_command could potentially cause a crash.

                * Fixed bug where you can't return from being away.

3. April 30, 2011

    0. April 30, 2011

        0. April 30, 2011

            0. Added directory finder.

            1. Finished configuration parser and fetcher functions.

            2. Fixed configuration parser.

            3. Added load_requirements() and fatal() util.
               user.pm is now solely for users; connection.pm will handle connections.

            4. Whoops, forgot to put fatal() in @EXPORT_OK.
               fatal() logs the method that called it now.
               Added create_sockets() to create listening sockets and fatal() if not listening.
               Added main loop stuff.
               Added handler to connection.pm (kinda.)
               Added send functions.

            May 1, 2011

            5. Added basic pre-registration commands and temporary incoming data handler (without any form of flood protection.)

            6. Set connection->{ready} when NICK and USER have both been verified.
               Made the configuration parser ignore blank lines.
               Finished outgoing buffer.

            7. Added user::new() and some more user.pm stuff.

            8. Added connection::lookup() to a find a connection by its user or server object.
               Finished connection.pm's data forwarding to user.pm or server.pm.

            9. Finished SERVER and PASS.

        1. May 1, 2011

            0. Fixed realname bug.
               Change configuration setup.

            1. Fixed crash if disconnect before register.
               Allow any drop-in replacement for IO::Socket::INET such as IO::Socket::IP or IO::Socket::INET6.
               Finished flood protection and incoming buffer.

            2. Added md5 support.
               Changed configuration some more.
               Added autoconnect and stuff.

            3. Added more linking stuff.

            May 2, 2011

            4. If the credentials have been sent, don't send them again.

            5. Created server::linkage for local protocol functions.

        2. June 12, 2011

            0. Add trim() util.
               Keep track of server descriptions in server.pm.
               Configuration parser now takes literal values and has improved syntax.
               user::mine module is for handling of local user data.

            1. Finished ping system!
               Failure to respond to the first PING now leads to a registration timeout on unregistered connections.
               Added lconf() util for fetching name configuration values.
               
            2. Only send PING if there isn't a pending ping.

            3. Constants on and off define true and false values in the configuration.

            4. server::mine contains the linking protocol handler.

            June 13, 2011

            5. a few fixes.

            6. user::numeric contains numerics.
               Keep track of the server users are connecting from.

            7. added more functions to server::mine include send() to send data to a connected server.
               added user::handlers and server::handlers for local handlers.
               keep track of servers' parents.
               other fixes.

        3. June 13, 2011

            0. Fixed bug where IRCd exits when attempting to write on a closed connection.

            1. $user->mine->method() and $server->mine->method() now calls methods in user::mine and server::mine from a user or server object.

            2. Reverted the stupid ->mine stuff.
               Added several shortcuts to *::mine package functions.
                 - you can, of course, call them on an object such as $server->server::mine::send()
               Added register_handler() to server::mine - registers a CODE reference to a command handler.
               Server now handles and sends the UID command.
               Added server::lookup_by_id() to find a server by its SID.

            June 14, 2011

            3. Store server parents by object, not SID.
               Added user::is_local() for determining if the user is on this server.
               server::outgoing contains outgoing commands.
               Added quit() and uid() to server::outgoing.
               Delete all users from a server when that server splits.
               Connects, quits, and bursts should be completely accurate now - the servers should always be synced with users.
               Properly remove child servers, their children, their children's children, and so on when a server splits.

            4. Fixed a bug that sometimes leads to a crash where the local server's parent was unknown (itself).

            5. Fixed several bugs in UID.
               Added SID to share servers from server-to-server.
               BURST no longer sends information on users and servers that the target server is already familiar with.

            June 15, 2011

            6. UID handler now determines who wins a nick collision battle.

            7. Added nick check to registration.
               Fixed a bug that occurred when an unregistered connection disconnected.

            8. Added loop functions to extend the main loop.

        4. June 13, 2011 <- obviously time is going backwards (June 15, 2011)

            0. Added hostname resolving! (don't expect it to be perfect [yet])

            June 16, 2011

            1. Fixed a small bug in the hostname resolver.
               Added "forward" option to server handlers.
               When enabled, this server forwards the line to the child servers.
               Fixed a crash bug on nick collision.

            2. Fixed more bugs in the resolver.

            3. Hopefully these fixes will prevent thousands of nick collisions.

            4. Just kidding; this should fix it.

            5. nope, maybe this will.

            6. I almost promise that it works now.
               Fixed a small bug in quit().

            7. Fixed some bugs. Hopefully it actually does work now.

            8. Never mind, this will fix it.

        5. June 16, 2011

            0. Rewrote the hostname resolving. I think it might actually work now. (but don't believe me; I've already thought that the last 10 commits)

            1. I REALLY think it will work now.

            June 17, 2011

            2. Cleaned up a bit.
               Added hostname notices.
               Added user handler and a few other things to  user::mine.
               Fixed a bug where PINGing was done more often than it should be.

            3. Finished user numeric stuff.
               Added fake USER command.

            June 20, 2011

            4. Added some numerics to user connect.
               Added LUSERS command.
               Added MOTD command.

            June 22, 2011

            5. Added more numerics.

            6. Added NICK user command.
               Relay nick changes to child servers.
               Handle NICK command from servers.
               Added fake PING command.

            7. Added INFO command.
               Added support for SHA224 and SHA384.

            July 7, 2011

            8. Fixed a few small bugs.
               Added the ability to fork and become a daemon.
               Added NOFORK option.

            July 8, 2011

            9. Fixed broken NOFORK option.
               Added RPL_ISUPPORT, but much of it is unfinished since channels don't exist yet.

        6. July 8, 2011

            0. beginning to work on channel.pm.

            1. Added channel join method that keeps the channel time accurate.

            2. Added lookup_by_name() channel function.
               Added some other channely stuff.

            3. RPL_LUSERCHANNELS should only be sent if non-zero.

            4. Made some changes to the user mode system.
               Do not change nicks if the nick is taken.

            5. I probably fell asleep while writing the mode validator thingy, but now it is fixed.

            6. Added is_mode() and unset_modes() user functions.
               Fixed a bug that causes crash on user connect because you can't push to a nonexistence array reference.

        7. July 17, 2011

            0. Moved resolve stuff to separate "res" module.

            1. split RPL_ISUPPORT into several lines when necessary.

            2. random cleanup of outgoing.pm

            3. added some stuff to make sure we only sent BURST once.

            4. changed a few more things in burst.

            5. added user mode module.
               from here on, modes will be named rather than lettered.
               fixed a small warning in RPL_ISUPPORT.

            July 18, 2011

            6. added outgoing ADDUMODE command.

            7. send ADDUMODES in burst.

            8. send my ADDUMODES also.
               register internal modes to the local server.

            9. handle ADDUMODEs.

        8. July 18, 2011

            0. handle UMODE server command.
               added user::handle_mode_string() which translates a string of mode letters to their mode names and sets or unsets them.

            1. added user->mode_string() to create mode strings to the user's local server.
               actually send modes in UID command now.

            2. handle mode strings in UID and apply the modes.

            3. made it possible to add multiple user handlers of the same command (which will be useful later in the module API.)

            4. did the same for server handlers.

            5. added default mode settings.

            6. added MODE user command.
               handle_mode_string() now returns the final mode string, which will be used later.

            7. cleaned up some stuff.

            July 19, 2011

            8. send MODE string back to a user when he sets user modes.
               fixed time bug in resolving.

        9. July 19, 2011

            0. Fixed a small bug in the user mode handler.

            1. added user mode tests. if any of the tests fail, the mode will not be accepted.

            2. send UMODE to other servers.

            3. added PRIVMSG handler! :D
                 local user-to-user PRIVMSGs should work now.

            4. added PRIVMSG server handler.
                 global user-to-user PRIVMSGs should work now.

            5. added a really fail MAP that will be made prettier later.

            6. fixed a few things and added more numerics to LUSERS.

            7. fixed something in LUSERS.
               added nickname in use numeric.

            8. fixed another LUSERS bug.

            9. added NOTICE command.
               send NOTICE from server to server.
               fix a couple small things.

    1. July 20, 2011

        0. July 20, 2011

            0. added join user handler. (yay, soon we will have working channels!)

            1. fixed a bug in the PRIVMSG/NOTICE handler.

            2. omg we have join.

            3. joining a channel now sends NAMES and creation time.

            4. local PRIVMSG to channel now works.
               quit messages are sent to users in common channels now.

            5. send and handle joins among servers.

            6. just kidding. it will work now.

            7. still kidding... maybe this will work.

            8. okay, channel PRIVMSGs now work globally.

            9. send channel joins in burst.

        1. July 20, 2011

            0. Maybe this will fix fail problem?

            1. users should definitely be removed from channels properly now.

            2. I should stop saying 'definitely' when i'm not sure.
                 now they should DEFINITELY be working right.

            3. i'm too unorganized to know or care what changed in this commit.
                 why do i even keep track?
                 odds are that i'm going to do five or six more to fix this commit because it's probably broken
                 just like all the others.

            4. maybe this will fix the flood problem.

            5. or this. hash != hashref.

            6. I THINK CHANNELS ACTUALLY STAY IN SYNC NOW AND I AM USING CAPITALS BECAUSE THIS COMMIT IS ACTUALLY IMPORTANT.

            7. show SID in MAP.

            8. added NAMES command.

            9. send NICK messages globally. nicknames should be in sync at all times now.

        2. July 21, 2011 (omg time please no..)

            0. removed LUSERS temporarily because it sucks.
               added OPER command, oper blocks, and oper classes!
                 see the example configuration.
               user->handle_mode_string now takes an optional 'force' argument that, when true, skips the mode tests.
               this new argument is now used in the linking protocol, that way servers can force users to oper up.

            1. added user functions to add/remove/check oper flags.

            2. keep oper flags in sync between servers that way we can user->has_flag for non-local users.

            3. only send the MODE message if the returned string isn't empty.
               send ircop mode to other servers on /oper.

            4. fixed a crash.. dunno why i put 'opers' instead of 'flags'

            5. fixed a bug where you could not unset your oper mode.

            6. rewrote the way mode blocks are done.

            7. RPL_MYINFO now shows the actual user modes registered to the ircd.

            8. connect blocks now allow wildcards in the IP address.

            9. added host option to oper blocks. see example configuration.

        3. July 22, 2011

            0. Added WHOIS command.

            July 23, 2011

            1. Added ISON command.

            2. Added handler description and COMMANDS command as in the earlier version of juno.

            3. Added AWAY user command.

            4. Send and handle AWAY messages from server to server.

            5. Added away line to WHOIS command.
               notify users when they send PRIVMSGs to away users.

            6. Added QUIT command (both as a normal command a pre-registration command.)

            7. might as well use the magic provided by IO::Handle.

        4. July 25, 2011

            0. added base of channel modes and mode handler.
               removed useless mode test code (which was replace by mode blocks in user/modes.pm)

            1. made several improvements to the channel mode handler and channel/modes.pm.
               fixed a bug in the user mode handler where force didn't apply blocks.

            2. added ADDCMODE and CMODE server commands.
               burst ADDCMODE and CMODE.

            3. added handlers for ADDCMODE and CMODE.

            4. MODE handler now handles channel mode strings.
               when modes are set to channels, they should properly be sent in MODE messages to both local and non-local members.
               cleaned up a bit in server/handlers.

            5. MODE now accepts a channel with no other parameters.

            6. this should fix a few things.

            7. fixed bug. now the channel modes should be sent among servers.

            8. CHANMODES is now accurate!


            July 26, 2011

            9. fixed a few more things with channel modes and stuff.

        5. July 26, 2011

            0. FINALLY fixed the ridiculous bug that made the IRCd unpractical for use.
               Now we know that this IRCd still has hope to become usable.

            1. fixed a couple of crash bugs in channel communication.

            2. send CMODE types from server-to-server.

            3. added CMODE converter to translate names to modes.

            4. fixed bug in the new mode converter.

            5. made several major improvements to status modes!

            6. added support for five prefixes.

        6. July 27, 2011

            0. This is too big of an update to explain in a few lines.

            July 30, 2011

            1. fixed a number of bugs in the burst with modes, etc.

            2. added mode_string_all, which is the same as mode_string except it sends ALL modes, including status modes and list modes.
               hopefully this will make channels stay in sync with modes (except during netsplits where the lower TS should be taken, but I'll get to that soon.)

            3. more improvements in taking the lower TS.

            4. remove users from status lists when they quit/part/etc.

            5. delete channel data if the last user leaves the channel.

            6. added PART user command.
               added PART server command.
               channel user lists should be 100% accurate at all times now.

            7. hopefully this will fix a few bugs in channel mode syncing.

            8. after all that debugging.. it turned out to be the smallest typo ever.

            9. don't accept mode changes for older times.

        7. July 28, 2011

            0. this bug makes me so extremely angry.

            1. don't allow to /connect to a server that is already connected.
               close connection to a server if it isn't who we thought it was.

            2. hopefully this fixes things.

            3. only ops can set channel modes now.
               also, I'm pretty sure that all of the bugs causing crashes because of unrecognized clients are fixed.

            4. fixed a small bug in the mode handler that leaves an extra + or - on the end of mode strings.
               please don't laugh at how i fixed it.

            5. seeing as the IRCd is beginning to fill out, I added a start/stop/rehash/etc script.
               I might even start changing the version numbers! (the protocol version has been .1 this whole time LoL)

            somewhere in here I skipped like 5 days so I actually did the below in August

            6. added ./juno lines to count the number of lines in your copy.
               added ./juno mkpasswd to run the password generator.

            7. I thought about this, and I think that while might be better than for here.

            8. fixed a couple of things with user modes.

        8. August 4, 2011

            0. channel mode no_ext (no external messages) actually works now.

            1. channel moderation actually works now.

            2. fixed channel mode alphabetization.

            3. added WHO command.

            4. rewriting the main loop in order to hopefully fix some bugs and also support fakelag.
               the same flood protection and stuff has been in juno since pIRCd and definitely needs updated for efficiency and misc. bug fixes.

            5. a few small improvements to handle a heavier load.

            6. more improvements to the main loop.

        9. August 7, 2011

            0. This is probably the biggest commit in the history of juno.
               There are a ton of small changes, but a few in particular that I'd like to point out.
               I found and fixed 3 memory leaks involving references referring to themselves.
               Reference trackers now log to make sure we have no more problems with this.
               IO::Socket::IP is now a dependency but is included with juno.
               The GV system that juno uses has been fixed up.
               Buffered data is now stored within socket objects so modules will be able to read them.
               Data is now parsed immediately after it is received in full, so in cases like a large server burst the rest of the network doesn't just hang until it's over.
               juno is smart enough now to only parse data when it is fully received - sysread sometimes hands it more than it can take in one go.
               This is a huge update. There will probably be some more like this because I'm trying to make juno as efficient and memory-friendly as possible.

            1. Fixed bug where UID was sent to servers before automatic modes were set.
               Fixed RPL_MYINFO to have accurate channel modes.

            2. Fixed the nick collision bug I think.
               ircd no longer crashes if it tries to hash using an unloaded crypt.

            Apparently 3 and 4 were skipped...

            August 24, 2011

            5. Added the dependencies to IO::Socket::IP to dep/.
               Improved security and stability in several places - especially in the linking protocol where incorrect data would cause the IRCd to crash before.
               I really need to stop doing enormous amounts of work without committing, because I end up with huge commits like this one.
               Once again, this is a huge update spanning for / I don't really know what all I changed.

    2. September 17, 2011

        0. September 17, 2011

            0. This is another large edit. juno3 has new dependencies, but only temporarily.
               These dependencies are required in order to support servers with heavy traffic.
               See README for more information.

            October 10, 2011

            1. added compact JELP commands: AUM, ACM, CUM outgoing and incoming handler.
               re-added ping system after switching to IO::Async.

            October 14, 2011

            2. Perfected new compact JELP commands in the last few commits.

            3. Fixed a bug in the limit checker.
               Added TOPIC user command and made channel mode t functional.

            October 19, 2011

            4. Added server TOPIC command, sort of.

            5. fixed a bug in the new TOPIC handler.

            November 11, 2011

            6. Added connection limit.
               Added client limit.

            November 12, 2011

            7. added max per IP address.

            8. added global max users per IP address.

            9. added see_invisible flag to make invisible users visible in NAMES and WHO.
               made RPL_YOUREOPER a bit more verbose.

        1. November 17, 2011

            0. fixed UID, SID, and server name collision bugs.

            1. fixed a bug where it's possible for a server to receive useless info before burst is sent.

            November 19, 2011

            2. made COMMANDS prettier.

            3. channel mode ban somewhat does what it should now.

            4. added IRCD user command to view general ircd information.

            January 1, 2012

            5. added connection tracking and LUSERS command.

            January 6, 2012

            6. added outgoing TOPICBURST server command.

        2. January 7, 2012

            This is the start of the extension API and modularization of core features.

            1. added API.pm, which manages module loading and unloading.
               added API::Module, the class which all modules will use to add features.
               began API::Base::UserCommands. API::Base::* modules are base classes of API::Module.
               began the first module, core/ping.

            2. finished core/ping.
               updated example configuration.

            3. modularized fake user command.

            4. renamed the new modules to start with 'cmd_', since eventually there will be modules for more than just commands.
               modularized MOTD command.

            5. modularized NICK command.

            6. moved PONG and USER to core/cmd_fakecommands.

            7. modularized INFO command.

            8. undid everything I just did. I have a better idea.

            9. goodbye user/handlers. hello mod/core.

        3. January 13, 2012

            0. Check if 'initialize' is CODE in module instance creation.

            1. unload users commands registered by module at module unload.

            2. added MODLOAD command to core. requires 'modload' flag.
               added more checking to ensure modules that are loaded aren't loaded again.

            3. added MODUNLOAD command to core. requires 'modunload' flag.

            4. added MODRELOAD command to core. requires both 'modunload' and 'modload' flags.
               actually made MODUNLOAD work. I should have tested it earlier.
               it is now possible to reload core, so updating juno's internal commands won't require restarting.

            5. added a command verification system to core.

            January 14, 2012

            6. added UserModes API::Module base for registering user mode blocks. (user_modes)
               user mode letters are now defined in the configuration. see example.
               moved internal user modes to core module.

            7. unload registered user mode blocks when unloading a module.

            8. moved channel modes to the configuration.

            9. fixed a couple bugs in RPL_WELCOME and RPL_MYINFO caused by channel mode modularization.

        4. January 15, 2012

            0. added ChannelModes API::Module base for registering channel mode blocks. (channel_modes)
               moved internal channel mode blocks to the core module.

            1. added TOPICBURST server command handler.

            2. tell channel users when topic is changed by TOPICBURST.

            3. I think I fixed a bug in TOPIC.

            4. I'm tired of nick collision bugs, so here's my temporary solution.

            5. added ServerCommands API::Module base. (server_commands)
               moved server commands to core.

            January 16, 2012
            Goal of the day: moving outgoing server crap to core module.

            6. separated core into several separate modules.

            7. added OutgoingCommands API::Module base for outgoing server commands. (outgoing_commands)

            8. finished core_ocommands :).
               now I have to replace all of the old server::outgoing::* calls with the new system.

            9. finished moving from the old server::outgoing::* system to the new server::mine::fire_command system.
               I have a great feeling that commit this will cause a bug or two.
               In other news, outgoing commands are now modularized.

        5. January 16, 2012

            0. fixed a bug where juno crashes if data is received from a socket that has been ->done. 

            1. fixed a bug where NICK messages were not propagated properly.

            January 17, 2012

            2. fixed a bug in PART messages being propagated.
               moved tons of code from run/ircd to a module, inc/ircd.pm instead.
               this will be useful in future changes.

            3. started working to make most of the ircd reloadable without restarting.

            January 18, 2012

            4. fixed a bug where the same oper flags would be set over and over.

            5. finally fixed all of the nick collision bugs for good.

            January 19, 2012

            6. fixed a bug where AUM was entirely retarded. it was caused by a recent code cleanup.

            7. fixed a bug where users could continuously change their nickname to their UID.

            8. fixed a bug where users returning from away caused adjacent servers to crash.

            January 31, 2012

            9. added the ability to store data with list items in channel mode lists.
               now, each channel mode block cannot assume that a user has operator status as they could before.
               a new status mode/prefix system is on its way, so channel->has_basic_status won't be around much longer.
               added ban list viewing, which should fix the issue with irssi channel synchronization.
               temporarily, anyone can set channel modes until the new channel status system is done.

        6. February 1, 2012

            0. fixed channel->list_has. this fixes a ban matching bug caused by yesterday's changes.

            1. added overload for users. in string context, user objects return UIDs.
               the main advantage of this is readability in logging.

            February 3, 2012

            2. temporarily added a fix for iterating through list values vs. data stored with them, just until I make a less ugly solution.

            3. it is quite embarrassing that this bug has existed throughout nearly two years of development.
               masks should match exactly as expected now.

            February 8, 2012

            4. added REHASH command to core_ucommands. it currently supports local rehashing only.
               this also adds the 'rehash' user flag.
               Fixed a bug win server::linkage where autoconnect didn't work right due to module load timing.

            5. this should fix a small bug where lazy mode handling created a pointless (but not harmful) CMODE message.

            6. If a user is connected through a server whose parent split during a netsplit, the server that split to
               cause this is mentioned in the user's quit message instead of the server the user is physically connected to.

            February 9, 2012

            7. added KILL command (local only, at the moment). it's probably slightly wrong, but after two hours of trying to figure it out, I don't really care.
               this adds the 'kill' user flag.

            February 11, 2012

            8. added KILL server command, outgoing command, and extended user command to support global killing.
               this adds the 'gkill' user flag.

            9. The ServerCommand base's 'params' now has parameter type checking.
               This commit is likely to break the entire IRCd.
               there are two possible outcomes of this update: many, many bugs in the linking protocol will be fixed
               or (and more likely) nothing will work at all, and trying to link two servers will lead to a crash.
               this update breaks compatibility with ALL existing API modules, as register_server_command()'s 'params' option is now required.

        7. February 11, 2012

            0. I was right about breaking the entire ircd. here's the first of many upcoming bug fixes.

            1. more bug fixes regarding the last couple commits.

            February 12, 2012

            2. For some reason, clients don't like when the H or G flag comes before prefix flags.

4. February 12, 2012

    0. February 12, 2012

        0. February 12, 2012

            0. first commit.

            1. updated version info. updated README.

            2. removed hideous HUP handler.

            3. removed server 'params' option for register_handler() because it has been replaced by the new parameter checking.
               removed server 'forward' option for seemingly obvious reasons.

            4. in server burst, don't send nonlocal users.
               don't send server information for any server except itself.

            5. actually, it makes more sense to do it this way.

            6. remove 'forward' options from core_scommands.
               in CUM command, don't send nonlocal users.

            7. don't pointlessly remember nonlocal users' prefixes in CUM.
               fixed a bug in server command handler.
               removed pointless code which was used for PRIVMSG and NOTICE forwarding.

            8. added ERROR handler.

            9. fixed bug in PRIVMSG and NOTICE handler which caused massive flooding.
               fixed bug where QUIT message would be sent for server quits.

        1. February 12, 2012

            0. made a much prettier MAP command.

            February 13, 2012

            1. don't pointlessly send KILL messages to all children. send them to the location of the target.

            2. added CONNECT server command for connecting servers remotely.

            3. user->server_notice works on nonlocal users now.
               NOTICE server command supports server noticing now.

            February 14, 2012

            4. new prefix system! now juno can have over 9000 prefixes just like inspircd.
               this adds a major change in the configuration.
               creating a new channel gives the user now status anymore (temporary).
               hopefully I can figure out how to fix that.

            February 15, 2012

            5. added "normal" mode blocks for "normal" channel modes.
               in other words, you have to have some sort of status (halfop+) to set any normal modes unless specified otherwise.

            6. automatic channel modes on join work again. this is a much cleaner approach of doing this.
               this is also used to apply modes to the user who created the channel. see example configuration for details.

            7. send CMODE if modes were changed automatically when channel is created. hopefully this should fix the desync issue.

            February 17, 2012

            8. made COMMANDS command prettier.
               added the fabulous and famous LOLCAT module from juno2.

            February 18, 2012

            9. added MODULES command for viewing loaded IRCd modules.

        2. February 18, 2012

            0. fixed two very-high-priority bugs where '0' can't be a PART message.

            1. MODULES now shows the description of each module.

5. April 5, 2012

    0. April 5, 2012

        0. April 5, 2012

            0. first commit.

            1. fixed PRIVMSG forwarding.

            April 6, 2012

            2. send all users in burst, even nonlocal users.
               send servers in burst.

            3. added 'forward' options to server::mine::register_handler() to forward messages to child servers.

            4. replaced forward where necessary.
            
            5. removed broken server CONNECT command.
            
            6. addresses an server-crashing issue where PRIVMSGing to a channel could sometimes cause a fatal error.
            
            NON-VERSIONED
            
            0. replaced SID propogation.
            
            VERSIONING SYSTEM CHANGED: juno-ircd now uses single decimal versions, such as 5.34.
            
    8. when channel timestamp is changed, the server removes all channel modes using handle_mode_string().
    
        81. adds log:server_debug option, which logs all incoming linking protocol data.
        
        82. list_elements() now double checks the data type of each element, just in case.
        
        83. don't send AUM and ACM twice.
        
        84. fixes the issue where some users are not propogated properly in channels.
        
        85. resolves an issue where some users were added to status lists two times.
        
        86. adds the 'auto_timeout' connect block configuration key, which allows you to specify a time frequency in seconds for attempting to connect to the server.
        
        87. juno now depends on API Engine rather than using its own module API system. API Engine's objective interface is, for the most part, compatible with the former juno3 API.
        
        88. fixes an issue where MODULES command does not work correctly.
        
        89. juno now depends on the EventedObject framework.
        
    9. includes the new ChannelEvents API engine base, allowing modules to safely attach handlers to channel-related events without the worry of events being called if the module is unloaded. this version also adds register_event() and delete_event() IRCd utilities.
    
        91. fires channel:user_joined event in channel::mine::cjoin() and core_scommands::sjoin() to ensure that it is fired AFTER the join command is sent to users of the channel.
        
        92. fire user_joined event after CUM.
        
        93.  fixes an issue where a server SID command might be sent before its parent's, causing multi-jump links to work improperly.
        
        94. adds protection to prevent nonexistent modes from being registered to servers. for example, '::4' in an ACM command would be ignored.
        
        95. rather than storing the message of the day in memory, it will be read each time. this addresses an issue where the MOTD is doubled in size after each REHASH command.
        
        96. improved MOTD command.
        
        97. moved inc/ to lib/, run/ to bin/. juno has historically been using these improper directory names for nearly three years.

        98. juno is now dependent on Evented::Configuration and includes it as a submodule.
        
        99. the UserCommands base now allows convenience parameter fetching, similar to what is found in the ServerCommands base. Rather than looking up users and servers using their numerical identifiers, UserCommands uses nicknames and server names. If a user, channel, or server cannot be looked up, a numeric will be sent to say so. If less parameters are received than are registered for parsing, a numeric reply will be sent.
        
6. juno version 6, started December 15, 2012.

    0. the UserCommands base now allows you to use attributes to specify different behavior for parameter checking. this adds the first attribute, 'opt', which allows you to specify that a parameter is optional. this way, ERR_NEEDMOREPARAMS will not be sent if it is absent. in addition to these changes, you can now use a whitespace-separated string of parameter types rather than an array reference in register_user_command_handler().
    
        01. parameter checking can now specify a value other than boolean, which will typically be a numerical identifier of another parameter. this also adds the 'inchan' channel attribute, which ensures that the user sending the command is in that channel, sending ERR_NOTINCHAN otherwise.
        
        02. finally added KICK user command.
        
        03. adds KICK outgoing command and JELP command. KICKs are now synchronized through the linking protocol.
        
        04. adds add_cap(), remove_cap(), and has_cap() methods to connections for managing client compatibility flags.
        
        05. this should fix an issue where even channel owners cannot set bans.
        
        06. fixes a crashing issue with REHASH.
        
        07. adds LIST user command, which allows users to see information about channels on the IRC server.
        
        08. juno now depends on the Evented::Database package and includes it as submodule.
        
        09. juno now implements Evented::Database. If all goes well, this should work seamlessly without any changes to juno's core as Evented::Database is designed to be API-compatible with Evented::Configuration.
        
    1. juno-ircd version 6 is now being branded as 'kedler-ircd' rather than juno6.
    
        11. these few changes allow you to reload ircd.pm even after a new submodule dependency is added. changes to @INC are now made in ircd.pm rather than in the main package. also, only packages vital to booting are loaded in boot() and begin(). instead, they are loaded in start().

        12. updated to a new version of EventedObject.
        
        13. update API Engine and Evented::Configuration.
        
        14. update to newer API Engine module structure (directory structure).
        
        15. permanently broke kedler.

    2. development resumed after a very long idle period.
        added channel modes ban exception (e) and invite exception (I).
        removed disgusting code for an old idea that went very wrong.
        
        21. improved server variable system.
            reenabled DNS resolution using IO::Async's built-in resolver.

        22. fixed a bug that allows ops to grant themselves channel ownership.
        
        23. added UP command to the Access module.
        
        24. Access no longer grants statuses that have already been granted.
        
        25. fixed a bug where ops cannot grant status to those of an already higher status.
            all core modules now share the IRCd version.

        26. added MODELIST command.
        
        27. MODELIST now accepts mode letters as well.
        
        28. Access's UP command now uses the parameter handler.
            prefer short IRCd name over the full name.
            
        29. fixed an issue where the :rest matcher splits the data properly but does not return the appropriate piece of data.
            the 'dummy' identifier is no longer needed to skip of the command name.
            the command name will only be included if the 'command' matcher is explicitly provided.
            
    3. added RPL_REHASHING.
        fixed an issue where the user command parameter count was sometimes inaccurate.
        added EVAL command and the associated 'eval' oper flag.
        
        31. removed IRCd command. I have never seen anything so useless in my entire life.
            user command parameter matchers that start with '-' are not considered in the argument count.
            
        32. added -oper matcher that checks for an oper flag in the parameter parser.
            always show parent modules before submodules in MODULES command.
            
        33. always prioritize the core modules over all others in MODULES command.
        
        34. this more sophisticated MODULES command only allows 50 bytes per line length.
        
        35. corrected multiple bugs in the UserCommands API base parameter handler.
        
        36. fixed an issue where user numerics could not be unregistered.
        
        37. solved a malfunction where the IRCd crashes if a user commits virtual suicide (/killing oneself).
            updated KILL command to the UserCommands parameter handler.
            
        38. improved MODULES command to not allow more than 60 characters per line.
            updated MODLOAD, MODUNLOAD, and MODRELOAD commands to the UserCommands parameter handler.
            MODRELOAD now holds a reference to the MODLOAD handler in order to retain it and prevent its premature disposal.
            
        39. deleted user::numerics package - no longer used.
            all remaining numerics have been moved to the UserNumerics core module.
            code reference numeric handlers are now accepted. a list of resulting lines is returned.
            RPL_ISUPPORT now takes configured except and invite except mode letters into account.
            
    4. ircd.pm now manages all component packages of the ircd as well as all dependency packages.
        ircd::start() can be safely called multiple times after the ircd boots.
        
        41. fixed an issue where real parameter matchers would be matched to nothing if no parameters remain.
            added VERSION command.
            
        42. current version is now stored in the VERSION file.
            $::VERSION will remain static from start, but $ircd::VERSION may change with each reload of the ircd core.
            updated VERSION command accordingly.
            
        43. the ServerCommands API base now assumes a nonreference scalar value to be a space-separated list.
            the ServerCommands core module has been updated accordingly.
            
        44. use increments and decrements during connection registration.
            this will allow modules to temporarily halt a the registration; i.e. for a hostname lookup.
            
    5. created pool, a single object that contains and manages all other objects in a single place rather across many packages.
    
        51. all IRCd events without specific objects are now handled through the Events API base.
            utils::fire_event() has been removed because all events are now fired directly on channels, servers, users, etc.
            
        52. Goodbye $main::eo - the pool object replaced this functionality.
            connection host must default to IP even before ->ready() is called in case of a registration timeout.
            extra protection: check if connection is still alive just in case in ->send().
            
        53. added Resolve module. this replaces the res package.
        
        54. all users inherit from the user::mine package now. these methods check if the user is local before doing anything dangerous.

        55. did the same for channel::mine. channel::mine::cjoin() was renamed to localjoin() due to conflicting names.
        
        56. did the same for server::mine.
        
        57. all user command handlers, server command handlers, outgoing server command formatters, user numeric handlers, etc. have been moved from their ::mine packages to the pool object.
        
        58. moved mode configuration functions out of ::mode packages and into the ircd package.

        59. ::modes packages deleted; all remaining functionality moved to the pool object.
        
    6. clean up old code that was moved to pool package.
    
        61. the Resolve module now accepts any record to match rather than ignoring multiple records.
        
        62. improved match() and validnick() utilities.
        
        63. created Matching API base for registering user matching event callbacks.
            created Matchers core module which provides the standard matchers.
            the match() utility function now calls $pool->user_match() if the item being matched is a blessed object.
            
        64. read VERSION file for the minimum version of juno components in load_or_reload().

        65. do not use the module name in matcher callback names.
            fixed a fatal issue where variables in the ircd package were overwritten by undef during reload.
            the standard matcher now immediately skips anything not in the nick!user@host format.

        66. version intentionally skipped.

        67. added $o matcher for opers.

        68. no longer limit masks to nick!user@host in Access module.

            681. fixed the above commit.
            
            682. fixed the above commit for real.
            
            683. fixed the above commit for sure.
            
        69. it makes way more sense to check if the user is an oper before checking the list.
            match $o:<flag> to any oper with flag <flag>.
            
    7. always return a scalar value from match().
        update Evented::Database.
        other random changes.
        
        71. temporarily use a main package variable to determine if sockets were created already.
        
        72. fixed a "Very bad error" where juno component package versions were incorrect.
        
        73. implemented SQLite support for use with the Evented::Database configuration instance.

        74. fixed a fatal error in which data sent after QUIT but before EOF causes ->handle to be called on a dead connection.

        75. solved an issue where hostmask matching was half-case-sensitive, causing any mask with an uppercase letter to fail.
            created Database API base for accessing DBI databases in the configured format.
        
        76. fixed a fatal issue where nick changing causes immediate IRCd crash due to lookup_by_nick().
            added ->change_user_nick() method to the pool object to replace that functionality.
            annihilated a bug in which nickname changes to the same nickname in a different case were ignored.
            
        77. added additional safety checks to Resolve module.

        78. added convenient methods to the Database API base: create_table(), table_exists(), create_or_alter_table().
            included start of Account module.
            
        79. more work to Account module.
        
    8. finished REGISTER and LOGIN commands.

        81. fixed a ridiculous bug in channel status mode tracking.
        
        82. fixed broken nick change.

        82. removed unnecessary code in channel matcher blocks.
            added a bit of spam protection to the Account module's REGISTER command.

        83. accidentally skipped this version.
            
        84. fixed an issue where SERVER command does not work at all because of changes to match().
            
        85. this should fix an occasional crash in connection closure.
        
        86. added fire_command() method to server::mine for direct use on a server object.
        
        87. fixed an issue in the ServerCommands base parameter handler that lead to several fatal errors.
        
        88. fixed a crash that occurred only when a UID command was sent on a user with no modes.
        
        89. solved a problem that prevented servers from linking properly due to pre-registration notices from the Resolve module.
        
    9. fixed a few random quirks.
    
        91. added ->do_mode_string() methods to channel::mine and user::mine. these methods handle a mode string, tell local users about the change, and send the mode string to other servers if necessary.
            update modules according to this change.
            the Access module no longer has to be loaded across all servers in order to work properly.
            
        92. fixed an issue where protocol errors lead to a QUIT command that causes the receiving server to dispose of its own server object.
            improved logging in ServerCommands parameter handler.
            
        93. can't use do_mode_string() in user JOIN command handler because CMODE must be sent after JOIN.

        94. use server mode string for ->fire_command() in JOIN user command handler.

        95. handle modes from the local server rather than the user in Access module.
        
        96. solved an issue where some users may not be ->quit()ted during netsplit due to modification of the {users} array during iteration.
        
        97. fixed broken CONNECT command.
            added ->do_mode_string_local() which is the same as ->do_mode_string() except it doesn't tell other servers about the change.

        98. not sure why but topic information was sent awkwardly between names list and RPL_ENDOF_NAMES.
        
        99. fixed a few bugs in server burst.
        
        
7. juno-ircd version 7 is now being branded as vulpia.

    0. fixed broken CONNECT command (again).
        moved global variables from utils to main package, fixing an issue where they were discarded during ircd reload.
        corrected a flaw that caused the connection count to be incorrect.
        don't send TOPICBURST to the server we obtained the topic from.
        
        01. renamed project files to juno so I don't have to mess with it after every major version increment.

        02. only send a single mode string for status modes in CUM command handler.
        
        03. fixed channel mode reset problem where + was not replaced with - because retarding.
        
        04. I think this should fix an issue where CMODE is sent even in ->handle_mode_local().
            removed annoying notices in channel mode reset.
            
        05. cleanup.
        
        06. added SQUIT user command and squit oper flag.
            fixed issue where QUIT messages for a server are forwarded to other servers.
        
                061. $line -> $data
                
        07. added server method ->cmode_string_difference().
            if all goes well, this should eleminate the mode spamming during server bursts.
            
                071. changes to ->cmode_string_difference().
            
        08. channel ->list_elements() takes an optional argument to include all information like setby and time.
            fixed an issue where /LIST command shows no channels.
            fixed a fatal issue when viewing a list for banlike.
            
        09. fixed ->cmode_string_difference(). I think it is now flawless.
            this should eliminate all mode flooding during server bursts.
            do not sent TOPICBURST to the server we got the topic from.
            this should eliminate topic flooding during server bursts.
        
    1. fixed an issue where the modes in a CUM command were handled even if the time was newer.

        11. fixed a bug where topic was sometimes not deleted properly and caused multiple problems.
        
        12. solved an issue where channel ->take_local_time() method conflicts with the new mode handling in the CUM command handler.
        
        13. fixed broken ISON command.

        14. solved an issue where status modes were sometimes handled incorrectly in CUM command.
            added ->mode_string_status(), which is like ->mode_string() except for status modes only.
            added no_status option to ->mode_string_all(), returning all modes except status modes.

        15. only send TOPIC to channel users if the topic information in TOPICBURST differs from current topic.

        16. fixed an issue where the configured ping settings for server were always used regardless of the connection type.
            added 'all' oper flag which grants all privileges.
            
        17. fixed a bug where TOPICBURST was not handled at all if no topic existed locally beforehand.
            
        18. store all {source}s as SIDs rather than server objects to prevent forgotten references and avoid confusion.
            
        19. fully replaced user ->sendserv() with ->sendme().
            added ->sendfrom() and ->sendme() to connection.pm so that they can now be used for unregistered connections.
            set lexical variable $me in modules where the local server object is accessed frequently.
            make proper use of channel ->sendfrom_all() in places where it was not utilized already.
            
                191. $s -> $me
                
    2. added ->handle_privmsgnotice() method to channel::local - handles privmsg, forwards to all local users in channel, forwards to all servers with a user in channel.
        updated PRIVMSG/NOTICE server and user command handlers accordingly.
        
        21. created Fantasy module for channel fantasy commands.
        
        22. slightly improved fantasy module with some stupidity checks, but it still needs a lot of work.
            fixed an issue where iterating ->user_handlers() or ->server_handlers() methods may cause a crash due to return of undef rather than an empty list.

        23. fantasy commands are only handled now if the user command handler was registered with the fantasy option enabled.
            updating core and other modules accordingly.
            
        24. added Reload module to reload the entire IRCd in one command.

        25. improved Reload module.

        26. improved ->user_has_basic_status() method by checking if the user has level 0 or higher rather than using hardcoded mode names.
            automatically grant op if user is in access list for a level greater than op.

        27. improved reloading mechanisms to utilize Module::Loaded.
            updated the included API Engine.
            fixed a major bug where API bases are never reloaded because those package versions were not set on load.
            
        28. created DOWN command in Access module.
            
        29. since we now call class_unload() to all packages including ircd.pm, all of these crucial variables were undefined after reload.


    3. added additional protection to ->handle() methods to ensure that any connections in question are still active.

        31. I have resorted to not allowing the fantasy prefix at the start of the first argument. this will prevent any Fantasy exploits.
            
            311. fixed the above attempt which did not work due to retarding.
            
        32. reverted changes from a while ago when I removed the + from these regexes. the + is mandatory because it will match multiple instances of whitespace rather than a single character, the default behavior.

        33. undefine the periodic ping timer object when removing it from loop to prevent future "notifier not in collection" errors.
            
        34. fixed a potentially fatal issue where the UID lookup in the ServerCommands base could lead to the redefinition of $server.
        
        35. improved the mechanism by which API bases are reloaded, fixing multiple bugs.
            
        36. only removed $timer from the loop if it is already running.    

        37. account names are now case-insensitive in the Account module.

        38. always send TOPICBURST if a topic is set. It is better to send it to the server we received it from and just have that server ignore it than to not send it at all because if our time is older, the server we got the topic from originally will dispose of the topic.
            only send users the server doesn't already know about in CUM command. It is useless to send information about users who we know through the server we're sending to.
         
        39. fixed confusing, ancient ping check code. pings were sent too frequently and in multiples before, but that is all fixed now. pings and ping timeouts are now accurate within 30 seconds of the configured frequencies.

    4. automatically apply access list to users upon identification to an account.
            
        41. fixed an issue with fantasy commands with no arguments.

        42. minor fixes in channel mode handler.
        
        43. delete user and channel mode information before re-adding in ircd::start().
            
        44. cleanup: I've moved on to text editors that support the $:: syntax.
        
        45. added two new flood protection configuration options
            limit:bytes_line, maximum number of bytes per line;
            limit:lines_sec, maximum number of lines per client per second.
            
        46. because lvalue subroutines are experimental and behave strangely on some versions of perl, the set_v() utility function has been reimplemented, and v() no longer has the lvalue attribute.
            
                461. fixed the above commit.
            
        47. fixed LUSERS always saying "x users and y invisible on 0 servers."
            fixed LUSERS always saying "0 channels formed."
            added oper notice format registration methods to the pool object.
            created OperNotices API base for registering new notice formats in modules.
            created Core.OperNotices module for oper notice formats used in the core.
            created oper notice flags: new_connection, new_user, new_server.
            added notice() utility function for quickly firing oper notices.
            added 'notices' option to oper and operclass blocks in configuration.
            the notice flag 'all' instructs the server to send all notices.
            
        48. fixed an issue where an infinite number of carriage returns could be processed without terminating a connection because they were completely ignored before even reaching flood consideration.
        
        49. resolved uninitialized warnings in CUM command handler due to split() returning undef with empty modestrings.
            added new oper notice flags:

            user_opered, a local or remote user gained privileges;
            user_quit, a local or remote user disconnected;
            new_server, a new server was introduced;
            server_burst, a server began to burst information;
            server_endburst, a server finished bursting information;
            server_quit, a local or remote server disconnected;
            connection_terminated, a local connection was closed.
            
    5. user->full replaced ->fullcloak and now returns the full mask with the visible host rather than actual host.
        user->fullreal replaces the former ->full, returning the full mask with the actual host.
        notice() now log2()s the "pretty version" of a message. this eliminates a lot of repetitive code between logs and notices.
        
        
        51. fixed an bug where every other IRCd RELOAD command broke PREFIX in RPL_ISUPPORT.
            the lconf() utility function has been removed in favor of the [type, name] format.
            
        52. fixed the very-long-broken MAP command.
        
        53. servers should never be affected by the bytes-per-line or lines-per-second limits.
            fixed an extreme desync issue caused by an unintentional scalar interpretation of split().

        54. fixed a bug where servers were not remove from their parent's children array, causing /MAP to go crazy.
        
        55. RELOAD command now completely reloads ircd.pm before calling start().
            this is better because it will take changes in ircd.pm itself into consideration.
            this also fixes the issue with PREFIX in RPL_ISUPPORT.
            
        56. fixed a bug where users can be kicked from channels of which they are not a member.
        
        57. fixed broken COMMANDS command.
            made MODULES command prettier.
            
        58. solved a desync issue with the handling of lists modes when two channel timestamps are valid.
            the new behavior is that the resulting list will be the combination of all lists with a valid timestamp.
        
        59. fixed several commands that have an extra space since I switched ->send_all() to ->sendfrom_all().

    6. added new oper notice flags:
        server_connect, an autoconnect or CONNECT command was started;
        user_killed, any user was killed;
        user_nick_change, any user changed his nick;
        user_join, any user joined a channel;
        account_register, an account was registered;
        account_login, a user authenticated to an account;
        account_logout, a user logged out from an account.

        61. reload module now reports how many versions upgraded since start.
            added new oper notice flags:
            reload, the IRCd was reloaded;
            module_load, a module was loaded;
            module_unload, a module was unloaded.

        62. load the API Engine before any other modules in case class_unload() must be called during boot.
            fixed rounding in percentages in MAP command.
            fixed "authenticated as <server>" in account server notices.
            
        63. update API engine. this fixes a crash issue with MOD(UN)LOAD due to case sensitivity of module names.
            update Evented::Configuration. it no longer die()s when there is an error. can't believe it did in the first place.

            631. require the above versions of API Engine and Evented::Configuration.

        64. improved MAP command yet again.
            rehashing the server now creates any new listening sockets added to configuration.

        65. rewrote the crypt() utility function. it now dynamically loads encryption modules as needed, so the former 'enabled' configuration keys are now obsolete.
            new simplified configuration example included.
            
        66. the network:name configuration key has been renamed to server:network because the [network] section was unnecessary.
            fixed an issue with kick reasons.
            updated Evented::Object.
        
        67. updated Evented::Object.
        
        68. eval command now supports sending results to a channel rather than the user.
            server bursts are now an evented mechanism. the JELP burst commands have been moved to Core.OutgoingCommands.            
            fixed some connection error messages.
            
        69. fixed incorrect kick server notices.
            made oper notices prettier.
            added notices for connection credential errors.
            fixed a crash when unloading Core.OutgoingCommands in version 7.68.
            fixed a desync issue caused by the new server burst thingy.        
        
    7. fixed a desync issue where multi-hop servers and their users were sometimes not disposed of due to a change made a couple months ago where server children were managed by the IRC pool.
        fixed a bug where channel list modes of modules that are not loaded (e.g. +A) appeared in mode strings without any parameters present (due to the absence of a module to handle them), causing a shift in parameters within the string.
        
        71. fixed deep recursion in new ->children server method.
            began implementation of modules for Evented::API Engine.
            created all core bases for Evented::API::Engine.
            
        72. more work for the transition to Evented::API::Engine.
        
        73. implementation of the Evented::API::Engine Core modules.
        
        74. implementation of JELP in an evented module.
        
        75. more improvements to JELP module.
        
        76. implemented evented Access module.
            implemented evented Fantasy module.
            more improvements to new module management.
        
        77. implemented evented Account module.
            fixed some issues in Base::Database module.
        
        78. disposed of old modules and removed API Engine submodule, finalizing the transition to Evented::API::Engine.
        
        79. implemented evented Reload module.
            solved several issues with the transition to the new API.
            
            791. colons prefixing channel names in the JOIN command are now ignored.
            fixed broken eval command.
        
            792. fixed an issue with Base::Database where the ircd would refuse to start with Account module loaded.
            
            793. added none encryption option.
        
        
    8. don't accept OPER for a user that does not connect via the requesting server.
        say which modules were loaded for the first time in RELOAD command.
        local Account commands and modes are now in the Local submodule.
        remote Account operations are now handled in the Remote submodule.
        update Evented::Object.
        update Evented::API::Engine.
        
        81. utils import() can now be imported.
            fixed a fatal scenario in the new Account module update.
            do not allow SERVER registration for a name or SID that already exists.
        
        82. added more convenience database methods to Base::Database.
            more work done for Account module's remote functions.
            update Evented::Object.
            update Evented::API::Engine.
        
        83. continued work on cross-server accounts.
        
        84. the 'forward' parameter for JELP command handlers now accepts a value of 2 to indicate that the command should be forward if and only if the sending server is not bursting its information.
            more work on cross-server accounts.
        
        85. added INVITE user and server commands.
        
        86. added invite-only channel mode.
            greatly improved the JOIN user command handler.
        
        87. fixed.
        
        88. added $pool->lookup_server_mask() to find server(s) by wildcard.
        
        89. added the ability to send numerics to remote users.
        
            891. fixed very dumb crash during server reload.

    9. added LINKS command that works both locally and remotely.
    
        91. fixed.
    
        92. Fixed An Issue Where Invalid Server Lookups May Lead To Crashing.
            Fixed A Parameter Shift Issue In The New LINKS Command.
    
        93. solved a problem with remote LINKS command.
        
        94. fixed a couple other miscellaneous cross-server command issues.
            solved a problem where a server with no accounts with Account loaded would be disconnected for a protocol error.
            
        95. fixed a bug in Access where +o might be given when it's already set.
            creates Modules module which provides IRC commands for managing modules.
            Moved MODLOAD, MODUNLOAD, MODRELOAD, and MODULES commands out of Core and into this module.
            
        96. added two new option to the start script.
            forever: run the IRCd continuously;
            foreverd: run continuously in foreground/debug mode.
            
        97. improved clarity in RELOAD module.
            utilize the new ->delete_all_events() Evented::Object feature to prevent cyclical references due to references within event callbacks.
            EVAL command moved out of Core and into its own module.
            
        98. in Access, don't grant modes less than level 0 (op) if anything greater than or equal to level 0 will be given.
            Base::Database's ->create_or_alter_table() now adds missing columns to tables using SQLite's table_info() pragma.
            in Account, added the lookup_sid_aid() to find an account by SID and account ID.
            added add_account() to insert an account from an account hash reference.
            added server command handlers for ACCTINFO, ACCTIDK, and finished ACCT.
            added outgoing command ACCTIDK.
            
        99. updated Evented::API::Engine which solves some really bad bugs in RELOAD.
            updated Reload module accordingly.
            
                991. should fix mysterious crashing of 4 servers at once.
                
8. juno-ircd version 8 is being branded as kylie.
            
     0. rebranding.
     
        01. update Evented::API::Engine.
            continued work on account synchronization.
            added Base::Database methods ->db_insert_hash() and ->db_update_hash().
            added server command handlers and outgoing commands LOGIN, LOGOUT.
            added ->do_mode_string_local() to handle a user mode string without telling the other servers.
            
        02. fixed an issue where LOGIN and LOGOUT would bounce back and forth.
        
            021. the server that initiates a connection should send burst first.
        
        03. added ACCTDUMP command for operators to inspect accounts.
        
        04. improved ACCTDUMP btw is not NSA.
        
        05. improved syncing of accounts.
            fixed warnings due to connection objects being disposed of prematurely.
            
        06. Account module now preserves the oldest account when there is a name collision during negotiation.
        
        07. solved an issue that arises in a newer version of Future where hostname lookup was never completed.
        
        08. fixed an issue where only the first argument to ACCTIDK was accounted for.
        
        09. added Ident module.
            prepared user and pool objects for the possibility of pseudousers.
            cleaned up some other things.
        
    1. rip READY command. new logic for bursting information between servers.
    
            101. set ->{conn} before attempting to send burst.
        
        11. refined new server burst logic.
            fixed protocol errors with AUM and ACM when no modes are registered on a server.
        
        12. all IRCd packages are now contained within IRCd modules.
        
        13. updated Evented::API::Engine.
            continued the relocation of ircd.pm and friends into the ircd module.
            updated MODRELOAD command to utilize the new functionality provided by Evented::API::Engine.
            the ircd module can now be reloaded without error.
        
        14. update Evented::API::Engine.
            added "juno dev runlocal" command to run the IRCd in debug mode while using local submodule revisions.
        
        15. improved module loading sequence.
            improved logging from within modules, finally replacing the years-old log2() function (which was basically a wrapper to print()) with Evented::API::Engine's evented logging interface.
            the server object is now magically created before the server module is loaded, allowing its availability ($me) in modules that are loaded beforehand.
            other random cleanup and improvement.
            
        16. improved reloading of modules.
            updated the Reload module to utilize the new functionality provided by Evented::API::Engine.
            updated Evented::API::Engine.
            
        17. lots of cleanup.
        
        18. channel invite stuff was moved out of Core modules and into a separate Invite module.
            solved an issue where the pool object was unavailable to other submodules of the ircd module.
            cleaned up ugly v('SERVER') stuff and $::variables.
            updated Evented::Object.
        
        19. move invite numerics to Invite module also.
            fixed server INVITE command which I just broke a minute ago.
            
    2. fixed an issue where servers would not link because I broke it a few commits ago.
    
        21. fixed crash: create_sockets() -> setup_sockets().
            more clear account registration errors.
            
        22. fixed automatic op in Access on account login.
            fixed misleading server burst notices.
            fixed an issue where old listeners or those which failed were not disposed of.
            
        23. solved Invite module reloading failure because I forgot to specify its dependencies.
            in Reload, modules containing 'Base' are now unloaded last, just as an extra safety measure.
            
        24. fixed a fatal error in Invite module.
            improved reloading of Evented::API::Engine.
            updated Evented::API::Engine.
        
        25. this might fix a crash idk.
        
        26. believe it or not, I've decided that load_or_reload() will redefine symbols.
        
        27. SQUIT command now accepts wildcards.
            fixed the long-broken connect timer and corresponding auto_timer configuration key.
            SQUIT command now cancels connection timers.
            
        28. improved SQUIT and connection timers.
            improved oper notices for server connections, adding server_connect_fail, server_connect_success, and server_connect_cancel.
            moved module-related notices to Modules.
            
        29. added pre-registration ERROR handling for more descriptive notices.
            handle_connect, handle_data, and similar callbacks can be modified between upgrades now.
            fixed connection limits: connection, perip, globalperip.
            moved server authentication login into connection.pm to eliminate code repetition.
            fixed a rare but fatal bug in the Ident module.
            improved SQUIT and connection timers.
            
    3. added ->register_global_command() method to JELP::Base, instructing the IRCd to permit the use of a user handler on a nonlocal user.
            
        31. JELP::Base has adopted the same sort of parameter parser as Base::UserCommands.
            server handlers can now specify optional parameters, etc. just as with user handlers.
            all affected modules updated to make use of the new server parameter parser.
            'source' now only matches users and servers. it was never supposed to match channels in the first place.
            the former behavior of 'source' can now be achieved with 'object'.
        
        32. fixed a few things in Account and Modules modules that I broke in the preceding commit.
        
            321. um maybe this needs a dash on it.
            
        33. improved handling when a connection is terminated, doing extra checks and such.
            added ->fire_command_data() to send out a command with predetermined data.
            RELOAD command should work remotely now.
            
        34. fixed some quirks in the new remote RELOAD command and ->fire_command_data().
        
        35. wow! RELOAD * should work now.
        
        36. fixed an issue where REHASH claimed failure even when it was successful.
            greatly improved the way listeners are created and managed.
            './juno dev makemodule' now creates the module metadata with placeholder values.
            listener improvements should later support SSL, but it still isn't working.
            
        37. simplified the executable.
            added sendfrom_to_many() procedural user function to send something to several users but only once.
            started documentation wow.
            
        38. improved the way the Access module decides which modes to ignore.
            fixed annoying warnings in the new `sendfrom_to_many()` function.
            more documentation.
            
        39. fixed broken listeners, now directly creating IO::Async::Listeners.
            SSL now seems to be working, but I am unsure whether it uses an outrageous amount of memory as it has been known to do in the past.
            
    4. added two new connection events:
        reg_user: fired when the USER command is used successfully;
        reg_nick: fired when the NICK command is used successfully.
        added validident() utility which uses the same character set as charybdis's match.c.
        ALL ident lookup logic is now in the Ident module, including the tilde insertion.
        if the user requests an ident prefixed with a tilde in the USER command, the ident check is skipped.
        
        41. removed old broken CAP code. will be replaced in the future.
            added RegistrationCommands base for adding new pre-registration commands to connection.pm.
            fixed an issue in Eval where the message is sent back to the source user even if the PRIVMSG fails.
            
        42. created Core::RegistrationCommands which will eventually have USER, NICK, CAP, etc. handlers.
            more work for client capabilities and improvements to connection.pm.
            
        43. fully implemented IRCv3 capability negotation.
        
        44. greatly improved the new IRCv3 capability support.
            fixed some issues with class monitors/event tracking in modules.
            added support for IRCv3 multi-prefix capability.
            updated Evented::Object.
        
        45. all hardcoded commands are gone! hooray!
            NICK, USER, SERVER, and PASS handlers moved to Core::RegistrationCommands.
            
        46. improved ugly WHOIS code, but there's probably not a pretty way to do it.
            added SSL user mode (default +z) and corresponding WHOIS numeric.
            
        47. further improved the way incoming commands are handled.
            registration commands can now specify after_reg option to specify that users should be able to use them even after registration is complete.
            registration command handlers with after_reg enabled will cancel any further user/server commands unless after_reg is accompanied by continue_handlers.
            fixed an issue where Ident would say "can't look up your ident" even if the lookup was canceled.
            
        48. fixed a fatal issue with INVITE command to nonexistent channels.
            moved outgoing INVITE command logic to the Invite module where it belongs.
            updated Evented::Object.
            updated Evented::API::Engine.

        49. commands are now fired with the 'safe' Evented::Object option.
            updated Evented::Object.
            
    5. added eval BLOCK..END.
        started work on Git module to manage git repository from IRC.
        updated Evented::Object.
        updated Evented::API::Engine.

        51. included Evented::Properties with the distribution.
            add missing Perl include directories in ircd initialization.
            
        52. Account improvements.
            Resolve and Ident improvements.
            Lastfm module in progress.
            
        53. fixed an embarrassing issue where the entirety of connection events and event-related properties were passed on to their associated user and server objects.
            I CAN'T EVEN BELIEVE THIS HAS BEEN THIS WAY FOR SO LONG WITHOUT NOTICING.
            
        54. Added SASL module.
        
        55. numerics can now be sent directly from connection objects.
            a new ->register_numeric() option 'allow_conn' indicates it's ok to use a numeric code on connections.
            
        56. updated modules to use $connection->numeric() instead of ->early_reply().
            
        57. Added ECHO command.            
            
        58. send out NICK messages for nick collisions just as an extra measure of sync accuracy.

    6. added juno dev commit for easier commit and version increment.
        reverted changes to nick collisions because they didn't work.
    
        61. don't echo out loud; echo to INDEV :)

        62. needs more newlines!
        
        63. fixed several bugs with nickname reservation during registration.
        
        64. fixed a couple numeric errors in registration commands.
        
        65. fixed buggy registration waits.
            fixed an issue where multiple users could have the same nick if registered at the same time.
            
        66. fixed bugs with parameter check in registration commands.
        
        67. added Limit module (channel mode +l).
        
        68. fixed some bugs in Ident.
            postpone registration when either a CAP LS or CAP REQ is received.
        
        69. reorganized channel modules.
        
    7. time out hostname lookups after 3 seconds.
        finished renaming channel-related modules.

        71. report errors in command exceptions.
            improved some things with modes and such.
            updated Evented::API::Engine.
            updated Evented::Object.
            
        72. cleanup.
            updated Evented::API::Engine.
            updated Evented::Object.
            
        73. added ability to stop a channel from being shown in LIST.    
        
        74. fixed some issues with connection timers.
            ->do_mode_string() now will only send out UMODE after UID has been sent.
            protocol errors for missing users, channels, etc. now do not result in delinkage but instead only warn IRC operators. the connection will stay alive.
            
        75. 'address' key in connect blocks now accepts a list of addresses to accept.
            addresses in connect blocks can now contain wildcards * and ?.
            
        76. fixed a bug where the connection limits were off by one.
            fixed a bug where the ~ was not added sometimes in Ident.
            
        77. greatly improved channel's ->handle_mode_string(). goodbye +- regex!
            greatly improved mode blocks. modes without blocks can no longer be set/unset.
            updated modules that provide channel modes accordingly.
            fixed another bug in Ident.
            
        78. made similar changes to user mode blocks as were made to channel mode blocks in the last commit.
            channel and user modes now only appear in RPL_ISUPPORT if they have 1 or more blocks registered.
            
        79. fixed a bug with status modes set by servers that arose in 8.77.
        
    8. added default.conf for fallback configuration values.
        
         81. because the api:modules configuration value is getting out of hand, modules can now be loaded with Some::Module = on instead.
             improved the default.conf warning visibility. thank you @Hakkin for helping with this. :)
             
        82. rewrote channel's ->mode_string_all(). much improved.
            outgoing CUM command now utilizies the new ->mode_string_all().
            fixed another bug in server connection timers.
            
        83. WHOIS command can now be extended by modules with the whois_query event.
            added RPL_WHOISACCOUNT to Account.
            
        84. fixed account propagation issues.
            
        85. Added Channel Key module
            The can_join hook now sends the channel key if used         
         
        86. Added Channel Secret module (+s)
            Fixed an issue with the channel key module
            
        87. updated Evented::Object.
            added room for more WHOIS lines in the future.
            fixed an issue where the IRCd sometimes would not start due to notice() in pool.pm before $pool exists.
            fixed an issue where you could set the channel user limit to nan (not a number).
            
        88. fixed a bug where QUIT before registration would send "not enough parameters."
            removed ancient functions.
            improved the efficiency of lots of other functions by removing regex and utilizing List::Util.
            cleaned up a lot of other things.
            
        89. added message class for parsing IRC messages; its objects represent a single message.
        
    9. improvements to message object.
        fixed an issue where a user could be in a channel twice under certain conditions.
        removed more ancient utilities.
        miscellaneous cleanup.
        
        91. added ->local_users to the pool object.
            fixed total client (local user limit) limit:client; broken since version 6.5.
            fire command events on user objects in conjunction with those on connection objects.
            implemented (most of) the parameter parser for new message objects.
            added new evented method for adding user commands which will eventually replace ->register_user_command().
            the magical %user_commands now eliminates the need for ->register_user_command() over a foreach.
            updated Evented::API::Engine and Evented::Object.
            
        92. fixed an issue that arose in 8.88 where channel's ->list_matches() was not behaving appropriately.
            fixed an issue where (opt) parameters at the end of a parameter list were ignored due to ->parse_params() returning an empty list.
        
        93. moved all of the old core command handlers over to the new API.
        
        94. moved the remainder of the command handlers to the new API.
            removed the hideous old parameter parser.
            ERR_UNKNOWNCOMMAND is now an event callback that is canceled by handler wrappers.
            
        95. updated Fantasy for the new evented command handler.
            fixed an issue where parameter parser errors would lead to ERR_UNKNOWNCOMMAND.
            fixed a vulnerability where commands using echo or PRIVMSG could trigger additional fantasy commands.
            
        96. message object ->source now automatically determines source object.
            fixed a bug where ->numeric() on a connection object will always use the nickname from registration.
            added 'exception' oper notice flag for Perl exceptions in command handlers.
            
        97. silently ignore unhandled numerics from servers.
            removed the matcher identifier code as it was unused and causing problems for the '...' (synonymous with @rest) modifier.
            
        98. fixed a bug where servers would send ERR_UNKNOWNCOMMAND after incoming numerics which were being sent due to the recent changes that allow numerics to be fired on connection objects.
            numerics are no longer sent to servers (not with the server as the target anyway).
            servers now do not send ERR_UNKNOWNCOMMAND to other registered servers, and all incoming numerics are ignored.
            
        99. $user->events_for_message($msg) returns events for user handlers.
            fixed $user->handle() and $user->handle_unsafe() for use with the new system.
            registration commands now utilize the new parameter parser.
            other cleanup.
            
9. juno-ircd version 9 is being branded as agnie.

    0. rebranding.

        01. properly handle "JOIN 0" - thanks @blasphemy for pointing this out.
            fixed an error due to logging during global destruction.
            
        02. added ->hops_to() method to users and servers.
            WHO and LINKS commands now show the actual hop count rather than always 0.
            
        03. improved ident validation checks.
            updated Evented::Database to the 1.* series built upon SQLite.
            updated Evented::Object.
        
        04. gradually rewriting hideous Account module to be objective and use the new Evented::Database API.
            updated Evented::Database.
            
        05. more work on the newly-rewritten Account module.
            fixed an issue in user ->do_mode_string_local() where it was never sent back to the user.
            
        06. updated SASL module to work with the new Account module.
        
        07. fixed bug causing endless loop of mode unsets in Account module.
        
        08. fixed REGISTER command.
        
        09. fixed server flooding issues caused by NOTICEs sent before registration.
        
    1. fixed some more issues with new Account module.
    
        11. don't forward ACCT during burst; it is a one-to-one negotiation.
        
        12. respect account ID parameter.
        
        13. fixed an exception in SASL when account does not exist.
        
        14. properly handle LOGIN command for unknown account.
            
        15. improved delayed LOGIN handling.
            occasionally clear account keys whose values were deleted by garbage disposal.
            
        16. use ->account fetcher which double-checks that an {account} key is an object.
            sometimes an empty hash ref can be created automatically.
            
        17. created a more secure replacement for the Eval module.
            the old module has been renamed to UnsafeEval.
            rewrote the oper command handler which I previously considered some of the ugliest code in the project.
            added utilities ref_to_list() and simplify().
            -oper modifier can now be specified without any oper flags.
            
        18. improved security in server registration by negotiating SERVER and PASS separately.
            ident checks are now canceled immediately upon receiving SERVER command, speeding up the server connect process.
            
        19. improve new server registration process.
            
    2. added Grant module which has been missing since juno 2.
    
        21. added UNGRANT command.
            
        22. started working on implementing the TS6 protocol.
            started working on Channel::ModeSync module.
            user ->mode_string() can now take a server perspective.
            
        23. added TS6 outgoing commands NICK and TMODE.
        
        24. added TS6 outgoing command SID.
            began implementing network burst for TS6.
            TS6 prefixes are mapped to definitions in default.conf.
            show multiple prefixes in EUID, not just the highest.
            added channel method ->get_user_levels().
            added TS6 utilities:
            ts6_id:         convert an object to its TS6 ID;
            ts6_sid:        convert a juno SID to a TS6 SID;
            ts6_uid:        convert a juno UID to a TS6 UID;
            ts6_uid_u:      convert the "ID" portion of UID to TS6 ID;
            ts6_prefix:     convert juno status level to TS6 prefix;
            ts6_prefixes:   convert juno status levels to TS6 prefixes without duplicates.
            
        25. protocols can now be tied to ports; i.e. jelpport = or ts6port = in configuration.
            added connection methods ->possible_protocols() and ->possibly_protocol().
            ->register_registration_command() now takes an optional 'proto' option.
            registration commands can now be registered automatically from %registration_commands.
            JELP registration commands moved from Core::RegistrationCommands to new module JELP::Registration.
            listen on *port.
            
        26. all outgoing command handlers now have the first argument $server.
            they can also return array refs of multiple lines to send.
            server burst events are fired per-protocol as send_$PROTO_burst.
            BURST and ENDBURST moved from ircd::server to JELP::Outgoing.
            fixed bug where server description starting with colon would lose the colon.
            implement TS6 registration commands PASS and SERVER.
            
        27. lots more work for TS6 support.
            outgoing commands are now registered with a protocol option.
            created TS6::Base with method ->register_outgoing_ts6_command() and %ts6_outgoing_commands.
            juno can now establish a link with charybdis and send its burst.
            
        28. message object can now be used for other IRC-like protocols such as JELP and TS6.
            each implementation will provide its own parameter modifier subroutines and a function to look up message sources.
            finally removed the hideous parameter parser from JELP::Base.
            it has been replaced by the functionality provided by the message object.
            all JELP command handlers have been updated accordingly.
            as a result, the 'high.level.handlers' callback was finally removed also.
            server method ->handle() is no longer used as of right now.
            server command forwarding is now executed by a separate, lower-priority event callback.
            registered servers now have events message_$CMD and $PROTO_message_$CMD.
            
        29. now that linking protocol messages are parsed properly, IPv6 address can no longer begin with ASCII colon (:).
            the safe_ip() utility was created to prepend one ASCII zero (0) to IPs starting with the ASCII colon (:).
            added EUID TS6 server command handler.
            added TS6 utilities:
            ts6_id_n:           get the Nth ID in TS6 format;
            sid_from_ts6:       convert TS6 SID to juno SID;
            uid_from_ts6:       convert TS6 UID to juno UID;
            uid_u_from_ts6:     convert the "ID" portion of a UID from TS6 to juno ID;
            uid_n_from_ts6:     get the integral value of a TS6 UID.
            
    3. removed legacy JELP commands ADDUMODE and ADDCMODE.
        added TS6::Base method ->register_ts6_command() for adding TS6 command handlers.
        added TS6 parameter modifier subroutines and message source lookup functions.
        renamed some outgoing command events to no longer use JELP command names.
        add modes to TS6 servers before sending out our burst.
        added TS6 outgoing commands BMASK (list mode burst) and TB (topic burst).
        added TS6 incoming command SJOIN (channel burst or creation).
        server method ->cmode_type() now returns -1 rather than undef when the mode doesn't exist.
        outgoing command callbacks now return a list of lines rather than an array reference.
        added TS6 utilities:
        obj_from_ts6:           convert a TS6 ID to an object;
        user_from_ts6:          convert a TS6 UID to a user object;
        server_from_ts6:        convert a TS6 SID to a server object.
        
        
        31. * the server ->cmode_string_difference() method now takes an argument
              $remove_none which indicates that no modes should be unset. this was
              previously not necessary for JELP because the servers burst one-at-a-time.
              
            * message parameter modifiers that are protocol-independent such as -msg,
              -command, etc. now are provided by the message class rather and no longer
              are required for each protocol implementation.
              
            * all outgoing command subroutines now have the message object rather than the
              event fire object as their second argument.
              the fire object can be retrieved through $msg->event.
            
            * added methods to message objects that aid the forwarding of translated
              messages from one protocol to another:
              $msg->forward:      forward a message to all servers but the source;
              $msg->forward_to:   forward a message to a specific server.
              
            * added new forwarding logic to TS6 commands EUID and SJOIN.
            
            * renamed outgoing event uid -> new_user.
            
            * added new outgoing event create_channel for CUM/SJOIN
              (new channel, not necessarily during burst).
        
        32. *   $msg->forward_to() can now take a channel object as the destination,
                instructing it to send to all servers with member(s) in that channel.
            
            *   added PRIVMSG/NOTICE handler for TS6.
                it currently only supports simple client or channel destinations.
                
        33. *   added SID TS6 command handler.
        
            *   added PRIVMSG/NOTICE outgoing TS6 command subroutines.
        
            *   improved TS6 server mode registration logic.
            
        34. improved Resolve module.
        
        35. fixed things.
        
        36. added incoming TS6 command TMODE handler.
            user ->change_nick() method now takes an optional $time parameter for the nick TS.
            the $over_protocol argument for channel methods ->handle_mode_string(), ->do_mode_string(), and friends can now optionally be a subroutine to look up a user by UID.
            fixed some various bugs with user away messages due to improper use of exists() instead of length().
            
        37. new server methods ->user_to_uid(), ->uid_to_user(), ->set_functions().
            fixed broken TS6 TMODE handler.
            fixed uid_from_ts6() misbehavior with UIDs containing integers in the "ID" portion.
            ->convert_cmode_string() now takes an $over_protocol argument. if true, it will attempt to convert UIDs from one protocol format to another.
            
        38. all core JELP commands now utilize the $msg->forward() mechanism.
        
        39. ts6_id() now caches TS6 IDs because the translator functions are currently extremely inefficient.
        
    4. added Alias module.
    
        41. don't send channel modes in CUM if the input mode string is '+' (from SJOIN).
        
        42. new outgoing event join_with_modes.
            improved CUM/SJOIN.
            added new cols() utility function, a recursive version of col().
            SQUIT now affects all matching servers, not the first match only.
            fixed up Channel::Key.
            added some safety measures for colon-prefixed items in channel lists.
            
        43. completely rewrote server::linkage. it was very buggy.
            improved CONNECT and SQUIT commands.
            added connection event "done" which indicates the connection will be dropped.
            fixed an issue where BURST would be sent before finishing registration (due to slow host or ident resolve).
            
        44. reimplemented the READY command due to the issues that have arisen since its removal in version 8.1.
        
        45. if autoconnect is enabled, do not try to reconnect after an SQUIT command is issued.
        
        46. fixed a bug where the QUIT command would be forwarded with the physically linked server rather than the message source server.

        47. fixed a bug where SASL authentication did not propagate correctly because LOGIN was sent before UID or equivalent.
            
        48. Added free invite mode (+g)

        49. implemented invite exception (+I)

    5. added keys_values() utility to create a hash out of lists of keys and values.
        can_join event errors can now be silented by earlier callbacks.
        new event join_failed, fired for any reason that a user cannot join a channel.
        now able to identify the reason for join failure.

        51. added ->lookup_or_create_channel() method and eliminated repetition.

        52. added Channel::Forward 1.0, allows for channel forwarding

        53. dispose of channel that was just created if failed.

        54. added Channel::OperOnly, allows for IRCop only channels

        55. added limit:channel setting to limit the number of channels a user may be in at one time.
            fixed broken TS6 outgoing NICK command.
            fixed exception in JOIN command caused by TS6 outgoing channel creation.

        56. move hardcoded +m and +n to use new events can_message, can_privmsg, and can_notice.

        57. added functionality to prevent users from messaging a channel they're banned in.

        58. added show_in_whois event, useful for hiding channels from WHOIS queries.

        59. added can_continue event to allow for modules to prevent a user from continuing to registration

    6. created Channel::Mute to add channel muteban mode (+Z).

        61. fixed a bug where PRIVMSG/NOTICE were sent out in lowercase to servers.
            numerics can now be registered automatically from %user_numerics.
            channel mode blocks can now be registerd automatically from %channel_modes.
            deleted Base::Database, as it has been replaced by Evented::Database.
            miscellaneous cleanup.

        62. fixed a bug where PRIVMSG/NOTICE were sent out in lowercase to users.
            fixed a bug where the callback to register commands from %user_commands was overwritten.

        63. WHOIS command now works remotely with the <server> parameter.
            this allowed for the addition of idle time in local queries, RPL_WHOISIDLE.

        64. fixed a bug where notices in Core::OperNotices were not registered since 9.61.
            added new message pseudoparameter type tag.* to access message tags.
            any missing (undefined) tag will assume unsatisfied parameter requirements.
            these parameter types can optionally take a type such as server, user, etc.
            JELP WHOIS now uses a message tag for its target server.

        65. added ADMIN command and corresponding [admin] configuration block. works remotely.
            added server_mask parameter type, returning the first server matching a mask.
            $pool->lookup_server_mask() now always returns the local server if it matches and a scalar return is expected (previously, it would return the first alphabetical match).
            
