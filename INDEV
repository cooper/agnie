Development log
---------------

CHANGES:

(-1). Late 1990s - June 5, 2002 - pIRCd, the perl IRCd daemon by Jay Koninek

    01/04/00 - The world didn't end. How disappointing. pircd has now been moved to SourceForge. Check out all the neat things you can do over in the side bar.

    01/21/00 - Aww yeah. Alpha Thirteen is out. Check out the change log to see what is new. Or just download it.

    01/24/00 - I know you're reading this web page. Go take the survey!

    08/18/00 - Hmm. Sort of dead, eh? Work has been continuing, albeit slowly. Hopefully it will culminate in a new release soon, with more features and increased stability. Until then, though, lots of people keep wanting to know how to set the oper password. This small Perl program can be used to generated encrypted passwords.

    10/13/00 - There is some munchkin out there who keeps submitting pircd to IRC related web pages' link lists. This I don't mind. But they're using MY email address, increasing the amount of spam that I am going to get. This is lame in the extreme. Stop it. Now.

    12/14/00 - pircd Beta Zero is out! It now has SSL support, a feature present in few other IRC servers!

    06/05/02 - pircd Beta One is out! Not quite as exciting as Beta Zero, but if it were, then it would be called Gamma Zero, instead of Beta One. This release fixes some rather annoying bugs regarding channel keys and channel limits. If you make significant use of channel keys, UPDATE!

0. pIRCd2, first fork pIRCd.

    pIRCd2 was not versioned.
    It added a few features, the most famous being the allowance of the dollar sign ($) in nicknames.
    pIRCd2 eventually evolved to be become the first version juno-ircd.

1. May 29, 2010 - July 5, 2010 (first commit) - version 1 of juno-ircd is based on pIRCd, the perl IRCd daemon.
    Although juno version 1 was not versioned, this lists some of the main features added.

    Reverse DNS is checked for resolving back to the connection IP, unlike in pIRCd.

    Prefixes ~, &, and % were added, making juno a 5-prefix server with owner, administrator, operator, halfop, and voice.

    NAMES outputs multiple prefixes, allowing clients to keep track of multiple status modes set on users.

    The server now responds to CAP messages.

    Added channel link (+L) mode. If the population limit (set by +l) is reached, users are forwarded to the linked channel.

    Automatic modes are set when channels are created.

    Added internal logging channel where the IRCd sends messages to an operator-only channel.

    Added network administrator lines (NA).

    Added operator override mode (+O) to prevent accidental abuse of override capabilities, which is unset after 2 minutes of inactivity.

    In viewing of ban and mute lists, juno now keeps track of the users or servers who set the modes.

    Masks are now checked to be valid when setting modes such as ban and mute.

    Added mute/quiet channel mode (+Z), similar to +q of charybdis.

    Users who are banned from channels but are in them can no longer speak.

    Fixed K:Line, adding the ability for operators to add K:Lines through the use of an IRCd command.

    Rewrote the linking protocol, properly sending bursts, modes, topics, joins, and more.

    Fixed an issue where XChat users report enormous amounts of lag on their lag indicators.

    Added a network name configuration option (NETWORK in RPL_ISUPPORT.)

    Fixed many, many other bugs of pIRCd, making it almost usable.

2. February 18, 2011 - version two of juno-ircd is a complete rewrite.

    0. February 18, 2011

        5. February 18, 2011

            0. February 18, 2011

                * Adds LIST command.

                * Changes filehandle to while (my $line = <$MOTD>) in user::handle_motd.

            1. February 19, 2011

                * Adds channel mode z - ops may view what a user is saying if he or she is incapable of PRIVMSGing or NOTICEing the channel.

                * Fixes a bug with sprintf in user::sendserv in WHO and NAMES where the % prefix caused issues.

            2. February 19, 2011

                * Rehash notice is sent before actually rehashing.

                * Added ISON command.

                * Redid cloaking - you don't even want to know the issue before. (Now requires Digest::SHA (core))

            3. February 19, 2011

                * Supposedly fixes bug in perl module loader with an import. (this was a fatal bug.)

            4. February 19, 2011

                * Actually fixes bug in perl module loader with an import. (this was a fatal bug.)

                * Adds --version to juno.pl

            5. February 19, 2011

                * Does cloaking by each piece of the host rather than the entire entire host hashed.

                * Adds checking for both actual host and visible host with bans.

                * After forgetting, add z to CHANMODES.

                * Display time properly in 003 numeric.

            6. February 22, 2011

                * Fixes bug in NICK command that does not allow you to change your nick from say Someone to SomeOne.

                * Fixes bug in NICK command where the nick change is not relayed to the user who sent it if they are in no channels.

                * Fixes "Odd number of elements in hash assignment at user.pm line 344." in user::handle_nick.

            7. February 22, 2011

                * Major cleanups in user.pm (in almost every handler).

                * Replaces user::sendnum with user::numeric and the %user::numerics hash. (this has existed, but is just now being cleaned up.)
                  Note: sendnum is still a valid function; it is used in the numerics displayed upon connecting in VERSION.

            8. February 22, 2011

                * Replaces a few various variables with %main::GV.
                  This hash is used to store information more easily with less of a mess.

                * The MOTD is now stored in %main::GV rather than opening and reading the file with every /MOTD.

                * Cleaned up user::new by removing all of the now broken host resolving stuff.

                * Fixed channel.pm to where nonops can see the ban and mute lists but still not entirely fixed because I and e should be op-only.

            9. February 22, 2011

                * Cleaned up numerics in channel.pm where it matters, but didn't clean up the stuff that will be eventually redone.

                * Also cleaned up channel::allsend with sprintf.

                * Other various cleanup in channel.pm.

                * Fixed numeric 432 => 433 in handle.pm (Nick is already in use).
                  - I forgot a bracket and pushed, but then I fixed it immediately after.

                * After committing a fail, I fixed channel::allsend. Syntax is now channel->allsend(string, user to be ignored or 0, sprintf values).

        6. February 24, 2011

            0. February 24, 2011

                * Cleaned up channel.pm by completely rewriting the messy handlestatus and sendmasklist subs.

                * Also cleaned up the channel mode handler a bit.
                  This should fix the bug with viewing bans, exceptions, invite exceptions, and mutes.
                  Because the majority of channel.pm has been rewritten and lightly tested, it is likely that bugs will be discovered from here on.

            1. February 25, 2011

                * S is now for away in WHO query. (how that happened, the world may never know.)

                * Added user::acceptcheck. This checks if the server is accepting new connections. (defined by limit:clients)

                * Added user::ip_accept. This prevents a user from connecting if their per-ip limit is reached. (defined by limit:perip)
                  This will also be used when Z-Line is added, forcing the user to disconnect before they finish the connection process.
                  These fixes should fix the crash that occurs when the server accepts more connections than it can handle.

                * Changed ping:msg to use sprintf for the number of seconds.

                * Changed SIGINT handler to quit each user properly before killing the IRCd.

                * Moved juno.pl to juno, making it executable and updating documentation and ./juno --help.

            2. February 25, 2011

                * Misc. cleanup.

                * Cleaned up WHOIS numerics.

                * Fixed bug in part - forgot a parameter for sprintf.

                * Fixed 324 numeric (forgot +).

                * Fixed "You're not a channel" in channel status setting.

                * Fixed bug where anyone can set modes e, b, Z, and I.

            3. February 26, 2011

                * Adds Z-Line.
                  This adds the zline block to the configuration.

                * Fixes rehash to clear all configuration options (excluding listen) before resetting them.

            4. February 26, 2011

                * Fixed bug where attempting to set qaohv without parameters replies with a "You're not a channel operator" numeric.

                * Added channel mode l (channel user limit).

                * Fixed misc. bugs in channel mode handler.

                * Prepared mode handler for future modes.

            5. February 28, 2011

                * A user may not change his nick if he is banned or muted in a channel.
                  Why was such a small change an increase in version..?

            6. February 28, 2011

                * Discovered bug and fixed the entire channel::dojoin subroutine.

                * This bug caused various issues upon joining, such as replying with "you are banned" even if you aren't, allowing you in a +i channel without an invite, etc.

                * After forgetting, add i to CHANMODES.

            7. March 1, 2011

                * Fixed bug in channel.pm where topic changes are sent improperly.

                * Fixed a similar bug in viewing topics (too many sprintf parameters).

                * Fixed bug where MOTD is not reset and is instead appended upon rehash.

            8. March 1, 2011

                * Prepared for displayed host changing by redoing the way cloaking sets cloaks.

            9. March 1, 2011

                * Added auto-access mode A. This gives accesss to a user that matches the mask provided. (see README.)

        7. March 1, 2011

            0. March 1, 2011

                * Channel mode A now checks both displayed and actual hosts (formerly only displayed).

                * Fixed bug in part - user::fullcloak != user::nick.

            1. March 1, 2011

                * Fixed bug where everyone gets every status in auto-access. (wow, fail)
                * Added vhost to oper block - set virtual host upon opering.

                * Fixed bug in auto-access so that you only receive each mode that applies to you once.

                * Made host matching insensitive to case for bans, mutes, etc.

            2. March 3, 2011

                * Masks in channel modes are now fully insensitive.

                * Setting mode -b SOMEONE!*@* before would not remove a ban on someone!*@*, but now it will.

                * Did a bit of cleanup in channel.pm.

            3. March 4, 2011

                * Put package above use in all packages.

                * Began the base of the module API.

                * Added Hello World module as an example module.

                * Automatically loaded modules are separated by commas in main:modules.

                * If no modules are to be loaded, set as 0 to disable.

                * Because the module API requires Class::Unload, added a configuration option to enable or disable the API completely.

            4. March 5, 2011

                * Added API::alias_register: this is used to add serverside aliases to juno more easily.
                  Unfortunately, there are not yet variables for arguments sent, but this is planned.
                  See hello world module for an example.

                * All API functions must now return true value in order to be successful - see helloworld module.

                * Added MODLOAD command and modload oper flag.
                - "Prepend" should have been "append" in the commit, but "prepend" each module with .pm (this failed)

            5. March 5, 2011

                * Fixed syntax error with .pm in API.

                * Forgot to do the same in MODLOAD; fixed.

                * Fixed main file to where API is not required (defined by enabled:API).

                * Added API timers and a timertest module for an example.

            6. March 6, 2011

                * A LOT of misc. cleanup, perhaps the largest cleanup in juno's history. (this is bound to result in future bugs.)

                * Added --stop argument and --restart argument.

                * Added TERM signal handler.

            7. March 6, 2011

                * Fixed a major bug where the outbuffer does not clear properly.

                * Fixed bug in numeric where the user object was being sent in numerics. (Fail)

                * Added a sleep to --restart argument to ensure that the process was killed before attempting to listen.

            8. March 7, 2011

                * API modules must be named API::module::mode_name_here as of now.
                  Formerly, API::module_name_here was acceptable, but due to future API extensions this is no longer valid.

                * Fixed bug in user::ison that pretty much broke the entire channel system.

                * Fixed bug in NAMES and WHO commands with sprintf - no longer prefixes nick twice with % if the user is halfopped.

            9. March 13, 2011

                * Created a bash script to handle stop, start, rehash, etc.
                  This script allows juno to be run from any directory - juno was also edited to work properly with this script.
                  Juno may no longer be run without the use of this script unless all proper parameters are given.

                * Now deleted PID file when exiting.

        8. March 13, 2011

            0. March 13, 2011

                * All API plans have been canceled.

                * Moved version stuff to etc/version.

                * Added restart option to ./juno.

            1. March 19, 2011

                * Changed all spacing from two to four spaces because it looks nicer.

                * Removed a few more remains of the module API.

                * Removed indev from the git ignore file.

            2. March 20, 2011

                * Moved miscellaneous functions to utils package rather than main.

                * Discovered bug: nick changes are sent twice if to the user changing his nick if he is in a channel with himself. (or at least I think that's the problem.)

                * "Read error" -> "Connection closed"

            3. March 20, 2011

                * Misc. Cleanup, mostly in the invite handler. Also changed split()s.

                * Majorly cleaned up bin/juno - just a cleanliness check.

                * Channel mode z no longer allows users to override channel mode n; users must be in the channel to be affected by this mode.

                * Added SACONNECT command like that in InspIRCd.

                * Removed a few more things about the former module API from docs.

            4. March 24, 2011

                * Made indev prettier.

                * Rewrote start/stop/rehash script.
                  It now has help and version actions.
                  Attempting to run it without arguments prints the usage help.

            5. March 24, 2011

                * Fail, $D should be $DIR in bin/juno... who knows how that happened? Fixed.

                * Version script failed, but I fixed it.

                * Added LOCOPS command.
                  It's exactly the same as GLOBOPS since we currently only support one server.
                  This adds the locops oper flag.

                * Fixed the "No text to send" bug.
                  Blank messages are no longer accepted.

                * Fixed the bug where nick changes are sometimes sent twice.

            6. March 24, 2011

                * Fixed bug where user mode x can be set/unset even if cloaking is not enabled.

                * bin/juno now fatal()s if an attempt to listen using SSL is made and SSL is disabled in the configuration.

                * Start/stop/rehash/etc script now has a forcestart option which starts juno whether or not a PID file exists.

            7. March 25, 2011

                * Beginning redesigned module API.

                * Added API::Module package (currently nonfunctional).
                  By the way, the API is excluded from versioning and changelog until it is functional.

                * Added HelloWorld module.

            8. March 26, 2011

                * Fixed a fatal bug in REHASH command.

                * Fixed cloaking (I think)... I guess it's been like this for a long time and I just noticed.

                * Fixed bug in start/stop script that preventing juno from starting without the force option.

                * Fixed bug where all users were shown as using SSL in WHOIS command.

            9. March 27, 2011

                * Misc. cleanup.

                * Added CHGHOST command.
                  This adds the chghost oper flag.

                * Fixed a fatal bug that occured when the outgoing buffer is not empty and a user quits.

                * Updated 004 numeric.

        9. March 27, 2011

            0. March 27, 2011

                * Completely rewrote handle.pm due to bugs and other issues.

            1. March 28, 2011

                * Cleaned up user.pm A LOT.
                  (Expect new bugs.)

                * Moved user numerics to utils.

                * Moved user handlers to a new package called userhandlers.

                * Did some other cleanup in bin/juno and utils.pm.

            2. March 29, 2011

                * Replaced splits by / / in the user handler to split by whitespace.
                  This fixes several bugs that allowed an incorrect number of parameters in command handlers, causing all kinds of messups.

                * Replaced some undefined functions from the transition from user.pm to userhandlers.pm...
                  This fixes several fatal bugs, but don't be surprised to find more.

                * Added channel::prefix to fetch a user prefix.
                  NAMES command now uses this function.

                * WHOIS queries now display the channels that a user is in.

                * Fixed bug in user mode handler where modes i and x were thought to be nonexistent.

            3. March 30, 2011

                * Did some cleanup in bin/juno.

                * Fixed bug where include didn't work in the configuration at all because confparse() unsets options before parsing a file.

            4. March 30, 2011

                * Cleaned up channel.pm A LOT.

                * Fixed several bugs... maybe they'd be listed here if Filezilla didn't cause me to lose my unsaved data.

                * Fatal bug fix: sha1 != sha256 in loading of the cloaking module.

                * Fixed bug in user::quit, caused by user.pm cleanup in 0.9.1 that didn't relay quits correctly at all.

                * user::numeric uses int now.

                * Fixed bug where it's possible to a kick user when they are not in the channel.

            5. April 2, 2011

                * Finished API::Module.
                  This adds enabled:api to enable the module API.
                  It also adds main:modules to load modules on startup.

                * Finished API::Command.

                * Fixed bug where QUIT is not sent to a user when he is /kill'd.

                * Finished HelloWorld module.

                * Cleaned up configuration parser.

            6. April 2, 2011

                * Added mode limit to new channel mode handler as defined by limit:chanmodes.

                * Added updown module.

                * Fixed several bugs in channel mode handler.

                * API register_command now requires a command description parameter.

                * Added COMMANDS command to list commands.

            7. April 6, 2011

                * Fixed bug in handle.pm where USER didn't give a numeric if the username was invalid.

                * Cleanup: user.pm handle.pm.

                * The largest cleanup of 0.9 begins here (userhandlers.pm.)
                  Expect new bugs to come about.
                  I'm completely ignoring the versioning system for a while so that new bugs from here on can be marked as "caused by userhandlers cleanup."

            8. April 6, 2011

                * Bug fix: no such nick/channel in MODE when setting or viewing a channel mode.

                * Bug fix: parameter messups in OPER command.

                * up module's UP command no longer sets modes that are already set.

                * Added sync module.

                * Cleanup.

                * Added API::Core: registers core API commands MODLOAD and MODUNLOAD.
                  In order to be considered a "successful" unload, modules must return a true value in their void subroutine.
                  This adds the modload and modunload oper flags.

                * Notices from API::Module and API::Command are now snotice()d as well as say()d.

            9. April 7, 2011

                * Bug fix: TOPIC was blank if less than the character limit.

                * Auto-status mode A now supports multiple statuses in a single mode.
                  For example, mode +A qao:*!*@* grants modes q, a, and o to all users.

                * Added Denny's API::Loop. This registers a code block to be executed each time juno runs through the main loop.

                * Added example::loop module.

                * Cleanup.

                * Fix bug in WHOIS where it said "no such server" when doing WHOIS <nick> <nick>.

                * New wiki: https://github.com/cooper879/juno/wiki
                * Modes in 004 are accurate now I think.

                * Fixed bug in ping timeout.

    1. April 10, 2011

        0. April 10, 2011

            0. April 10, 2011

                * Added grant module.
                  This adds the grant and deoper oper flags.

            1. April 10, 2011

                * Fixed fatal bug where ./juno rehash crashes server. :(
                * Fixed bug in channel mode handler where l could not be unset and other stuff failed.

                * Added rules module by ebest97.
                  The directory to the rules file is set by rules:file configuration option.

                * Added admin module by ebest97.
                  The lines are defined by admin:line1, admin:line2, and admin:line3.

                * Redid oper privs system to be based on individual flags, not oper accounts.
                  $user->{oper} no longer exists; use $user->ismode('o').

                * Added grant module.
                  It requires 1.0.1 and above.

            2. April 12, 2011

                * Added an easy way to setup "oper classes" (sorta.) See the example configuration.

                * Fix bug: set o if granted flags when o is not set.

            3. April 16, 2011

                * Fixed a bug in del_privs that caused an endless loop. :(
                * Added UNGRANT command to grant module.

                * Fixed several bugs in new oper system, one of which was fatal.

                * Fixed bug in topic char limit.

                * Added message char limit (PRIVMSG and NOTICE), defined by limit:msg.

                * Added PRIVS command to grant module.

            4. April 18, 2011

                * What's an operatgror? o_O
                * Channel automodes now support parameters. (you'll probably laugh at how I made that possible.)
                  Also, nonexistent modes will be ignored.

                * Added genssl and mkpasswd options to ./juno script.

                * Added currently nonfunctional module manager.

                * Added ./juno mod to enter the module manager.

                * Moved API modules to juno-mods repository.

                * Two modules can no longer have the same name.

                * Added API::Event.

            5. April 22, 2011

                * The module manager isn't quite finished but is now officially supported in dev-1.0.5.

                * Added ./juno debug to start in NOFORK mode.

                * Fixed fatal bug in API events.

                * Strip whitespace from the end of a snotice().

                * API::Core's MODUNLOAD command now requires the modload flag rather than modunload.

                * API::Core's MODLOAD and MODUNLOAD commands now accept the 'modules' oper flag.

                * Since just about every command has a parameter check, juno's command handler now has built-in parameter check.
                  API::Command now has an optional parameter for extended options. This will be used for future options as well.
                  The params option sets the required number of parameters for the command to be successful.
                  If the Required parameters are not met, a numerical "not enough parameters" error will be displayed.
                  Example: register_command('hello', 'Hello World!', \&handle_hello, { params => 2 }); # says that two parameters are required.
                  /HELLO Hello (incorrect) /HELLO Hello World! (correct)

            6. April 23, 2011

                * Changed all of the handlers in userhandlers.pm to use the new parameter option.
                  I wouldn't be all that surprised if this caused a few bugs here and there.

                * Fixed bug where the module API was loading modules relative to the location where you started juno rather than juno's installation directory.

                * Made /COMMANDS prettier.

                * Added 'flag' option to register_command.
                  If the user does not have the specified flag, a "permission denied" numeric error will be displayed.

                * Fixed a bug in the new params option where the command counted as a parameter.

                * Z-Lines are now D-Lines as to follow STATS numerics in rfc2812. The configuration now accepts either zline or dline.

                * Added time2seconds() and add_commas() utils.

                * Edited userhandlers.pm to use the new 'flag' extended option.

            7. April 24, 2011

                * Made the README prettier.

                * Added a valid_ipv4() util and a disgusting valid_ipv6() one too.

                * Fixed bug: sometimes MODE takes only one parameter.

            8. April 25, 2011

                * The module manager now uses both its version and juno's version to validate compatibility.
                  In order to use our module server, you must upgrade juno.

                * The module manager no longer allows non-compatible modules to be installed.

                * K-Line check shouldn't check nick!ident@host. I fail.

                * Fixed the API::Core "no such file or directory" error every time.

                * checkkline() was using nick instead of user. I fail.

                * Fixed checkkline() so now it doesn't send a quit server notice if a k-lined user attempts to connect.

                * checkkline() is no longer case-sensitive.

            9. April 26, 2011

                * utils.pm cleanup.

                * Added numerics 252, 254, and 255 to LUSERS.

                * Finished channel mode k and fixed join to work properly with it.
                  JOIN channel,channel key,key

        1. April 28, 2011

            0. April 28, 2011

                * Now supports commands in the form of ':source command' (you'd think this would have been done a long time ago.)

                * Fixed bug in API::Command where an incorrect parameter in register_command could potentially cause a crash.

                * Fixed bug where you can't return from being away.

3. April 30, 2011

    0. April 30, 2011

        0. April 30, 2011

            0. Added directory finder.

            1. Finished configuration parser and fetcher functions.

            2. Fixed configuration parser.

            3. Added load_requirements() and fatal() util.
               user.pm is now solely for users; connection.pm will handle connections.

            4. Whoops, forgot to put fatal() in @EXPORT_OK.
               fatal() logs the method that called it now.
               Added create_sockets() to create listening sockets and fatal() if not listening.
               Added main loop stuff.
               Added handler to connection.pm (kinda.)
               Added send functions.

            May 1, 2011

            5. Added basic pre-registration commands and temporary incoming data handler (without any form of flood protection.)

            6. Set connection->{ready} when NICK and USER have both been verified.
               Made the configuration parser ignore blank lines.
               Finished outgoing buffer.

            7. Added user::new() and some more user.pm stuff.

            8. Added connection::lookup() to a find a connection by its user or server object.
               Finished connection.pm's data forwarding to user.pm or server.pm.

            9. Finished SERVER and PASS.

        1. May 1, 2011

            0. Fixed realname bug.
               Change configuration setup.

            1. Fixed crash if disconnect before register.
               Allow any drop-in replacement for IO::Socket::INET such as IO::Socket::IP or IO::Socket::INET6.
               Finished flood protection and incoming buffer.

            2. Added md5 support.
               Changed configuration some more.
               Added autoconnect and stuff.

            3. Added more linking stuff.

            May 2, 2011

            4. If the credentials have been sent, don't send them again.

            5. Created server::linkage for local protocol functions.

        2. June 12, 2011

            0. Add trim() util.
               Keep track of server descriptions in server.pm.
               Configuration parser now takes literal values and has improved syntax.
               user::mine module is for handling of local user data.

            1. Finished ping system!
               Failure to respond to the first PING now leads to a registration timeout on unregistered connections.
               Added lconf() util for fetching name configuration values.

            2. Only send PING if there isn't a pending ping.

            3. Constants on and off define true and false values in the configuration.

            4. server::mine contains the linking protocol handler.

            June 13, 2011

            5. a few fixes.

            6. user::numeric contains numerics.
               Keep track of the server users are connecting from.

            7. added more functions to server::mine include send() to send data to a connected server.
               added user::handlers and server::handlers for local handlers.
               keep track of servers' parents.
               other fixes.

        3. June 13, 2011

            0. Fixed bug where IRCd exits when attempting to write on a closed connection.

            1. $user->mine->method() and $server->mine->method() now calls methods in user::mine and server::mine from a user or server object.

            2. Reverted the stupid ->mine stuff.
               Added several shortcuts to *::mine package functions.
                 - you can, of course, call them on an object such as $server->server::mine::send()
               Added register_handler() to server::mine - registers a CODE reference to a command handler.
               Server now handles and sends the UID command.
               Added server::lookup_by_id() to find a server by its SID.

            June 14, 2011

            3. Store server parents by object, not SID.
               Added user::is_local() for determining if the user is on this server.
               server::outgoing contains outgoing commands.
               Added quit() and uid() to server::outgoing.
               Delete all users from a server when that server splits.
               Connects, quits, and bursts should be completely accurate now - the servers should always be synced with users.
               Properly remove child servers, their children, their children's children, and so on when a server splits.

            4. Fixed a bug that sometimes leads to a crash where the local server's parent was unknown (itself).

            5. Fixed several bugs in UID.
               Added SID to share servers from server-to-server.
               BURST no longer sends information on users and servers that the target server is already familiar with.

            June 15, 2011

            6. UID handler now determines who wins a nick collision battle.

            7. Added nick check to registration.
               Fixed a bug that occurred when an unregistered connection disconnected.

            8. Added loop functions to extend the main loop.

        4. June 13, 2011 <- obviously time is going backwards (June 15, 2011)

            0. Added hostname resolving! (don't expect it to be perfect [yet])

            June 16, 2011

            1. Fixed a small bug in the hostname resolver.
               Added "forward" option to server handlers.
               When enabled, this server forwards the line to the child servers.
               Fixed a crash bug on nick collision.

            2. Fixed more bugs in the resolver.

            3. Hopefully these fixes will prevent thousands of nick collisions.

            4. Just kidding; this should fix it.

            5. nope, maybe this will.

            6. I almost promise that it works now.
               Fixed a small bug in quit().

            7. Fixed some bugs. Hopefully it actually does work now.

            8. Never mind, this will fix it.

        5. June 16, 2011

            0. Rewrote the hostname resolving. I think it might actually work now. (but don't believe me; I've already thought that the last 10 commits)

            1. I REALLY think it will work now.

            June 17, 2011

            2. Cleaned up a bit.
               Added hostname notices.
               Added user handler and a few other things to  user::mine.
               Fixed a bug where PINGing was done more often than it should be.

            3. Finished user numeric stuff.
               Added fake USER command.

            June 20, 2011

            4. Added some numerics to user connect.
               Added LUSERS command.
               Added MOTD command.

            June 22, 2011

            5. Added more numerics.

            6. Added NICK user command.
               Relay nick changes to child servers.
               Handle NICK command from servers.
               Added fake PING command.

            7. Added INFO command.
               Added support for SHA224 and SHA384.

            July 7, 2011

            8. Fixed a few small bugs.
               Added the ability to fork and become a daemon.
               Added NOFORK option.

            July 8, 2011

            9. Fixed broken NOFORK option.
               Added RPL_ISUPPORT, but much of it is unfinished since channels don't exist yet.

        6. July 8, 2011

            0. beginning to work on channel.pm.

            1. Added channel join method that keeps the channel time accurate.

            2. Added lookup_by_name() channel function.
               Added some other channely stuff.

            3. RPL_LUSERCHANNELS should only be sent if non-zero.

            4. Made some changes to the user mode system.
               Do not change nicks if the nick is taken.

            5. I probably fell asleep while writing the mode validator thingy, but now it is fixed.

            6. Added is_mode() and unset_modes() user functions.
               Fixed a bug that causes crash on user connect because you can't push to a nonexistence array reference.

        7. July 17, 2011

            0. Moved resolve stuff to separate "res" module.

            1. split RPL_ISUPPORT into several lines when necessary.

            2. random cleanup of outgoing.pm

            3. added some stuff to make sure we only sent BURST once.

            4. changed a few more things in burst.

            5. added user mode module.
               from here on, modes will be named rather than lettered.
               fixed a small warning in RPL_ISUPPORT.

            July 18, 2011

            6. added outgoing ADDUMODE command.

            7. send ADDUMODES in burst.

            8. send my ADDUMODES also.
               register internal modes to the local server.

            9. handle ADDUMODEs.

        8. July 18, 2011

            0. handle UMODE server command.
               added user::handle_mode_string() which translates a string of mode letters to their mode names and sets or unsets them.

            1. added user->mode_string() to create mode strings to the user's local server.
               actually send modes in UID command now.

            2. handle mode strings in UID and apply the modes.

            3. made it possible to add multiple user handlers of the same command (which will be useful later in the module API.)

            4. did the same for server handlers.

            5. added default mode settings.

            6. added MODE user command.
               handle_mode_string() now returns the final mode string, which will be used later.

            7. cleaned up some stuff.

            July 19, 2011

            8. send MODE string back to a user when he sets user modes.
               fixed time bug in resolving.

        9. July 19, 2011

            0. Fixed a small bug in the user mode handler.

            1. added user mode tests. if any of the tests fail, the mode will not be accepted.

            2. send UMODE to other servers.

            3. added PRIVMSG handler! :D
                 local user-to-user PRIVMSGs should work now.

            4. added PRIVMSG server handler.
                 global user-to-user PRIVMSGs should work now.

            5. added a really fail MAP that will be made prettier later.

            6. fixed a few things and added more numerics to LUSERS.

            7. fixed something in LUSERS.
               added nickname in use numeric.

            8. fixed another LUSERS bug.

            9. added NOTICE command.
               send NOTICE from server to server.
               fix a couple small things.

    1. July 20, 2011

        0. July 20, 2011

            0. added join user handler. (yay, soon we will have working channels!)

            1. fixed a bug in the PRIVMSG/NOTICE handler.

            2. omg we have join.

            3. joining a channel now sends NAMES and creation time.

            4. local PRIVMSG to channel now works.
               quit messages are sent to users in common channels now.

            5. send and handle joins among servers.

            6. just kidding. it will work now.

            7. still kidding... maybe this will work.

            8. okay, channel PRIVMSGs now work globally.

            9. send channel joins in burst.

        1. July 20, 2011

            0. Maybe this will fix fail problem?

            1. users should definitely be removed from channels properly now.

            2. I should stop saying 'definitely' when i'm not sure.
                 now they should DEFINITELY be working right.

            3. i'm too unorganized to know or care what changed in this commit.
                 why do i even keep track?
                 odds are that i'm going to do five or six more to fix this commit because it's probably broken
                 just like all the others.

            4. maybe this will fix the flood problem.

            5. or this. hash != hashref.

            6. I THINK CHANNELS ACTUALLY STAY IN SYNC NOW AND I AM USING CAPITALS BECAUSE THIS COMMIT IS ACTUALLY IMPORTANT.

            7. show SID in MAP.

            8. added NAMES command.

            9. send NICK messages globally. nicknames should be in sync at all times now.

        2. July 21, 2011 (omg time please no..)

            0. removed LUSERS temporarily because it sucks.
               added OPER command, oper blocks, and oper classes!
                 see the example configuration.
               user->handle_mode_string now takes an optional 'force' argument that, when true, skips the mode tests.
               this new argument is now used in the linking protocol, that way servers can force users to oper up.

            1. added user functions to add/remove/check oper flags.

            2. keep oper flags in sync between servers that way we can user->has_flag for non-local users.

            3. only send the MODE message if the returned string isn't empty.
               send ircop mode to other servers on /oper.

            4. fixed a crash.. dunno why i put 'opers' instead of 'flags'

            5. fixed a bug where you could not unset your oper mode.

            6. rewrote the way mode blocks are done.

            7. RPL_MYINFO now shows the actual user modes registered to the ircd.

            8. connect blocks now allow wildcards in the IP address.

            9. added host option to oper blocks. see example configuration.

        3. July 22, 2011

            0. Added WHOIS command.

            July 23, 2011

            1. Added ISON command.

            2. Added handler description and COMMANDS command as in the earlier version of juno.

            3. Added AWAY user command.

            4. Send and handle AWAY messages from server to server.

            5. Added away line to WHOIS command.
               notify users when they send PRIVMSGs to away users.

            6. Added QUIT command (both as a normal command a pre-registration command.)

            7. might as well use the magic provided by IO::Handle.

        4. July 25, 2011

            0. added base of channel modes and mode handler.
               removed useless mode test code (which was replace by mode blocks in user/modes.pm)

            1. made several improvements to the channel mode handler and channel/modes.pm.
               fixed a bug in the user mode handler where force didn't apply blocks.

            2. added ADDCMODE and CMODE server commands.
               burst ADDCMODE and CMODE.

            3. added handlers for ADDCMODE and CMODE.

            4. MODE handler now handles channel mode strings.
               when modes are set to channels, they should properly be sent in MODE messages to both local and non-local members.
               cleaned up a bit in server/handlers.

            5. MODE now accepts a channel with no other parameters.

            6. this should fix a few things.

            7. fixed bug. now the channel modes should be sent among servers.

            8. CHANMODES is now accurate!


            July 26, 2011

            9. fixed a few more things with channel modes and stuff.

        5. July 26, 2011

            0. FINALLY fixed the ridiculous bug that made the IRCd unpractical for use.
               Now we know that this IRCd still has hope to become usable.

            1. fixed a couple of crash bugs in channel communication.

            2. send CMODE types from server-to-server.

            3. added CMODE converter to translate names to modes.

            4. fixed bug in the new mode converter.

            5. made several major improvements to status modes!

            6. added support for five prefixes.

        6. July 27, 2011

            0. This is too big of an update to explain in a few lines.

            July 30, 2011

            1. fixed a number of bugs in the burst with modes, etc.

            2. added mode_string_all, which is the same as mode_string except it sends ALL modes, including status modes and list modes.
               hopefully this will make channels stay in sync with modes (except during netsplits where the lower TS should be taken, but I'll get to that soon.)

            3. more improvements in taking the lower TS.

            4. remove users from status lists when they quit/part/etc.

            5. delete channel data if the last user leaves the channel.

            6. added PART user command.
               added PART server command.
               channel user lists should be 100% accurate at all times now.

            7. hopefully this will fix a few bugs in channel mode syncing.

            8. after all that debugging.. it turned out to be the smallest typo ever.

            9. don't accept mode changes for older times.

        7. July 28, 2011

            0. this bug makes me so extremely angry.

            1. don't allow to /connect to a server that is already connected.
               close connection to a server if it isn't who we thought it was.

            2. hopefully this fixes things.

            3. only ops can set channel modes now.
               also, I'm pretty sure that all of the bugs causing crashes because of unrecognized clients are fixed.

            4. fixed a small bug in the mode handler that leaves an extra + or - on the end of mode strings.
               please don't laugh at how i fixed it.

            5. seeing as the IRCd is beginning to fill out, I added a start/stop/rehash/etc script.
               I might even start changing the version numbers! (the protocol version has been .1 this whole time LoL)

            somewhere in here I skipped like 5 days so I actually did the below in August

            6. added ./juno lines to count the number of lines in your copy.
               added ./juno mkpasswd to run the password generator.

            7. I thought about this, and I think that while might be better than for here.

            8. fixed a couple of things with user modes.

        8. August 4, 2011

            0. channel mode no_ext (no external messages) actually works now.

            1. channel moderation actually works now.

            2. fixed channel mode alphabetization.

            3. added WHO command.

            4. rewriting the main loop in order to hopefully fix some bugs and also support fakelag.
               the same flood protection and stuff has been in juno since pIRCd and definitely needs updated for efficiency and misc. bug fixes.

            5. a few small improvements to handle a heavier load.

            6. more improvements to the main loop.

        9. August 7, 2011

            0. This is probably the biggest commit in the history of juno.
               There are a ton of small changes, but a few in particular that I'd like to point out.
               I found and fixed 3 memory leaks involving references referring to themselves.
               Reference trackers now log to make sure we have no more problems with this.
               IO::Socket::IP is now a dependency but is included with juno.
               The GV system that juno uses has been fixed up.
               Buffered data is now stored within socket objects so modules will be able to read them.
               Data is now parsed immediately after it is received in full, so in cases like a large server burst the rest of the network doesn't just hang until it's over.
               juno is smart enough now to only parse data when it is fully received - sysread sometimes hands it more than it can take in one go.
               This is a huge update. There will probably be some more like this because I'm trying to make juno as efficient and memory-friendly as possible.

            1. Fixed bug where UID was sent to servers before automatic modes were set.
               Fixed RPL_MYINFO to have accurate channel modes.

            2. Fixed the nick collision bug I think.
               ircd no longer crashes if it tries to hash using an unloaded crypt.

            Apparently 3 and 4 were skipped...

            August 24, 2011

            5. Added the dependencies to IO::Socket::IP to dep/.
               Improved security and stability in several places - especially in the linking protocol where incorrect data would cause the IRCd to crash before.
               I really need to stop doing enormous amounts of work without committing, because I end up with huge commits like this one.
               Once again, this is a huge update spanning for / I don't really know what all I changed.

    2. September 17, 2011

        0. September 17, 2011

            0. This is another large edit. juno3 has new dependencies, but only temporarily.
               These dependencies are required in order to support servers with heavy traffic.
               See README for more information.

            October 10, 2011

            1. added compact JELP commands: AUM, ACM, CUM outgoing and incoming handler.
               re-added ping system after switching to IO::Async.

            October 14, 2011

            2. Perfected new compact JELP commands in the last few commits.

            3. Fixed a bug in the limit checker.
               Added TOPIC user command and made channel mode t functional.

            October 19, 2011

            4. Added server TOPIC command, sort of.

            5. fixed a bug in the new TOPIC handler.

            November 11, 2011

            6. Added connection limit.
               Added client limit.

            November 12, 2011

            7. added max per IP address.

            8. added global max users per IP address.

            9. added see_invisible flag to make invisible users visible in NAMES and WHO.
               made RPL_YOUREOPER a bit more verbose.

        1. November 17, 2011

            0. fixed UID, SID, and server name collision bugs.

            1. fixed a bug where it's possible for a server to receive useless info before burst is sent.

            November 19, 2011

            2. made COMMANDS prettier.

            3. channel mode ban somewhat does what it should now.

            4. added IRCD user command to view general ircd information.

            January 1, 2012

            5. added connection tracking and LUSERS command.

            January 6, 2012

            6. added outgoing TOPICBURST server command.

        2. January 7, 2012

            This is the start of the extension API and modularization of core features.

            1. added API.pm, which manages module loading and unloading.
               added API::Module, the class which all modules will use to add features.
               began API::Base::UserCommands. API::Base::* modules are base classes of API::Module.
               began the first module, core/ping.

            2. finished core/ping.
               updated example configuration.

            3. modularized fake user command.

            4. renamed the new modules to start with 'cmd_', since eventually there will be modules for more than just commands.
               modularized MOTD command.

            5. modularized NICK command.

            6. moved PONG and USER to core/cmd_fakecommands.

            7. modularized INFO command.

            8. undid everything I just did. I have a better idea.

            9. goodbye user/handlers. hello mod/core.

        3. January 13, 2012

            0. Check if 'initialize' is CODE in module instance creation.

            1. unload users commands registered by module at module unload.

            2. added MODLOAD command to core. requires 'modload' flag.
               added more checking to ensure modules that are loaded aren't loaded again.

            3. added MODUNLOAD command to core. requires 'modunload' flag.

            4. added MODRELOAD command to core. requires both 'modunload' and 'modload' flags.
               actually made MODUNLOAD work. I should have tested it earlier.
               it is now possible to reload core, so updating juno's internal commands won't require restarting.

            5. added a command verification system to core.

            January 14, 2012

            6. added UserModes API::Module base for registering user mode blocks. (user_modes)
               user mode letters are now defined in the configuration. see example.
               moved internal user modes to core module.

            7. unload registered user mode blocks when unloading a module.

            8. moved channel modes to the configuration.

            9. fixed a couple bugs in RPL_WELCOME and RPL_MYINFO caused by channel mode modularization.

        4. January 15, 2012

            0. added ChannelModes API::Module base for registering channel mode blocks. (channel_modes)
               moved internal channel mode blocks to the core module.

            1. added TOPICBURST server command handler.

            2. tell channel users when topic is changed by TOPICBURST.

            3. I think I fixed a bug in TOPIC.

            4. I'm tired of nick collision bugs, so here's my temporary solution.

            5. added ServerCommands API::Module base. (server_commands)
               moved server commands to core.

            January 16, 2012
            Goal of the day: moving outgoing server crap to core module.

            6. separated core into several separate modules.

            7. added OutgoingCommands API::Module base for outgoing server commands. (outgoing_commands)

            8. finished core_ocommands :).
               now I have to replace all of the old server::outgoing::* calls with the new system.

            9. finished moving from the old server::outgoing::* system to the new server::mine::fire_command system.
               I have a great feeling that commit this will cause a bug or two.
               In other news, outgoing commands are now modularized.

        5. January 16, 2012

            0. fixed a bug where juno crashes if data is received from a socket that has been ->done.

            1. fixed a bug where NICK messages were not propagated properly.

            January 17, 2012

            2. fixed a bug in PART messages being propagated.
               moved tons of code from run/ircd to a module, inc/ircd.pm instead.
               this will be useful in future changes.

            3. started working to make most of the ircd reloadable without restarting.

            January 18, 2012

            4. fixed a bug where the same oper flags would be set over and over.

            5. finally fixed all of the nick collision bugs for good.

            January 19, 2012

            6. fixed a bug where AUM was entirely retarding. it was caused by a recent code cleanup.

            7. fixed a bug where users could continuously change their nickname to their UID.

            8. fixed a bug where users returning from away caused adjacent servers to crash.

            January 31, 2012

            9. added the ability to store data with list items in channel mode lists.
               now, each channel mode block cannot assume that a user has operator status as they could before.
               a new status mode/prefix system is on its way, so channel->has_basic_status won't be around much longer.
               added ban list viewing, which should fix the issue with irssi channel synchronization.
               temporarily, anyone can set channel modes until the new channel status system is done.

        6. February 1, 2012

            0. fixed channel->list_has. this fixes a ban matching bug caused by yesterday's changes.

            1. added overload for users. in string context, user objects return UIDs.
               the main advantage of this is readability in logging.

            February 3, 2012

            2. temporarily added a fix for iterating through list values vs. data stored with them, just until I make a less ugly solution.

            3. it is quite embarrassing that this bug has existed throughout nearly two years of development.
               masks should match exactly as expected now.

            February 8, 2012

            4. added REHASH command to core_ucommands. it currently supports local rehashing only.
               this also adds the 'rehash' user flag.
               Fixed a bug win server::linkage where autoconnect didn't work right due to module load timing.

            5. this should fix a small bug where lazy mode handling created a pointless (but not harmful) CMODE message.

            6. If a user is connected through a server whose parent split during a netsplit, the server that split to
               cause this is mentioned in the user's quit message instead of the server the user is physically connected to.

            February 9, 2012

            7. added KILL command (local only, at the moment). it's probably slightly wrong, but after two hours of trying to figure it out, I don't really care.
               this adds the 'kill' user flag.

            February 11, 2012

            8. added KILL server command, outgoing command, and extended user command to support global killing.
               this adds the 'gkill' user flag.

            9. The ServerCommand base's 'params' now has parameter type checking.
               This commit is likely to break the entire IRCd.
               there are two possible outcomes of this update: many, many bugs in the linking protocol will be fixed
               or (and more likely) nothing will work at all, and trying to link two servers will lead to a crash.
               this update breaks compatibility with ALL existing API modules, as register_server_command()'s 'params' option is now required.

        7. February 11, 2012

            0. I was right about breaking the entire ircd. here's the first of many upcoming bug fixes.

            1. more bug fixes regarding the last couple commits.

            February 12, 2012

            2. For some reason, clients don't like when the H or G flag comes before prefix flags.

4. February 12, 2012

    0. February 12, 2012

        0. February 12, 2012

            0. first commit.

            1. updated version info. updated README.

            2. removed hideous HUP handler.

            3. removed server 'params' option for register_handler() because it has been replaced by the new parameter checking.
               removed server 'forward' option for seemingly obvious reasons.

            4. in server burst, don't send nonlocal users.
               don't send server information for any server except itself.

            5. actually, it makes more sense to do it this way.

            6. remove 'forward' options from core_scommands.
               in CUM command, don't send nonlocal users.

            7. don't pointlessly remember nonlocal users' prefixes in CUM.
               fixed a bug in server command handler.
               removed pointless code which was used for PRIVMSG and NOTICE forwarding.

            8. added ERROR handler.

            9. fixed bug in PRIVMSG and NOTICE handler which caused massive flooding.
               fixed bug where QUIT message would be sent for server quits.

        1. February 12, 2012

            0. made a much prettier MAP command.

            February 13, 2012

            1. don't pointlessly send KILL messages to all children. send them to the location of the target.

            2. added CONNECT server command for connecting servers remotely.

            3. user->server_notice works on nonlocal users now.
               NOTICE server command supports server noticing now.

            February 14, 2012

            4. new prefix system! now juno can have over 9000 prefixes just like inspircd.
               this adds a major change in the configuration.
               creating a new channel gives the user now status anymore (temporary).
               hopefully I can figure out how to fix that.

            February 15, 2012

            5. added "normal" mode blocks for "normal" channel modes.
               in other words, you have to have some sort of status (halfop+) to set any normal modes unless specified otherwise.

            6. automatic channel modes on join work again. this is a much cleaner approach of doing this.
               this is also used to apply modes to the user who created the channel. see example configuration for details.

            7. send CMODE if modes were changed automatically when channel is created. hopefully this should fix the desync issue.

            February 17, 2012

            8. made COMMANDS command prettier.
               added the fabulous and famous LOLCAT module from juno2.

            February 18, 2012

            9. added MODULES command for viewing loaded IRCd modules.

        2. February 18, 2012

            0. fixed two very-high-priority bugs where '0' can't be a PART message.

            1. MODULES now shows the description of each module.

5. April 5, 2012

    0. April 5, 2012

        0. April 5, 2012

            0. first commit.

            1. fixed PRIVMSG forwarding.

            April 6, 2012

            2. send all users in burst, even nonlocal users.
               send servers in burst.

            3. added 'forward' options to server::mine::register_handler() to forward messages to child servers.

            4. replaced forward where necessary.

            5. removed broken server CONNECT command.

            6. addresses an server-crashing issue where PRIVMSGing to a channel could sometimes cause a fatal error.

            NON-VERSIONED

            0. replaced SID propogation.

            VERSIONING SYSTEM CHANGED: juno-ircd now uses single decimal versions, such as 5.34.

    8. when channel timestamp is changed, the server removes all channel modes using handle_mode_string().

        81. adds log:server_debug option, which logs all incoming linking protocol data.

        82. list_elements() now double checks the data type of each element, just in case.

        83. don't send AUM and ACM twice.

        84. fixes the issue where some users are not propogated properly in channels.

        85. resolves an issue where some users were added to status lists two times.

        86. adds the 'auto_timeout' connect block configuration key, which allows you to specify a time frequency in seconds for attempting to connect to the server.

        87. juno now depends on API Engine rather than using its own module API system. API Engine's objective interface is, for the most part, compatible with the former juno3 API.

        88. fixes an issue where MODULES command does not work correctly.

        89. juno now depends on the EventedObject framework.

    9. includes the new ChannelEvents API engine base, allowing modules to safely attach handlers to channel-related events without the worry of events being called if the module is unloaded. this version also adds register_event() and delete_event() IRCd utilities.

        91. fires channel:user_joined event in channel::mine::cjoin() and core_scommands::sjoin() to ensure that it is fired AFTER the join command is sent to users of the channel.

        92. fire user_joined event after CUM.

        93.  fixes an issue where a server SID command might be sent before its parent's, causing multi-jump links to work improperly.

        94. adds protection to prevent nonexistent modes from being registered to servers. for example, '::4' in an ACM command would be ignored.

        95. rather than storing the message of the day in memory, it will be read each time. this addresses an issue where the MOTD is doubled in size after each REHASH command.

        96. improved MOTD command.

        97. moved inc/ to lib/, run/ to bin/. juno has historically been using these improper directory names for nearly three years.

        98. juno is now dependent on Evented::Configuration and includes it as a submodule.

        99. the UserCommands base now allows convenience parameter fetching, similar to what is found in the ServerCommands base. Rather than looking up users and servers using their numerical identifiers, UserCommands uses nicknames and server names. If a user, channel, or server cannot be looked up, a numeric will be sent to say so. If less parameters are received than are registered for parsing, a numeric reply will be sent.

6. juno version 6, started December 15, 2012.

    0. the UserCommands base now allows you to use attributes to specify different behavior for parameter checking. this adds the first attribute, 'opt', which allows you to specify that a parameter is optional. this way, ERR_NEEDMOREPARAMS will not be sent if it is absent. in addition to these changes, you can now use a whitespace-separated string of parameter types rather than an array reference in register_user_command_handler().

        01. parameter checking can now specify a value other than boolean, which will typically be a numerical identifier of another parameter. this also adds the 'inchan' channel attribute, which ensures that the user sending the command is in that channel, sending ERR_NOTINCHAN otherwise.

        02. finally added KICK user command.

        03. adds KICK outgoing command and JELP command. KICKs are now synchronized through the linking protocol.

        04. adds add_cap(), remove_cap(), and has_cap() methods to connections for managing client compatibility flags.

        05. this should fix an issue where even channel owners cannot set bans.

        06. fixes a crashing issue with REHASH.

        07. adds LIST user command, which allows users to see information about channels on the IRC server.

        08. juno now depends on the Evented::Database package and includes it as submodule.

        09. juno now implements Evented::Database. If all goes well, this should work seamlessly without any changes to juno's core as Evented::Database is designed to be API-compatible with Evented::Configuration.

    1. juno-ircd version 6 is now being branded as 'kedler-ircd' rather than juno6.

        11. these few changes allow you to reload ircd.pm even after a new submodule dependency is added. changes to @INC are now made in ircd.pm rather than in the main package. also, only packages vital to booting are loaded in boot() and begin(). instead, they are loaded in start().

        12. updated to a new version of EventedObject.

        13. update API Engine and Evented::Configuration.

        14. update to newer API Engine module structure (directory structure).

        15. permanently broke kedler.

    2. development resumed after a very long idle period.
        added channel modes ban exception (e) and invite exception (I).
        removed disgusting code for an old idea that went very wrong.

        21. improved server variable system.
            reenabled DNS resolution using IO::Async's built-in resolver.

        22. fixed a bug that allows ops to grant themselves channel ownership.

        23. added UP command to the Access module.

        24. Access no longer grants statuses that have already been granted.

        25. fixed a bug where ops cannot grant status to those of an already higher status.
            all core modules now share the IRCd version.

        26. added MODELIST command.

        27. MODELIST now accepts mode letters as well.

        28. Access's UP command now uses the parameter handler.
            prefer short IRCd name over the full name.

        29. fixed an issue where the :rest matcher splits the data properly but does not return the appropriate piece of data.
            the 'dummy' identifier is no longer needed to skip of the command name.
            the command name will only be included if the 'command' matcher is explicitly provided.

    3. added RPL_REHASHING.
        fixed an issue where the user command parameter count was sometimes inaccurate.
        added EVAL command and the associated 'eval' oper flag.

        31. removed IRCd command. I have never seen anything so useless in my entire life.
            user command parameter matchers that start with '-' are not considered in the argument count.

        32. added -oper matcher that checks for an oper flag in the parameter parser.
            always show parent modules before submodules in MODULES command.

        33. always prioritize the core modules over all others in MODULES command.

        34. this more sophisticated MODULES command only allows 50 bytes per line length.

        35. corrected multiple bugs in the UserCommands API base parameter handler.

        36. fixed an issue where user numerics could not be unregistered.

        37. solved a malfunction where the IRCd crashes if a user commits virtual suicide (/killing oneself).
            updated KILL command to the UserCommands parameter handler.

        38. improved MODULES command to not allow more than 60 characters per line.
            updated MODLOAD, MODUNLOAD, and MODRELOAD commands to the UserCommands parameter handler.
            MODRELOAD now holds a reference to the MODLOAD handler in order to retain it and prevent its premature disposal.

        39. deleted user::numerics package - no longer used.
            all remaining numerics have been moved to the UserNumerics core module.
            code reference numeric handlers are now accepted. a list of resulting lines is returned.
            RPL_ISUPPORT now takes configured except and invite except mode letters into account.

    4. ircd.pm now manages all component packages of the ircd as well as all dependency packages.
        ircd::start() can be safely called multiple times after the ircd boots.

        41. fixed an issue where real parameter matchers would be matched to nothing if no parameters remain.
            added VERSION command.

        42. current version is now stored in the VERSION file.
            $::VERSION will remain static from start, but $ircd::VERSION may change with each reload of the ircd core.
            updated VERSION command accordingly.

        43. the ServerCommands API base now assumes a nonreference scalar value to be a space-separated list.
            the ServerCommands core module has been updated accordingly.

        44. use increments and decrements during connection registration.
            this will allow modules to temporarily halt a the registration; i.e. for a hostname lookup.

    5. created pool, a single object that contains and manages all other objects in a single place rather across many packages.

        51. all IRCd events without specific objects are now handled through the Events API base.
            utils::fire_event() has been removed because all events are now fired directly on channels, servers, users, etc.

        52. Goodbye $main::eo - the pool object replaced this functionality.
            connection host must default to IP even before ->ready() is called in case of a registration timeout.
            extra protection: check if connection is still alive just in case in ->send().

        53. added Resolve module. this replaces the res package.

        54. all users inherit from the user::mine package now. these methods check if the user is local before doing anything dangerous.

        55. did the same for channel::mine. channel::mine::cjoin() was renamed to localjoin() due to conflicting names.

        56. did the same for server::mine.

        57. all user command handlers, server command handlers, outgoing server command formatters, user numeric handlers, etc. have been moved from their ::mine packages to the pool object.

        58. moved mode configuration functions out of ::mode packages and into the ircd package.

        59. ::modes packages deleted; all remaining functionality moved to the pool object.

    6. clean up old code that was moved to pool package.

        61. the Resolve module now accepts any record to match rather than ignoring multiple records.

        62. improved match() and validnick() utilities.

        63. created Matching API base for registering user matching event callbacks.
            created Matchers core module which provides the standard matchers.
            the match() utility function now calls $pool->user_match() if the item being matched is a blessed object.

        64. read VERSION file for the minimum version of juno components in load_or_reload().

        65. do not use the module name in matcher callback names.
            fixed a fatal issue where variables in the ircd package were overwritten by undef during reload.
            the standard matcher now immediately skips anything not in the nick!user@host format.

        66. version intentionally skipped.

        67. added $o matcher for opers.

        68. no longer limit masks to nick!user@host in Access module.

            681. fixed the above commit.

            682. fixed the above commit for real.

            683. fixed the above commit for sure.

        69. it makes way more sense to check if the user is an oper before checking the list.
            match $o:<flag> to any oper with flag <flag>.

    7. always return a scalar value from match().
        update Evented::Database.
        other random changes.

        71. temporarily use a main package variable to determine if sockets were created already.

        72. fixed a "Very bad error" where juno component package versions were incorrect.

        73. implemented SQLite support for use with the Evented::Database configuration instance.

        74. fixed a fatal error in which data sent after QUIT but before EOF causes ->handle to be called on a dead connection.

        75. solved an issue where hostmask matching was half-case-sensitive, causing any mask with an uppercase letter to fail.
            created Database API base for accessing DBI databases in the configured format.

        76. fixed a fatal issue where nick changing causes immediate IRCd crash due to lookup_by_nick().
            added ->change_user_nick() method to the pool object to replace that functionality.
            annihilated a bug in which nickname changes to the same nickname in a different case were ignored.

        77. added additional safety checks to Resolve module.

        78. added convenient methods to the Database API base: create_table(), table_exists(), create_or_alter_table().
            included start of Account module.

        79. more work to Account module.

    8. finished REGISTER and LOGIN commands.

        81. fixed a ridiculous bug in channel status mode tracking.

        82. fixed broken nick change.

        82. removed unnecessary code in channel matcher blocks.
            added a bit of spam protection to the Account module's REGISTER command.

        83. accidentally skipped this version.

        84. fixed an issue where SERVER command does not work at all because of changes to match().

        85. this should fix an occasional crash in connection closure.

        86. added fire_command() method to server::mine for direct use on a server object.

        87. fixed an issue in the ServerCommands base parameter handler that lead to several fatal errors.

        88. fixed a crash that occurred only when a UID command was sent on a user with no modes.

        89. solved a problem that prevented servers from linking properly due to pre-registration notices from the Resolve module.

    9. fixed a few random quirks.

        91. added ->do_mode_string() methods to channel::mine and user::mine. these methods handle a mode string, tell local users about the change, and send the mode string to other servers if necessary.
            update modules according to this change.
            the Access module no longer has to be loaded across all servers in order to work properly.

        92. fixed an issue where protocol errors lead to a QUIT command that causes the receiving server to dispose of its own server object.
            improved logging in ServerCommands parameter handler.

        93. can't use do_mode_string() in user JOIN command handler because CMODE must be sent after JOIN.

        94. use server mode string for ->fire_command() in JOIN user command handler.

        95. handle modes from the local server rather than the user in Access module.

        96. solved an issue where some users may not be ->quit()ted during netsplit due to modification of the {users} array during iteration.

        97. fixed broken CONNECT command.
            added ->do_mode_string_local() which is the same as ->do_mode_string() except it doesn't tell other servers about the change.

        98. not sure why but topic information was sent awkwardly between names list and RPL_ENDOF_NAMES.

        99. fixed a few bugs in server burst.


7. juno-ircd version 7 is now being branded as vulpia.

    0. fixed broken CONNECT command (again).
        moved global variables from utils to main package, fixing an issue where they were discarded during ircd reload.
        corrected a flaw that caused the connection count to be incorrect.
        don't send TOPICBURST to the server we obtained the topic from.

        01. renamed project files to juno so I don't have to mess with it after every major version increment.

        02. only send a single mode string for status modes in CUM command handler.

        03. fixed channel mode reset problem where + was not replaced with - because retarding.

        04. I think this should fix an issue where CMODE is sent even in ->handle_mode_local().
            removed annoying notices in channel mode reset.

        05. cleanup.

        06. added SQUIT user command and squit oper flag.
            fixed issue where QUIT messages for a server are forwarded to other servers.

                061. $line -> $data

        07. added server method ->cmode_string_difference().
            if all goes well, this should eleminate the mode spamming during server bursts.

                071. changes to ->cmode_string_difference().

        08. channel ->list_elements() takes an optional argument to include all information like setby and time.
            fixed an issue where /LIST command shows no channels.
            fixed a fatal issue when viewing a list for banlike.

        09. fixed ->cmode_string_difference(). I think it is now flawless.
            this should eliminate all mode flooding during server bursts.
            do not sent TOPICBURST to the server we got the topic from.
            this should eliminate topic flooding during server bursts.

    1. fixed an issue where the modes in a CUM command were handled even if the time was newer.

        11. fixed a bug where topic was sometimes not deleted properly and caused multiple problems.

        12. solved an issue where channel ->take_local_time() method conflicts with the new mode handling in the CUM command handler.

        13. fixed broken ISON command.

        14. solved an issue where status modes were sometimes handled incorrectly in CUM command.
            added ->mode_string_status(), which is like ->mode_string() except for status modes only.
            added no_status option to ->mode_string_all(), returning all modes except status modes.

        15. only send TOPIC to channel users if the topic information in TOPICBURST differs from current topic.

        16. fixed an issue where the configured ping settings for server were always used regardless of the connection type.
            added 'all' oper flag which grants all privileges.

        17. fixed a bug where TOPICBURST was not handled at all if no topic existed locally beforehand.

        18. store all {source}s as SIDs rather than server objects to prevent forgotten references and avoid confusion.

        19. fully replaced user ->sendserv() with ->sendme().
            added ->sendfrom() and ->sendme() to connection.pm so that they can now be used for unregistered connections.
            set lexical variable $me in modules where the local server object is accessed frequently.
            make proper use of channel ->sendfrom_all() in places where it was not utilized already.

                191. $s -> $me

    2. added ->handle_privmsgnotice() method to channel::local - handles privmsg, forwards to all local users in channel, forwards to all servers with a user in channel.
        updated PRIVMSG/NOTICE server and user command handlers accordingly.

        21. created Fantasy module for channel fantasy commands.

        22. slightly improved fantasy module with some stupidity checks, but it still needs a lot of work.
            fixed an issue where iterating ->user_handlers() or ->server_handlers() methods may cause a crash due to return of undef rather than an empty list.

        23. fantasy commands are only handled now if the user command handler was registered with the fantasy option enabled.
            updating core and other modules accordingly.

        24. added Reload module to reload the entire IRCd in one command.

        25. improved Reload module.

        26. improved ->user_has_basic_status() method by checking if the user has level 0 or higher rather than using hardcoded mode names.
            automatically grant op if user is in access list for a level greater than op.

        27. improved reloading mechanisms to utilize Module::Loaded.
            updated the included API Engine.
            fixed a major bug where API bases are never reloaded because those package versions were not set on load.

        28. created DOWN command in Access module.

        29. since we now call class_unload() to all packages including ircd.pm, all of these crucial variables were undefined after reload.


    3. added additional protection to ->handle() methods to ensure that any connections in question are still active.

        31. I have resorted to not allowing the fantasy prefix at the start of the first argument. this will prevent any Fantasy exploits.

            311. fixed the above attempt which did not work due to retarding.

        32. reverted changes from a while ago when I removed the + from these regexes. the + is mandatory because it will match multiple instances of whitespace rather than a single character, the default behavior.

        33. undefine the periodic ping timer object when removing it from loop to prevent future "notifier not in collection" errors.

        34. fixed a potentially fatal issue where the UID lookup in the ServerCommands base could lead to the redefinition of $server.

        35. improved the mechanism by which API bases are reloaded, fixing multiple bugs.

        36. only removed $timer from the loop if it is already running.

        37. account names are now case-insensitive in the Account module.

        38. always send TOPICBURST if a topic is set. It is better to send it to the server we received it from and just have that server ignore it than to not send it at all because if our time is older, the server we got the topic from originally will dispose of the topic.
            only send users the server doesn't already know about in CUM command. It is useless to send information about users who we know through the server we're sending to.

        39. fixed confusing, ancient ping check code. pings were sent too frequently and in multiples before, but that is all fixed now. pings and ping timeouts are now accurate within 30 seconds of the configured frequencies.

    4. automatically apply access list to users upon identification to an account.

        41. fixed an issue with fantasy commands with no arguments.

        42. minor fixes in channel mode handler.

        43. delete user and channel mode information before re-adding in ircd::start().

        44. cleanup: I've moved on to text editors that support the $:: syntax.

        45. added two new flood protection configuration options
            limit:bytes_line, maximum number of bytes per line;
            limit:lines_sec, maximum number of lines per client per second.

        46. because lvalue subroutines are experimental and behave strangely on some versions of perl, the set_v() utility function has been reimplemented, and v() no longer has the lvalue attribute.

                461. fixed the above commit.

        47. fixed LUSERS always saying "x users and y invisible on 0 servers."
            fixed LUSERS always saying "0 channels formed."
            added oper notice format registration methods to the pool object.
            created OperNotices API base for registering new notice formats in modules.
            created Core.OperNotices module for oper notice formats used in the core.
            created oper notice flags: new_connection, new_user, new_server.
            added notice() utility function for quickly firing oper notices.
            added 'notices' option to oper and operclass blocks in configuration.
            the notice flag 'all' instructs the server to send all notices.

        48. fixed an issue where an infinite number of carriage returns could be processed without terminating a connection because they were completely ignored before even reaching flood consideration.

        49. resolved uninitialized warnings in CUM command handler due to split() returning undef with empty modestrings.
            added new oper notice flags:

            user_opered, a local or remote user gained privileges;
            user_quit, a local or remote user disconnected;
            new_server, a new server was introduced;
            server_burst, a server began to burst information;
            server_endburst, a server finished bursting information;
            server_quit, a local or remote server disconnected;
            connection_terminated, a local connection was closed.

    5. user->full replaced ->fullcloak and now returns the full mask with the visible host rather than actual host.
        user->fullreal replaces the former ->full, returning the full mask with the actual host.
        notice() now log2()s the "pretty version" of a message. this eliminates a lot of repetitive code between logs and notices.


        51. fixed an bug where every other IRCd RELOAD command broke PREFIX in RPL_ISUPPORT.
            the lconf() utility function has been removed in favor of the [type, name] format.

        52. fixed the very-long-broken MAP command.

        53. servers should never be affected by the bytes-per-line or lines-per-second limits.
            fixed an extreme desync issue caused by an unintentional scalar interpretation of split().

        54. fixed a bug where servers were not remove from their parent's children array, causing /MAP to go crazy.

        55. RELOAD command now completely reloads ircd.pm before calling start().
            this is better because it will take changes in ircd.pm itself into consideration.
            this also fixes the issue with PREFIX in RPL_ISUPPORT.

        56. fixed a bug where users can be kicked from channels of which they are not a member.

        57. fixed broken COMMANDS command.
            made MODULES command prettier.

        58. solved a desync issue with the handling of lists modes when two channel timestamps are valid.
            the new behavior is that the resulting list will be the combination of all lists with a valid timestamp.

        59. fixed several commands that have an extra space since I switched ->send_all() to ->sendfrom_all().

    6. added new oper notice flags:
        server_connect, an autoconnect or CONNECT command was started;
        user_killed, any user was killed;
        user_nick_change, any user changed his nick;
        user_join, any user joined a channel;
        account_register, an account was registered;
        account_login, a user authenticated to an account;
        account_logout, a user logged out from an account.

        61. reload module now reports how many versions upgraded since start.
            added new oper notice flags:
            reload, the IRCd was reloaded;
            module_load, a module was loaded;
            module_unload, a module was unloaded.

        62. load the API Engine before any other modules in case class_unload() must be called during boot.
            fixed rounding in percentages in MAP command.
            fixed "authenticated as <server>" in account server notices.

        63. update API engine. this fixes a crash issue with MOD(UN)LOAD due to case sensitivity of module names.
            update Evented::Configuration. it no longer die()s when there is an error. can't believe it did in the first place.

            631. require the above versions of API Engine and Evented::Configuration.

        64. improved MAP command yet again.
            rehashing the server now creates any new listening sockets added to configuration.

        65. rewrote the crypt() utility function. it now dynamically loads encryption modules as needed, so the former 'enabled' configuration keys are now obsolete.
            new simplified configuration example included.

        66. the network:name configuration key has been renamed to server:network because the [network] section was unnecessary.
            fixed an issue with kick reasons.
            updated Evented::Object.

        67. updated Evented::Object.

        68. eval command now supports sending results to a channel rather than the user.
            server bursts are now an evented mechanism. the JELP burst commands have been moved to Core.OutgoingCommands.
            fixed some connection error messages.

        69. fixed incorrect kick server notices.
            made oper notices prettier.
            added notices for connection credential errors.
            fixed a crash when unloading Core.OutgoingCommands in version 7.68.
            fixed a desync issue caused by the new server burst thingy.

    7. fixed a desync issue where multi-hop servers and their users were sometimes not disposed of due to a change made a couple months ago where server children were managed by the IRC pool.
        fixed a bug where channel list modes of modules that are not loaded (e.g. +A) appeared in mode strings without any parameters present (due to the absence of a module to handle them), causing a shift in parameters within the string.

        71. fixed deep recursion in new ->children server method.
            began implementation of modules for Evented::API Engine.
            created all core bases for Evented::API::Engine.

        72. more work for the transition to Evented::API::Engine.

        73. implementation of the Evented::API::Engine Core modules.

        74. implementation of JELP in an evented module.

        75. more improvements to JELP module.

        76. implemented evented Access module.
            implemented evented Fantasy module.
            more improvements to new module management.

        77. implemented evented Account module.
            fixed some issues in Base::Database module.

        78. disposed of old modules and removed API Engine submodule, finalizing the transition to Evented::API::Engine.

        79. implemented evented Reload module.
            solved several issues with the transition to the new API.

            791. colons prefixing channel names in the JOIN command are now ignored.
            fixed broken eval command.

            792. fixed an issue with Base::Database where the ircd would refuse to start with Account module loaded.

            793. added none encryption option.


    8. don't accept OPER for a user that does not connect via the requesting server.
        say which modules were loaded for the first time in RELOAD command.
        local Account commands and modes are now in the Local submodule.
        remote Account operations are now handled in the Remote submodule.
        update Evented::Object.
        update Evented::API::Engine.

        81. utils import() can now be imported.
            fixed a fatal scenario in the new Account module update.
            do not allow SERVER registration for a name or SID that already exists.

        82. added more convenience database methods to Base::Database.
            more work done for Account module's remote functions.
            update Evented::Object.
            update Evented::API::Engine.

        83. continued work on cross-server accounts.

        84. the 'forward' parameter for JELP command handlers now accepts a value of 2 to indicate that the command should be forward if and only if the sending server is not bursting its information.
            more work on cross-server accounts.

        85. added INVITE user and server commands.

        86. added invite-only channel mode.
            greatly improved the JOIN user command handler.

        87. fixed.

        88. added $pool->lookup_server_mask() to find server(s) by wildcard.

        89. added the ability to send numerics to remote users.

            891. fixed very dumb crash during server reload.

    9. added LINKS command that works both locally and remotely.

        91. fixed.

        92. Fixed An Issue Where Invalid Server Lookups May Lead To Crashing.
            Fixed A Parameter Shift Issue In The New LINKS Command.

        93. solved a problem with remote LINKS command.

        94. fixed a couple other miscellaneous cross-server command issues.
            solved a problem where a server with no accounts with Account loaded would be disconnected for a protocol error.

        95. fixed a bug in Access where +o might be given when it's already set.
            creates Modules module which provides IRC commands for managing modules.
            Moved MODLOAD, MODUNLOAD, MODRELOAD, and MODULES commands out of Core and into this module.

        96. added two new option to the start script.
            forever: run the IRCd continuously;
            foreverd: run continuously in foreground/debug mode.

        97. improved clarity in RELOAD module.
            utilize the new ->delete_all_events() Evented::Object feature to prevent cyclical references due to references within event callbacks.
            EVAL command moved out of Core and into its own module.

        98. in Access, don't grant modes less than level 0 (op) if anything greater than or equal to level 0 will be given.
            Base::Database's ->create_or_alter_table() now adds missing columns to tables using SQLite's table_info() pragma.
            in Account, added the lookup_sid_aid() to find an account by SID and account ID.
            added add_account() to insert an account from an account hash reference.
            added server command handlers for ACCTINFO, ACCTIDK, and finished ACCT.
            added outgoing command ACCTIDK.

        99. updated Evented::API::Engine which solves some really bad bugs in RELOAD.
            updated Reload module accordingly.

                991. should fix mysterious crashing of 4 servers at once.

8. juno-ircd version 8 is being branded as kylie.

     0. rebranding.

        01. update Evented::API::Engine.
            continued work on account synchronization.
            added Base::Database methods ->db_insert_hash() and ->db_update_hash().
            added server command handlers and outgoing commands LOGIN, LOGOUT.
            added ->do_mode_string_local() to handle a user mode string without telling the other servers.

        02. fixed an issue where LOGIN and LOGOUT would bounce back and forth.

            021. the server that initiates a connection should send burst first.

        03. added ACCTDUMP command for operators to inspect accounts.

        04. improved ACCTDUMP btw is not NSA.

        05. improved syncing of accounts.
            fixed warnings due to connection objects being disposed of prematurely.

        06. Account module now preserves the oldest account when there is a name collision during negotiation.

        07. solved an issue that arises in a newer version of Future where hostname lookup was never completed.

        08. fixed an issue where only the first argument to ACCTIDK was accounted for.

        09. added Ident module.
            prepared user and pool objects for the possibility of pseudousers.
            cleaned up some other things.

    1. rip READY command. new logic for bursting information between servers.

            101. set ->{conn} before attempting to send burst.

        11. refined new server burst logic.
            fixed protocol errors with AUM and ACM when no modes are registered on a server.

        12. all IRCd packages are now contained within IRCd modules.

        13. updated Evented::API::Engine.
            continued the relocation of ircd.pm and friends into the ircd module.
            updated MODRELOAD command to utilize the new functionality provided by Evented::API::Engine.
            the ircd module can now be reloaded without error.

        14. update Evented::API::Engine.
            added "juno dev runlocal" command to run the IRCd in debug mode while using local submodule revisions.

        15. improved module loading sequence.
            improved logging from within modules, finally replacing the years-old log2() function (which was basically a wrapper to print()) with Evented::API::Engine's evented logging interface.
            the server object is now magically created before the server module is loaded, allowing its availability ($me) in modules that are loaded beforehand.
            other random cleanup and improvement.

        16. improved reloading of modules.
            updated the Reload module to utilize the new functionality provided by Evented::API::Engine.
            updated Evented::API::Engine.

        17. lots of cleanup.

        18. channel invite stuff was moved out of Core modules and into a separate Invite module.
            solved an issue where the pool object was unavailable to other submodules of the ircd module.
            cleaned up ugly v('SERVER') stuff and $::variables.
            updated Evented::Object.

        19. move invite numerics to Invite module also.
            fixed server INVITE command which I just broke a minute ago.

    2. fixed an issue where servers would not link because I broke it a few commits ago.

        21. fixed crash: create_sockets() -> setup_sockets().
            more clear account registration errors.

        22. fixed automatic op in Access on account login.
            fixed misleading server burst notices.
            fixed an issue where old listeners or those which failed were not disposed of.

        23. solved Invite module reloading failure because I forgot to specify its dependencies.
            in Reload, modules containing 'Base' are now unloaded last, just as an extra safety measure.

        24. fixed a fatal error in Invite module.
            improved reloading of Evented::API::Engine.
            updated Evented::API::Engine.

        25. this might fix a crash idk.

        26. believe it or not, I've decided that load_or_reload() will redefine symbols.

        27. SQUIT command now accepts wildcards.
            fixed the long-broken connect timer and corresponding auto_timer configuration key.
            SQUIT command now cancels connection timers.

        28. improved SQUIT and connection timers.
            improved oper notices for server connections, adding server_connect_fail, server_connect_success, and server_connect_cancel.
            moved module-related notices to Modules.

        29. added pre-registration ERROR handling for more descriptive notices.
            handle_connect, handle_data, and similar callbacks can be modified between upgrades now.
            fixed connection limits: connection, perip, globalperip.
            moved server authentication login into connection.pm to eliminate code repetition.
            fixed a rare but fatal bug in the Ident module.
            improved SQUIT and connection timers.

    3. added ->register_global_command() method to JELP::Base, instructing the IRCd to permit the use of a user handler on a nonlocal user.

        31. JELP::Base has adopted the same sort of parameter parser as Base::UserCommands.
            server handlers can now specify optional parameters, etc. just as with user handlers.
            all affected modules updated to make use of the new server parameter parser.
            'source' now only matches users and servers. it was never supposed to match channels in the first place.
            the former behavior of 'source' can now be achieved with 'object'.

        32. fixed a few things in Account and Modules modules that I broke in the preceding commit.

            321. um maybe this needs a dash on it.

        33. improved handling when a connection is terminated, doing extra checks and such.
            added ->fire_command_data() to send out a command with predetermined data.
            RELOAD command should work remotely now.

        34. fixed some quirks in the new remote RELOAD command and ->fire_command_data().

        35. wow! RELOAD * should work now.

        36. fixed an issue where REHASH claimed failure even when it was successful.
            greatly improved the way listeners are created and managed.
            './juno dev makemodule' now creates the module metadata with placeholder values.
            listener improvements should later support SSL, but it still isn't working.

        37. simplified the executable.
            added sendfrom_to_many() procedural user function to send something to several users but only once.
            started documentation wow.

        38. improved the way the Access module decides which modes to ignore.
            fixed annoying warnings in the new `sendfrom_to_many()` function.
            more documentation.

        39. fixed broken listeners, now directly creating IO::Async::Listeners.
            SSL now seems to be working, but I am unsure whether it uses an outrageous amount of memory as it has been known to do in the past.

    4. added two new connection events:
        reg_user: fired when the USER command is used successfully;
        reg_nick: fired when the NICK command is used successfully.
        added validident() utility which uses the same character set as charybdis's match.c.
        ALL ident lookup logic is now in the Ident module, including the tilde insertion.
        if the user requests an ident prefixed with a tilde in the USER command, the ident check is skipped.

        41. removed old broken CAP code. will be replaced in the future.
            added RegistrationCommands base for adding new pre-registration commands to connection.pm.
            fixed an issue in Eval where the message is sent back to the source user even if the PRIVMSG fails.

        42. created Core::RegistrationCommands which will eventually have USER, NICK, CAP, etc. handlers.
            more work for client capabilities and improvements to connection.pm.

        43. fully implemented IRCv3 capability negotation.

        44. greatly improved the new IRCv3 capability support.
            fixed some issues with class monitors/event tracking in modules.
            added support for IRCv3 multi-prefix capability.
            updated Evented::Object.

        45. all hardcoded commands are gone! hooray!
            NICK, USER, SERVER, and PASS handlers moved to Core::RegistrationCommands.

        46. improved ugly WHOIS code, but there's probably not a pretty way to do it.
            added SSL user mode (default +z) and corresponding WHOIS numeric.

        47. further improved the way incoming commands are handled.
            registration commands can now specify after_reg option to specify that users should be able to use them even after registration is complete.
            registration command handlers with after_reg enabled will cancel any further user/server commands unless after_reg is accompanied by continue_handlers.
            fixed an issue where Ident would say "can't look up your ident" even if the lookup was canceled.

        48. fixed a fatal issue with INVITE command to nonexistent channels.
            moved outgoing INVITE command logic to the Invite module where it belongs.
            updated Evented::Object.
            updated Evented::API::Engine.

        49. commands are now fired with the 'safe' Evented::Object option.
            updated Evented::Object.

    5. added eval BLOCK..END.
        started work on Git module to manage git repository from IRC.
        updated Evented::Object.
        updated Evented::API::Engine.

        51. included Evented::Properties with the distribution.
            add missing Perl include directories in ircd initialization.

        52. Account improvements.
            Resolve and Ident improvements.
            Lastfm module in progress.

        53. fixed an embarrassing issue where the entirety of connection events and event-related properties were passed on to their associated user and server objects.
            I CAN'T EVEN BELIEVE THIS HAS BEEN THIS WAY FOR SO LONG WITHOUT NOTICING.

        54. Added SASL module.

        55. numerics can now be sent directly from connection objects.
            a new ->register_numeric() option 'allow_conn' indicates it's ok to use a numeric code on connections.

        56. updated modules to use $connection->numeric() instead of ->early_reply().

        57. Added ECHO command.

        58. send out NICK messages for nick collisions just as an extra measure of sync accuracy.

    6. added juno dev commit for easier commit and version increment.
        reverted changes to nick collisions because they didn't work.

        61. don't echo out loud; echo to INDEV :)

        62. needs more newlines!

        63. fixed several bugs with nickname reservation during registration.

        64. fixed a couple numeric errors in registration commands.

        65. fixed buggy registration waits.
            fixed an issue where multiple users could have the same nick if registered at the same time.

        66. fixed bugs with parameter check in registration commands.

        67. added Limit module (channel mode +l).

        68. fixed some bugs in Ident.
            postpone registration when either a CAP LS or CAP REQ is received.

        69. reorganized channel modules.

    7. time out hostname lookups after 3 seconds.
        finished renaming channel-related modules.

        71. report errors in command exceptions.
            improved some things with modes and such.
            updated Evented::API::Engine.
            updated Evented::Object.

        72. cleanup.
            updated Evented::API::Engine.
            updated Evented::Object.

        73. added ability to stop a channel from being shown in LIST.

        74. fixed some issues with connection timers.
            ->do_mode_string() now will only send out UMODE after UID has been sent.
            protocol errors for missing users, channels, etc. now do not result in delinkage but instead only warn IRC operators. the connection will stay alive.

        75. 'address' key in connect blocks now accepts a list of addresses to accept.
            addresses in connect blocks can now contain wildcards * and ?.

        76. fixed a bug where the connection limits were off by one.
            fixed a bug where the ~ was not added sometimes in Ident.

        77. greatly improved channel's ->handle_mode_string(). goodbye +- regex!
            greatly improved mode blocks. modes without blocks can no longer be set/unset.
            updated modules that provide channel modes accordingly.
            fixed another bug in Ident.

        78. made similar changes to user mode blocks as were made to channel mode blocks in the last commit.
            channel and user modes now only appear in RPL_ISUPPORT if they have 1 or more blocks registered.

        79. fixed a bug with status modes set by servers that arose in 8.77.

    8. added default.conf for fallback configuration values.

         81. because the api:modules configuration value is getting out of hand, modules can now be loaded with Some::Module = on instead.
             improved the default.conf warning visibility. thank you @Hakkin for helping with this. :)

        82. rewrote channel's ->mode_string_all(). much improved.
            outgoing CUM command now utilizies the new ->mode_string_all().
            fixed another bug in server connection timers.

        83. WHOIS command can now be extended by modules with the whois_query event.
            added RPL_WHOISACCOUNT to Account.

        84. fixed account propagation issues.

        85. Added Channel Key module
            The can_join hook now sends the channel key if used

        86. Added Channel Secret module (+s)
            Fixed an issue with the channel key module

        87. updated Evented::Object.
            added room for more WHOIS lines in the future.
            fixed an issue where the IRCd sometimes would not start due to notice() in pool.pm before $pool exists.
            fixed an issue where you could set the channel user limit to nan (not a number).

        88. fixed a bug where QUIT before registration would send "not enough parameters."
            removed ancient functions.
            improved the efficiency of lots of other functions by removing regex and utilizing List::Util.
            cleaned up a lot of other things.

        89. added message class for parsing IRC messages; its objects represent a single message.

    9. improvements to message object.
        fixed an issue where a user could be in a channel twice under certain conditions.
        removed more ancient utilities.
        miscellaneous cleanup.

        91. added ->local_users to the pool object.
            fixed total client (local user limit) limit:client; broken since version 6.5.
            fire command events on user objects in conjunction with those on connection objects.
            implemented (most of) the parameter parser for new message objects.
            added new evented method for adding user commands which will eventually replace ->register_user_command().
            the magical %user_commands now eliminates the need for ->register_user_command() over a foreach.
            updated Evented::API::Engine and Evented::Object.

        92. fixed an issue that arose in 8.88 where channel's ->list_matches() was not behaving appropriately.
            fixed an issue where (opt) parameters at the end of a parameter list were ignored due to ->parse_params() returning an empty list.

        93. moved all of the old core command handlers over to the new API.

        94. moved the remainder of the command handlers to the new API.
            removed the hideous old parameter parser.
            ERR_UNKNOWNCOMMAND is now an event callback that is canceled by handler wrappers.

        95. updated Fantasy for the new evented command handler.
            fixed an issue where parameter parser errors would lead to ERR_UNKNOWNCOMMAND.
            fixed a vulnerability where commands using echo or PRIVMSG could trigger additional fantasy commands.

        96. message object ->source now automatically determines source object.
            fixed a bug where ->numeric() on a connection object will always use the nickname from registration.
            added 'exception' oper notice flag for Perl exceptions in command handlers.

        97. silently ignore unhandled numerics from servers.
            removed the matcher identifier code as it was unused and causing problems for the '...' (synonymous with @rest) modifier.

        98. fixed a bug where servers would send ERR_UNKNOWNCOMMAND after incoming numerics which were being sent due to the recent changes that allow numerics to be fired on connection objects.
            numerics are no longer sent to servers (not with the server as the target anyway).
            servers now do not send ERR_UNKNOWNCOMMAND to other registered servers, and all incoming numerics are ignored.

        99. $user->events_for_message($msg) returns events for user handlers.
            fixed $user->handle() and $user->handle_unsafe() for use with the new system.
            registration commands now utilize the new parameter parser.
            other cleanup.

9. juno-ircd version 9 is being branded as agnie.

    0. rebranding.

        01. properly handle "JOIN 0" - thanks @blasphemy for pointing this out.
            fixed an error due to logging during global destruction.

        02. added ->hops_to() method to users and servers.
            WHO and LINKS commands now show the actual hop count rather than always 0.

        03. improved ident validation checks.
            updated Evented::Database to the 1.* series built upon SQLite.
            updated Evented::Object.

        04. gradually rewriting hideous Account module to be objective and use the new Evented::Database API.
            updated Evented::Database.

        05. more work on the newly-rewritten Account module.
            fixed an issue in user ->do_mode_string_local() where it was never sent back to the user.

        06. updated SASL module to work with the new Account module.

        07. fixed bug causing endless loop of mode unsets in Account module.

        08. fixed REGISTER command.

        09. fixed server flooding issues caused by NOTICEs sent before registration.

    1. fixed some more issues with new Account module.

        11. don't forward ACCT during burst; it is a one-to-one negotiation.

        12. respect account ID parameter.

        13. fixed an exception in SASL when account does not exist.

        14. properly handle LOGIN command for unknown account.

        15. improved delayed LOGIN handling.
            occasionally clear account keys whose values were deleted by garbage disposal.

        16. use ->account fetcher which double-checks that an {account} key is an object.
            sometimes an empty hash ref can be created automatically.

        17. created a more secure replacement for the Eval module.
            the old module has been renamed to UnsafeEval.
            rewrote the oper command handler which I previously considered some of the ugliest code in the project.
            added utilities ref_to_list() and simplify().
            -oper modifier can now be specified without any oper flags.

        18. improved security in server registration by negotiating SERVER and PASS separately.
            ident checks are now canceled immediately upon receiving SERVER command, speeding up the server connect process.

        19. improve new server registration process.

    2. added Grant module which has been missing since juno 2.

        21. added UNGRANT command.

        22. started working on implementing the TS6 protocol.
            started working on Channel::ModeSync module.
            user ->mode_string() can now take a server perspective.

        23. added TS6 outgoing commands NICK and TMODE.

        24. added TS6 outgoing command SID.
            began implementing network burst for TS6.
            TS6 prefixes are mapped to definitions in default.conf.
            show multiple prefixes in EUID, not just the highest.
            added channel method ->get_user_levels().
            added TS6 utilities:
            ts6_id:         convert an object to its TS6 ID;
            ts6_sid:        convert a juno SID to a TS6 SID;
            ts6_uid:        convert a juno UID to a TS6 UID;
            ts6_uid_u:      convert the "ID" portion of UID to TS6 ID;
            ts6_prefix:     convert juno status level to TS6 prefix;
            ts6_prefixes:   convert juno status levels to TS6 prefixes without duplicates.

        25. protocols can now be tied to ports; i.e. jelpport = or ts6port = in configuration.
            added connection methods ->possible_protocols() and ->possibly_protocol().
            ->register_registration_command() now takes an optional 'proto' option.
            registration commands can now be registered automatically from %registration_commands.
            JELP registration commands moved from Core::RegistrationCommands to new module JELP::Registration.
            listen on *port.

        26. all outgoing command handlers now have the first argument $server.
            they can also return array refs of multiple lines to send.
            server burst events are fired per-protocol as send_$PROTO_burst.
            BURST and ENDBURST moved from ircd::server to JELP::Outgoing.
            fixed bug where server description starting with colon would lose the colon.
            implement TS6 registration commands PASS and SERVER.

        27. lots more work for TS6 support.
            outgoing commands are now registered with a protocol option.
            created TS6::Base with method ->register_outgoing_ts6_command() and %ts6_outgoing_commands.
            juno can now establish a link with charybdis and send its burst.

        28. message object can now be used for other IRC-like protocols such as JELP and TS6.
            each implementation will provide its own parameter modifier subroutines and a function to look up message sources.
            finally removed the hideous parameter parser from JELP::Base.
            it has been replaced by the functionality provided by the message object.
            all JELP command handlers have been updated accordingly.
            as a result, the 'high.level.handlers' callback was finally removed also.
            server method ->handle() is no longer used as of right now.
            server command forwarding is now executed by a separate, lower-priority event callback.
            registered servers now have events message_$CMD and $PROTO_message_$CMD.

        29. now that linking protocol messages are parsed properly, IPv6 address can no longer begin with ASCII colon (:).
            the safe_ip() utility was created to prepend one ASCII zero (0) to IPs starting with the ASCII colon (:).
            added EUID TS6 server command handler.
            added TS6 utilities:
            ts6_id_n:           get the Nth ID in TS6 format;
            sid_from_ts6:       convert TS6 SID to juno SID;
            uid_from_ts6:       convert TS6 UID to juno UID;
            uid_u_from_ts6:     convert the "ID" portion of a UID from TS6 to juno ID;
            uid_n_from_ts6:     get the integral value of a TS6 UID.

    3. removed legacy JELP commands ADDUMODE and ADDCMODE.
        added TS6::Base method ->register_ts6_command() for adding TS6 command handlers.
        added TS6 parameter modifier subroutines and message source lookup functions.
        renamed some outgoing command events to no longer use JELP command names.
        add modes to TS6 servers before sending out our burst.
        added TS6 outgoing commands BMASK (list mode burst) and TB (topic burst).
        added TS6 incoming command SJOIN (channel burst or creation).
        server method ->cmode_type() now returns -1 rather than undef when the mode doesn't exist.
        outgoing command callbacks now return a list of lines rather than an array reference.
        added TS6 utilities:
        obj_from_ts6:           convert a TS6 ID to an object;
        user_from_ts6:          convert a TS6 UID to a user object;
        server_from_ts6:        convert a TS6 SID to a server object.


        31. * the server ->cmode_string_difference() method now takes an argument
              $remove_none which indicates that no modes should be unset. this was
              previously not necessary for JELP because the servers burst one-at-a-time.

            * message parameter modifiers that are protocol-independent such as -msg,
              -command, etc. now are provided by the message class rather and no longer
              are required for each protocol implementation.

            * all outgoing command subroutines now have the message object rather than the
              event fire object as their second argument.
              the fire object can be retrieved through $msg->event.

            * added methods to message objects that aid the forwarding of translated
              messages from one protocol to another:
              $msg->forward:      forward a message to all servers but the source;
              $msg->forward_to:   forward a message to a specific server.

            * added new forwarding logic to TS6 commands EUID and SJOIN.

            * renamed outgoing event uid -> new_user.

            * added new outgoing event create_channel for CUM/SJOIN
              (new channel, not necessarily during burst).

        32. *   $msg->forward_to() can now take a channel object as the destination,
                instructing it to send to all servers with member(s) in that channel.

            *   added PRIVMSG/NOTICE handler for TS6.
                it currently only supports simple client or channel destinations.

        33. *   added SID TS6 command handler.

            *   added PRIVMSG/NOTICE outgoing TS6 command subroutines.

            *   improved TS6 server mode registration logic.

        34. improved Resolve module.

        35. fixed things.

        36. added incoming TS6 command TMODE handler.
            user ->change_nick() method now takes an optional $time parameter for the nick TS.
            the $over_protocol argument for channel methods ->handle_mode_string(), ->do_mode_string(), and friends can now optionally be a subroutine to look up a user by UID.
            fixed some various bugs with user away messages due to improper use of exists() instead of length().

        37. new server methods ->user_to_uid(), ->uid_to_user(), ->set_functions().
            fixed broken TS6 TMODE handler.
            fixed uid_from_ts6() misbehavior with UIDs containing integers in the "ID" portion.
            ->convert_cmode_string() now takes an $over_protocol argument. if true, it will attempt to convert UIDs from one protocol format to another.

        38. all core JELP commands now utilize the $msg->forward() mechanism.

        39. ts6_id() now caches TS6 IDs because the translator functions are currently extremely inefficient.

    4. added Alias module.

        41. don't send channel modes in CUM if the input mode string is '+' (from SJOIN).

        42. new outgoing event join_with_modes.
            improved CUM/SJOIN.
            added new cols() utility function, a recursive version of col().
            SQUIT now affects all matching servers, not the first match only.
            fixed up Channel::Key.
            added some safety measures for colon-prefixed items in channel lists.

        43. completely rewrote server::linkage. it was very buggy.
            improved CONNECT and SQUIT commands.
            added connection event "done" which indicates the connection will be dropped.
            fixed an issue where BURST would be sent before finishing registration (due to slow host or ident resolve).

        44. reimplemented the READY command due to the issues that have arisen since its removal in version 8.1.

        45. if autoconnect is enabled, do not try to reconnect after an SQUIT command is issued.

        46. fixed a bug where the QUIT command would be forwarded with the physically linked server rather than the message source server.

        47. fixed a bug where SASL authentication did not propagate correctly because LOGIN was sent before UID or equivalent.

        48. Added free invite mode (+g)

        49. implemented invite exception (+I)

    5. added keys_values() utility to create a hash out of lists of keys and values.
        can_join event errors can now be silented by earlier callbacks.
        new event join_failed, fired for any reason that a user cannot join a channel.
        now able to identify the reason for join failure.

        51. added ->lookup_or_create_channel() method and eliminated repetition.

        52. added Channel::Forward 1.0, allows for channel forwarding

        53. dispose of channel that was just created if failed.

        54. added Channel::OperOnly, allows for IRCop only channels

        55. added limit:channel setting to limit the number of channels a user may be in at one time.
            fixed broken TS6 outgoing NICK command.
            fixed exception in JOIN command caused by TS6 outgoing channel creation.

        56. move hardcoded +m and +n to use new events can_message, can_privmsg, and can_notice.

        57. added functionality to prevent users from messaging a channel they're banned in.

        58. added show_in_whois event, useful for hiding channels from WHOIS queries.

        59. added can_continue event to allow for modules to prevent a user from continuing to registration

    6. created Channel::Mute to add channel muteban mode (+Z).

        61. fixed a bug where PRIVMSG/NOTICE were sent out in lowercase to servers.
            numerics can now be registered automatically from %user_numerics.
            channel mode blocks can now be registerd automatically from %channel_modes.
            deleted Base::Database, as it has been replaced by Evented::Database.
            miscellaneous cleanup.

        62. fixed a bug where PRIVMSG/NOTICE were sent out in lowercase to users.
            fixed a bug where the callback to register commands from %user_commands was overwritten.

        63. WHOIS command now works remotely with the <server> parameter.
            this allowed for the addition of idle time in local queries, RPL_WHOISIDLE.

        64. fixed a bug where notices in Core::OperNotices were not registered since 9.61.
            added new message pseudoparameter type tag.* to access message tags.
            any missing (undefined) tag will assume unsatisfied parameter requirements.
            these parameter types can optionally take a type such as server, user, etc.
            JELP WHOIS now uses a message tag for its target server.

        65. added ADMIN command and corresponding [admin] configuration block. works remotely.
            added server_mask parameter type, returning the first server matching a mask.
            $pool->lookup_server_mask() now always returns the local server if it matches and a scalar return is expected (previously, it would return the first alphabetical match).

        66. added TIME command; works remotely.
            LINKS command now uses the same @for= format as WHOIS, TIME, and ADMIN.

        67. $msg->forward_to() is now much smarter and can take a user, channel, or server target.
            this will hopefully fix a flooding issue.

        68. believe to have fixed a bug where responses to WHOIS, TIME, maybe others sent over and over.

        69. update Evented::Configuration.
            update configurations for Evented::Configuration changes.
            Eval module no longer kills you if you do not have permission to use it.

    7. created Channel::TopicAdditions which adds topicprepend and topicappend commands.
       added several convenience functions to eval module.
       improved ':rest' parameter matcher to consider all whitespace.
       delete lingering connection_future on all local connection objects.

        71. this should fix an issue with sentinel-prefixed parameters within messages with IRCv3 message tags.

        72. fixed long-broken idle time.
            start script actually checks if the process is running now.

        73. added two utilities:
            pretty_mask() takes an incomplete mask and returns a valid one;
            string_to_seconds() takes a duration format like "1d" and converts to seconds.

        74. added Ban module which provides an interface for server/user bans.

        75. added Ban::Kline.

        76. fixed issue with string_to_seconds().
            added oper notices to Ban module.
            implemented ban propagation.

        77. propagate ban deletion.

        78. implement ban expiration.

        79. deactivate ban timers on ban deletion.

    8. added Dline module.
        updated Ident and Resolve modules such that the dline check will come first, the hostname lookup initiation will follow, and the ident check will start last.

        81. added gnotice() utility for propagating oper notices.
            ban oper notices now propagate.

        82. improve server notice propagation.

        83. added developer mode to prevent module manifest conflicts.

        84. added Git module which allows remote repository operations.

        85. RELOAD and UPDATE can now be performed remotely.
            improved server notices for RELOAD and UPDATE.

        86. fix broken Channel::OperOnly.

        87. fixed Git command failure handling.

        88. added Configuration::Set module which provides simple commands for modifying the configuration.

        89. fixed a bug where NETWORK in RPL_ISUPPORT was missing with certain configurations.

    9. fixed inaccurate hop count in LINKS.
        update example configuration to include new modules.
        fixed an issue where ->hops_to() can loop infinitely if used incorrectly.

        91. fixed broken -oper parameter matcher.
            fixed broken GRANT command; it wasn't working when used remotely.

        92. permanent bans no longer expire immediately after adding them.
            GRANT command more verbose.
            if a connection attempts to introduce an existing server, drop the connection immediately rather than waiting for it to timeout.

        93. eval command now times out after 10 seconds.

        94. SQUIT can now cancel connection timers with wildcards.

        95. improve connection object disposal.
            rehash on HUP.

        96. Git module now attempts to resolve Evented API Engine manifest conflicts.

        97. added USERHOST command.

        98. VERSION command now accurately displays version info for remote servers.
            improved reliablity of commands which take a remote server argument like VERSION, TIME, RELOAD, etc.
            commands which take a server mask parameter that can only match one server will now always match the local server if the query is "*".

        99. updated TIME and ADMIN commands to use the same global command mechanism used by VERSION, UPDATE, RELOAD...

10. juno-ircd version 10 is being branded as yiria.

    0. rebranding.

        01. Allow retrieving the MOTD of a remote server.

        02. Added send_to_channels_with_cap to send a cap notification to common
            users.

        03. Added sendfrom_to_cap to send to a list of users who have a cap.
            Additionally, add away-notify support.

        04. Added DNSBL module.

        05. added support for server mask broadcast PRIVMSG/NOTICE. implemented as defined in the TS6 spec and adopted by JELP as well.

        06. fixed issues with "$$" PRIVMSG/NOTICE.
            made eval command more descriptive for undef/empty values.

        07. add TS6 JOIN incoming command.

        08. add base code for TS6 ENCAP commands.
            add TS6 LOGIN incoming command.

        09. add TS6 outgoing command PART.
            add TS6 outgoing command QUIT.

    1. fixed an issue with CAP ACK with multiple capabilities.

        11. fixed TS6 outgoing QUIT command.
            add TS6 outgoing command KICK.
            add TS6 outgoing command TOPIC.

        12. add TS6 outgoing command KILL.
            add TS6 incoming command KILL.
            kill messages now use the normal path format: Killed (source (reason)).

        13. fix path for TS6 KILL.
            fixed broken outgoing TS6 KILL.

        14. kills are now immediately effective.
            quit messages are no longer sent for users which have been killed.
            this also fixes compatibility for TS6 kills.

        15. fixed KILL propagation.
            fixed PART propagation.
            add utility channel_str_to_list().
            add TS6 command PART.

        16. moved JELP stuff out of the Ban module and into a separate submodule.
            this allows JELP and TS6 support to be loaded dependently of the protocol modules.
            update Evented::API::Engine.

        17. send SQUIT for server quit messages in TS6.

        18. misc. TS6 fixes.

        19. fix TS6 JOIN.

    2. part reason is not required. fixed ts6 handler accordingly.
        fixed an issue where incorrect number of parameters from a JELP command raises an exception when the ircd attempts to send ERR_NEEDMOREPARAMS.

        21. add TS6 incoming QUIT command.

        22. add network service user mode (+S).

        23. add SERVICES capab to indicate +S and +r are available.

        24. fixed a bug where SJOIN would preserve all modes from all servers.
            add TS6 incoming KICK command.

        25. consolidate the KICK commands.
            fixed TS6 KICK.

        26. add TS6 incoming NICK command.

        27. included a proper atheme protocol module in the distribution.
            updated default.conf accordingly.

        28. reveal network service status (+S) in RPL_WHOISOPERATOR.

        29. improve module load errors.

    3. further improve module load errors.

        31. update Evented::API::Engine.

        32. update Evented::API::Engine.

        33. handle (H) to indicate hidden server.

        34. reversed server order in netsplit user quit message.

        35. handle TS6 ENCAP SU (account name set by services).

        36. add ENCAP LOGIN outgoing command, sent during TS6 burst.
            RPL_WHOISACCOUNT now works for accounts set by services.

        37. deleted poorly-designed Account module.
            deleted deprecated UnsafeEval module.
            fixed LOGIN commands for JELP and TS6.

        38. temporary fix for a TS6 UID conversion issue.
            re-added RPL_WHOISACCOUNT, now independent of the former Account module.

        39. replaced temporary fix on TS6 UID conversion with a permanent, better solution.

    4. fixed an issue where local kills were not propagated correctly.

        41. PING is now handled separately for each protocol.
            end of burst in TS6 is now handled during the first PING.
            we still need to handle EB capab eventually.

        42. improve bursting and whatnot with TS6.
            remove PONG registration command handler.

        43. add AWAY command for TS6.
            send AWAY in TS6 burst.

        44. added TS6 incoming command handlers TOPIC and TB.

        45. server can now initiate an SSL connection.
            fix TS6 PART outgoing command.

        46. add TS6 SSL link support.

        47. added incoming and outgoing WALLOPS command for TS6.

        48. added "changing hosts" reconnect emulation like charybdis.

        49. added CHGHOST support for TS6.

    5. added support for alphanumeric SIDs in TS6.

        51. add a utils function for checking duplicate servers.
            it is now used by both linking protocols.
            remove ghost users on ircd upgrade.

        52. fixed an issue where servers disconnected due to UID collisions would leave behind ghost users.

        53. major work on nick collisions in TS6.
            JELP now uses nickTS for resolving nick collisions.

        54. drop link to servers lacking required TS6 capabilities.

        55. added extra checks on read/write errors before attempting to dump the remainder of a connection buffer.
            fixed an issue where account names set by external services were not included in TS6 EUID.

        56. fix TS6 SQUIT handling.
            use ENCAP CHGHOST on servers not supporting EUID.
            add oper notices server_closing and server_protocol_error.

        57. version skipped.

        58. added oper notices: server_protocol_warning, user_mode_unknown, channel_mode_unknown.
            added TS6 SVINFO.
            fixed issue where secret channels were shown to non-opers in WHOIS.

        59. added definitions for all spec-standard TS6 user modes.
            added oper notice user_deopered.

    6. fixed an issue where server parameter in client WHOIS was ignored when the hopcount was >1.
        fixed wrong nickname in oper notice user_saved.
        properly handle sourceless TS6 SQUIT.

        61. added definitions for all spec-standard TS6 channel modes.

        62. added incoming and outgoing handlers for TS6 WHOIS command.
            added support for outgoing numerics in TS6.

        63. added support for incoming numerics in TS6.

        64. fixed an issue where mode translation left stray parameters when omitting modes unknown to the destination server.

        65. do not flood opers with quit messages on server disconnect.
            added user_kick notice instead of pretending to be a part.

        66. this should fix some of the JSON manifest issues with UPDATE.
            update Evented::API::Engine.

        67. report the repository version in UPDATE.
            made Git notices less confusing.
            update Evented::API::Engine.

        68. show_in_list also affected WHOIS, but now show_in_whois is separate.
            this is necessary for adding private channel support, #34.
            fixed incorrect name of numeric 353 RPL_NAMREPLY.
            fixed warning caused by trying to unset away when not away.

        69. new dependency Net::IP. #33
            fixed several issues with translation to servers lacking certain modes, particularly with channel status.
            the new behavior is to remove and forward without the unknown modes and their parameters, if any. #7

    7. reflect limit:channel in RPL_ISUPPORT.
        added ->do_away() method which handles an away locally, even for remote users.
        this fixes an issue where away messages set remotely were unlimited in length.
        it also fixes #38 where away-notify only worked for local users.

        71. add user ->do_part_all() to handle JOIN 0 locally, even for remote users.
            the client JOIN 0 handler now fires a part_all outgoing command. closes #37.
            added oper notice user_part_all to eliminate flooding on JOIN 0.
            added outgoing part_all for TS6 (JOIN 0).
            added outgoing part_all for JELP (PARTALL).
            added handler for TS6 JOIN 0.
            added handler for JELP PARTALL.

        72. working on adding channel private (+p) to the Channel::Secret module. #34

        73. NAMES without a parameter is currently not supported.
            instead of sending ERR_NEEDMOREPARAMS, use RPL_LOAD2HI and RPL_ENDOFNAMES.
            fixed issue where show_in_whois was fired twice, each time with different arguments.
            added show_in_names which allows modules to hide users from NAMES.
            added names_character which allows modules to change the '=' char in NAMREPLYs.
            Channel::Secret now hides users in private or secret channels from NAMES. #34
            Channel::Secret now appropriately sets the NAMREPLY character to '@' or '*' for secret and private channels respectively.

        74. fixed an issue where ->convert_cmode_string() did not consider extra +/-.
            fixed an issue where TS6 TMODE was sent out with no modes if none were translatable.

        75. add ->convert_umode_string().
            add TS6 outgoing command MODE, used only for user mode changes. #40
            fixed problem where ->convert_cmode_string() and ->convert_umode_string() would spit out +- with no modes between.

        76. added TS6 incoming MODE handler. #40
            this is used for umodes but also supports the deprecated form for cmodes and forwards them as TMODE.

        77. TS6 SJOIN can now span several messages instead being sent as one enormous one. closes #13

        78. do not send out all users for TS6 SJOIN or JELP CUM when none are provided.
            this fixes an issue where TS6 SJOIN with no users would be forwarded with all users.

        79. fixed an issue where TB and TOPICBURST were propagated even when the topic was unchanged. closes #43
            fixed an issue where a separate BMASK was sent for every ban. closes #42
            @GLolol suggested to try limiting SJOINs to 15 arguments. #41
            use join_with_modes for channel creation.

    8. ->convert_cmode_string() now has an option to strip the string of status modes.
        this is used for SJOIN in TS6, fixing a bug with mode propagation on channel creation.
        fixed issue where channel forward parameter was improperly pushed when unsetting.
        fixed issue where status modes were appearing in MAXLIST in RPL_ISUPPORT.

        81. fix TS6 remote PING/PONG. #55

        82. overhaul of TS6 SJOIN handler. hope it works!
            this ought to fix some issues with mode acceptance.

        83. use channel_burst for channel creation.
            this will use CUM for JELP channel creation and SJOIN for TS6. #52

        84. CUM command overhaul. works more like SJOIN now.

        85. because CUM and SJOIN are now always used for channel creation, join_with_modes has been removed. closes #52.
        this also fixes an issue where SJOIN was not propagated properly to JELP servers outside of burst.

        86. renamed CUM command to SJOIN.
            the UID list in the JELP SJOIN command is now the last argument.
            this allows UIDs to be separated by whitespace rather than commas, making it more legible.

        87. add TS6 OPERWALL support.
            per TS6 spec, numerics with an initial digit of zero (those which are delivered during the connection process) are handled as though it were one.

        88. added several TS6 remote requests: ADMIN, INFO, MOTD, TIME, and VERSION. #57

        89. added more TS6 remote requests: LINKS, LUSERS. #57
            in the JELP LINKS command, the server_mask parameter is now deprecated and is always propagated as '*'.

    9. the Channel::Invite module no longer depends on JELP.
        moved JELP logic out of the module and into JELP::Incoming and JELP::Outgoing.
        added TS6 handlers for INVITE.
        because TS6 does not support INVITE to nonexistent channels, those messages are not forwarded to TS6 servers.

        91. added channels:only_ops_invite option to limit INVITE command to chanops unless free_invite is enabled.
            added channels:invite_must_exist option to limit INVITE command to existing channels, contrary to RFC 1459.

        92. for the show_in_whois event, provide the user initiating the query as the second argument.
            fixed an exception in WHOIS which occurred when deciding whether or not to include secret (+s) channels.
            removed deprecated "core module version" from the VERSION command.
            the core module version was actually that of Core::UserCommands, specifically the version at which it was last modified, which is meaningless.

        93. fixed an issue where halfops were powerless. closes #64.

        94. improve logging.

        95. fixed issues with SJOIN mode perspective. closes #65 and #66.
            updated Evented::Database.

        96. improved Eval convenience functions.

        97. fixed an issue where fantasy commands worked for any user command.
            removed old user handler registration code from pool.pm, unused for years.
            updated Evented::Configuration.
            updated Evented::Database. closes #68.

        98. fixed incorrect CASEMAPPING in RPL_ISUPPORT. thx @GLolol.
            renamed repository to "juno."

        99. fixed #74 where the forward channel could be the same as the original one.
            removed old, unsued 'do_not_set' mode block options.
            added some extra santity checks to Forward module.

11. juno-ircd version 11 is being branded as janet.

    0. rebranding.

        01. fixed #67 where MODE <channel access mode> with no parameter did not show the access list.
            fixed an issue where the mode letter was sometimes omitted from numerics for banlike channel lists.

        02. replaced all instances of the ->register_user_numeric() API with the newer %user_numerics method.
            removed smart matching from the Access module. #54.

        03. replaced all instances of ->register_channel_mode_block() API with the new %channel_modes method.
            moved common mode logic from Core::ChannelModes to Base::ChannelModes.
            updated modules to use the new API and depend on Base:: instead of Core::. closes #75.

        04. partially reimplemented SASL for external service packages.
            this is not complete. #9.

        05. encapsulated commands in TS6 are no longer hard-coded.
            the new master ENCAP handler fires virtual commands in the form of ENCAP_*. #29.
            updated LOGIN and SU handlers appropriately.
            added outgoing commands su_login and su_logout, as well as the respective TS6/JELP handlers.
            more work on SASL propagation. #9.
            added message ->forward_to_mask() method which forwards the message to all servers matching a mask.

        06. finished new ENCAP handling. closes #29.
            more work on SASL in TS6. #9.

        07. added TS6 ENCAP SVSLOGIN. SIGNON not yet implemented.
            this mostly completes the SASL implementation for TS6. it's fully functional but needs additional sanity checks. #9.
            SASL still needs to be implemented in JELP.
            send out SASL D A when the client aborts the authentication process.
            moved common SASL logic from TS6.pm to SASL.pm.

        08. removed deprecated CAP CLEAR command.
            added support for sticky capabilities, updated SASL accordingly.
            added cap-notify capability and version parameter to CAP LS.
            cap-notify is sticky only when IRCv3.2 is used but not for IRCv3.1.

        09. added %jelp_outgoing_commands and %jelp_incoming_commands APIs.
            added JELP SASL implementation. closes #9.
            added sasl_mechanisms (SASL M) forwarding in TS6.
            fixed an issue where SASL initiation was sent with the wrong target server when used remotely.

    1. disabled redefine warnings when reloading Evented::Object with the RELOAD command. #20.
        made ->delete_outgoing_handler() verbose because it seems to be not called somehow.

        11. SASL.pm now appropriately handles nick collisions. closes #82.
            fixed an issue where numbers LUSERS global count included unregistered connections with reserved nicks.

        12. added ->do_login(), ->do_logout(), and IRCv3 account-nofity support. closes #81.
            added oper notices: user_logged_in, user_logged_out.

        13. unified the channel joining logic into two simple methods. closes #76.
            renamed $channel->cjoin() to ->add(), which corresponds with ->remove().
            removed the time argument from ->add(), as it is no longer used since the additional of ->take_lower_time().
            renamed $channel->handle_part() to ->do_part(), which corresponds with user.pm method naming.
            new method $channel->do_join() combines several repetitive procedures.
            new method $channel->attempt_local_join() allows modules to attempt joins.
            updated Channel::Forward to use the new method.
            removed $channel->localjoin() because the new ->do_join() and ->attempt_local_join() do it all.

        14. added IRCv3 extended-join support.
            added channel method ->sendfrom_all_cap().
            updated JELP/TS6 SJOIN handlers to use new channel join methods. #76.
            send AWAY to users with away-notify when an away user joins a channel. closes #86.

        15. message tag support was based on an old draft specification. it was updated to the current IRCv3.2 spec.
            added channel method ->destroy_maybe(), which fires a new event can_destroy. #47.
            in JELP/TS6 SJOIN, call ->destroy_maybe(), which will immediately delete channels bursted with no users.

        16. added Channel::Permanent, which provides permanent channel mode (+P). closes #47.
            added private (+p) and permanent (+P) channel modes to atheme protocol module.
            use +q for owner and +Z for mute in atheme mod, such that it is consistent with juno's default config.

        17. FIXED TEH BROKED LOLCATZ MODYOOL.  KTHX.
            added users:chghost_quit option.
            fixed broken Channel::Key.

        18. fixed #87 where prefixes were not included in RPL_WHOISCHANNELS.
            hide RPL_WHOISCHANNELS for services (+S).
            cleaned up WHOIS callbacks. it was quite ugly.

        19. fixed an issue where attempting to set certain channel modes without op did not send ERR_CHANOPRIVSNEEDED.
            the mode block firing system now does a better job of guessing when it is appropriate to send it.
            hide RPL_WHOISHOST for users without see_hosts flag. closes #72.

    2.  combined several sendfrom_to_many()-based functions to a single sendfrom_to_many_with_opts().
        removed user::sendfrom_to_cap() function.
        removed $user->send_to_channels_with_cap() method.
        fixed an issue where CHGHOST was incorrectly sent to the client changing hosts instead of RPL_HOSTHIDDEN.

        21. cleaned up user.pm, updated user docs.
            renamed ->get_killed_by() to ->loc_get_killed_by().
            rename ->get_invited_by() to ->loc_get_invited_by().

        22. added utils valid_ipv4(), looks_like_ipv6(), and embedded_ipv4().
            Net::IP's validation was too generic for IRC; it is no longer a dependency.

        23. notice() and gnotice() utilities now can optionally take an argument for the user which initiated the notice.
            this eliminates repetitive notices. closes #24.
            updated several modules to use the new arguments.
            the parameter matcher parser now keeps track of the key order.
            it is now possible for message tag parameters (the -tag.NAME matchers) to be marked as optional.
            fixed an issue where the recent changes to gnotice() didn't work well with ->handle_unsafe() on remote users.

        24. $pool->lookup_server_mask() can now take multiple SIDs in the $SID format.
            ->fire_command_data() is now deprecated and will be removed.
            update RELOAD and UPDATE command propagation to use the new method. closes #19.

        25. the RELOAD command now generates only one server notice per server by default.
            RELOAD now has flags 'v' and 'd' for verbose and debug.
            $ircd::disable_warnings can be set to temporarily disable all warnings.
            this is now used when redefining Evented::Object to prevent flooding opers. closes #20.

        26. new ircd submodule ircd::server::protocol intends to clean up ircd::utils by housing common server protocol logic.
            new forward_global_command() utility eliminates code repretition in the propagation of JELP global commands.
            JELP global commands (ones which use ->handle_unsafe()) can now take multiple parameters.

        27. REHASH now optionally takes a server parameter.
            REHASH is now implemented in TS6 and JELP. closes #57.
            JELP numerics starting with 0 are now handled appropriately. closes #92.

        28. both JELP and TS6 now appropriately handle situations where a nickname is already reserved for an unregistered connection.
            JELP now has a SAVE command like TS6 which helps to ensure consistency after a nick collision.
            the nick collision logic was very similar in each protocol and was moved to server::protocol.

        29. big changes to Channel::Fantasy. Fantasy commands are now only allowed when explicitly permitted by the configuration.
            fixed #94 by removing the old 'fntsy' option which required modules to specify whether fantasy was allowed.
            fixed an issue where exceptions occurring in ->handle() and similar methods were not reported.

    3. added bot user mode (+B) and the corresponding WHOIS line and WHO flag.
        Channel::Fantasy now ignores fantasy commands from clients marked as bots.
        added deaf user support (+D). closes #44.
        fixed an issue where mode parameters got mixed up in JELP SJOIN when modes were missing on some servers.

        31. if the UID and nickname fields are the same in TS6, adopt the internal UID.
            this fixes an issue where saved users (whose nicks were changed to their UIDs) would have their TS6 UID even on juno servers after a netsplit.
            replaced various occurrences of array dereferencing on configuration values with the safer ref_to_list().

        32. added TS6 ENCAP RSFNC handling. this adds support for services nickname enforcement.
            fixed a bug where the TS6 NICK command would set the nickTS to the current time rather than the provided one.
            fixed bugs with propagation of UIDs as nicknames in TS6.

        33. eliminated code repetition in kill handling and propagation.
            ->loc_get_killed_by() was replaced with ->get_killed_by() which works for both local and remote users.

        34. this includes part one of a two-part mass replacement of the core lc() function with the new irc_lc().
            the new function supports a few different options for casemapping and fixes some issues with TS6 links. closes #98.
            the new config option server:casemapping defaults to 'rfc1459', so this may cause user and channel collisions.
            currently 'rfc1459' and 'ascii' are supported but only the former is allowed for use with TS6.
            added RPL_LUSERUNKNOWN to LUSERS command, which displays the number of unregistered connections.
            added users:allow_uid_nick option which, if explicitly disabled, disallows the NICK 0 command.
            added users:notify_uid option which, if enabled, sends RPL_YOURID on connect.

        35. this includes part two of a mass replacement of the core lc() function with the new irc_lc(). closes #99.
            the server:casemapping option added in the previous version is now sticky such that it cannot be changed on RELOAD.
            this is because changing the casemapping in real-time can result in nickname, channel, and server name collisions.
            the default casemapping for irc_lc() is now 'rfc1459', which corresponds with default.conf.

        36. fixed an issue where TS6 TB messages lacking the optional 'setby' parameter were ignored.
            updated Evented::Configuration.
            updated Evented::Database. #30.

        37. fixed #30 where aliases were not updated on REHASH.

        38. added new channel method ->handle_modes() which is a low-level applicator of named modes. #77. #101.
            status mode blocks should now push user objects to the parameter list. the former [UID, NICK] format is deprecated.
            rather than constantly converting between UIDs/nick and objects, mode blocks are always passed objects from now on.

        39. new server method ->strings_from_cmodes() generates one or more strings based on named modes. #101.
            new configuration options channels:max_modes_per_line and channels:max_modes_per_sline determine how many modes can fit in an outgoing MODE message.

    4. new methods ->do_modes() and ->do_modes_local() apply named modes, notifying local users and other servers. #77. #101.

        41. new server method ->cmodes_from_string() extracts named modes from a mode string in a certain perspective. closes #77.
            channel methods ->handle_mode_string(), ->do_mode_string(), and ->do_mode_string_local() are now all wrappers for the new named mode methods. #101.
            fixed #102 where reusing an arrayref in ->do_modes() caused empty mode strings to be sent to uplinks.

        42. new configuration option channels:client_max_modes_simple limits the number of modes per client MODE message. #101.
            new configuration option channels:client_max_mode_params limits the number of parameters per client MODE message.
            renamed channels:max_modes_per_sline to channels:max_modes_per_server_line.
            use proper TS6-formatted UIDs in the TS6 SJOIN handler. #103.

        43. Configuration::Set now registers outgoing JELP commands for CONFGET and CONFSET.
            removed the deprecated ->fire_command_data() method. closes #36.

        44. new configuration option channels:max_param_length limits the length of normal mode parameters. closes #61.
            new configuration option channels:max_ban_length limits the length of banlike mode parameters.
            added cut_to_length() utility which truncates a string to a certain length.
            eliminated some warnings which were produced when viewing lists of banlike modes as in "MODE #chan b" with no parameter.
            in scalar context, ->strings_from_cmodes() now returns an empty string rather than undef when passed an empty arrayref.
            fixed a bug where ->do_modes() would sometimes sent empty mode messages to servers.

        45. RPL_ISUPPORT is now implemented with an event on the local server.
            this allow modules to add, remove, and modify support tokens. closes #96.
            reflect channels:client_max_mode_params in RPL_ISUPPORT.
            move INVEX token to Channel::Invite.

        46. added JELP USERINFO command. this allows changing multiple user fields at once.
            currently it supports ident and visual hosts. closes #90.
            in TS6, forward USERINFO as CHGHOST or ENCAP CHGHOST if the host field was changed.
            fixed a bug where only one channel rejoin was sent per user after a quit emulation.
            added outgoing TS6 SIGNON command. #83.

        47. fixed an issue where SASL login was done post-propagation, so the account name was missing from TS6 EUID.
            new user event 'welcoming' is fired just before welcome messages are sent to a newly registered user.
            new user event 'initially_set_modes' is fired just after automodes are set on a newly registered user.
            the CONNECT command now sends ERR_NOSUCHSERVER instead of silently failing when no servers match the given mask. #58.
            the server versions in RPL_YOURHOST and RPL_VERSION are consistent now.

        48. prefixes in the configuration can now optionally take an element which specifies what weight is needed to set or unset the status.
            if it is omitted, the user must have weight greater than or equal to what he is trying to set. closes #73.

        49. spruced up CONNECT to work as a global command.
            added JELP CONNECT command. closes #58.
            added TS6 CONNECT command.

    5. SQUIT now works remotely. closes #93.
        fixed a bug where SQUITs from TS6 servers were forwarded to other uplinks twice: once from the SQUIT and once from the ERROR.
        added extra checks in connection->done() to ensure that quit messages are never sent out more than once.
        made missing umode notices less spammy.

        51. added Cloak module, which will provide hostname cloaking. #71.
            this is just the bare-bones. it does not have a reasonable algorithm yet.
            ->get_mask_changed() can take an optional setby argument now, which tells the user who set the cloak.
            it also now says "hostname reset" when switching back to the real host.
            only apply the cloak if the real host is active.

        52. added Cloak::Charybdis which provides a charybdis-compatible host cloaking alogorithm.
            currently it is autoloaded with Cloak because there are no other options yet. closes #71.

        53. in TS6, PINGs for non-TS6 servers connected through the receiving server are handled by it.
            this fixes #62 where TS6 links like charybdis never receive an end-of-burst token for remote servers.

        54. TS6::Base now provides methods to add and remove server capabilities.
            core capabilities are in TS6::Registration. closes #59.

        55. the ->notice_info() method now returns a string rather than a list, simplifying oper notices.
            ->notice_info() can now be called on servers as well, which yields the server name and SID.

        56. working on implementing bans in TS6. added some outgoing commands. #32.
            more work on TS6 bans. #32.
            moved fnv() to utils.pm.
            fixed some oper notices which were broken since the changes to ->notice_info().
            silented annoying warnings produced by load_or_reload().
            added ridiculous experimental fake user for #32.

        57. added incoming TS6 handlers for KLINE, ENCAP KLINE, ENCAP DLINE. #32.
            added convenience function add_update_enforce_activate_ban() to Ban.
            added support for TS6 capabilities KLN and UNKLN.
            significant clean up in Ban.
            calculate an appropriate duration to send to TS6 based on the expire time.
            fixed an issue where QUITs were sent on ban enforcement for users not yet propagated.
            added connection events 'found_ident' and 'found_hostname' for Ban.
            Ban now enforces bans on a connection as soon as the host/ident are looked up.
            Ban classes were removed because some ban types apply to multiple object types.
            Klines can now be applied directly to connections, so the kill occurs during registration when possible.

        58. add TS6 handlers for UNKLINE, ENCAP UNKLINE, ENCAP UNDLINE. #32.
            added notify_new_ban() and notify_delete_ban(). ban notices are now handled locally.
            added from_user tag to JELP BANINFO and BANDEL for use in oper notices.
            made the BANS command prettier and more useful.
            Ban removal now uses ban_by_type_match() instead of ban_by_match().
            this ensures delete commands only match certain types, e.g. UNKLINE only removes KLINES.
            improved oper notices for ban add, delete, and expire.

        59. the Ban API now provides module methods ->register_ban_action() and ->get_ban_action().
            match code provided by ban modules such as Ban::Kline and Ban::Dline must now return a special identifier to indicate how the ban should be enforced.
            Ban provides the built-in action 'kill'; modules will add other actions in the future.
            added some server warnings for if TS6 ban propagation is not possible due to the agent being unavailable.
            this should fix a bug described at GLolol/PyLink#286 where the sentinel was sometimes lost in TS6 numeric handling.

    6. added param type 'hunted' which is now used in several commands in TS6::Incoming.
        it yields a single server object in a similar manner to charybdis hunt_server().
        add USERS user command.
        added incoming and outgoing commands LUSERS and USERS in JELP and TS6. closes #106.

        61. handle TS6 ENCAP GCAP.
            all modules which previously depended on ircd->VERSION now use Evented::API::Engine's autoversioning.
            improved channel key validation.
            start TS6 burst after initial propagation. #107.

        62. added TS6 UID support. closes #105.
            fixed an issue where TS6 hopcounts were off by one.
            added ENCAP REALHOST incoming handler. #105.
            added 'realhost' outgoing command which forwards as either ENCAP REALHOST or USERINFO.
            added 'real_host' field to USERINFO command.

        63. added TS6 ENCAP CHGHOST incoming handler. forwards as CHGHOST, ENCAP CHGHOST, or USERINFO. #105.
            added TS6 UID command handler. forwards as EUID or UID. closes #105.
            fixed an issue where the account field in TS6 EUID was not handled.
            fixed an issue where users would be logged in as '*' from EUID.
            hide new user and join notices for bursting servers.
            add ratbox mode definitions.
            add horrible temporary hack for fixing hosts for ratbox.

        64. add TS6 ENCAP SNOTE handler. closes #56.
            this maps each snomask letter to a generic juno flag.

        65. added outgoing charybdis-style BAN command to Ban::TS6. #32.
            the new behavior is to send out BAN, (UN)KLINE, or ENCAP (UN)KLINE.
            added TS6 BAN handler.
            added TS6 BAN capability.
            switched TS6 ban handlers to use :rest for the reason parameter.
            add_update_enforce_activate_ban() now checks that the modification time is newer than what we have already.
            add the notice flag prefix to outgoing TS6 messages when necessary.

        66. add TS6 CLUSTER capability.
            added low-level pool methods ->add_resv(), ->delete_resv(), and ->expire_resvs(). #112.
            utils::validnick() now checks against reserved nick masks. it can take a parameter to not to do this.
            Ban interfaces can now provide custom activate_code and expire_code.
            added Ban::Resv which provides the RESV and UNRESV commands, as well as nick reserve expiration.
            Ban interfaces can now specify an 'hname' option, which is a human-readable type name for displaying in notices.
            slightly improved the ratbox host fixation hack. #115.

        67. added ircd_support_hash(), the first step for #110.
            added ircd_register_modes() which applies mode definitions in the new format to a server.
            updated TS6 stuff to use the new ircd options.
            updated IRCd definitions in default.conf to use the new format. #110.
            this also adds a generic 'all_sane_ircds' option to simplify definitions.
            added SAVETS_100 CAPAB to silence ratbox nickTS warnings.

        68. partially added incoming TS6 RESV, UNRESV, ENCAP RESV, ENCAP UNRESV. #112.
            added internal support for reserving channel names.
            finished the handlers for TS6 RESV commands.
            added code to handle the 'R' type ban in the BAN command.
            added TS6 ENCAP NICKDELAY.
            added ->forward_plus_one() which forwards to all servers, even the source.
            fixed an issue where NICK was not sent to the server that we received RSFNC from.

        69. added Ban function delete_deactivate_ban_by_id().
            update JELP/TS6 ban implementations to use this.
            added outgoing NICKDELAY on removal of RESV.
            fixed an issue where RSFNC would send out NICK messages even if the nick was unchanged.

    7. ->forward_to_mask() now returns true if the mask matches the local server.
        fixed TS6 RSFNC handling (it was ignoring the target). #120.
        RSFNC now has proper outgoing code for TS6. closes #120.
        added JELP FNICK command. it works like TS6's RSFNC or SVSNICK in others.
        fixed a bug where old modes were cleared when the new TS is zero.
        added ->ircd_opt() method to server. closes #110.
        updated ratbox host hack to use ->ircd_opt().

        71. removed all smart matching. closes #54.
            updated Evented::API::Engine.
            updated Git module to use ircd::get_version(), which is more reliable than reading from VERSION.
            Git now also shows the commit and other info in the oper notices.

        72. added 'burst_topicwho' option for TS6. without it, the 'setby' parameter is omitted from TB.
            added channel method ->do_topic() which eliminates code repetition in setting topics.
            updated TS6 and JELP core handlers to use the new method.
            new server method ->server conveniently returns the server object.

        73. added TS6 ETB (extended topic burst) command.
            reworked the way topics are bursted in TS6 such that ETB, TB, or TOPIC will be used, depending on what is available.
            the 'topicburst' outgoing command is now forwarded with additional information about the incoming command when possible.
            this also adds the 'EOPMOD' capability, although it is not fully implemented.
            JELP TOPICBURST now uses the same logic as TS6 ETB for accepting topics.

        74. added incoming handler for TS6 SVINFO. checks the TS version and time deltas. #21.
            new options servers:max_delta and servers:warn_delta specify the number of seconds for dropping or warning about link deltas.
            set the 'proto' option for TS6 servers to TS$TS_VERSION.

        75. channel 'can_message', 'can_privmsg', and 'can_notice' events can now set a {new_message} key to change the message text.
            new 'initiate_$PROTO_link' events can be used by protocol modules to send the initial authentication commands.
            moved JELP's ->send_server_server and ->send_server_pass methods from connection.pm to JELP::Base.
            eliminated a cyclical reference in server autoconnect timers.
            updated TS6 to use the new 'initiate_$PROTO_link' event. #108.

        76. cleaned up channel->handle_privmsgnotice(). it now uses a single user iteration.
            a new option can specify which users to send to, but it will fall back to old behavior if omitted (all users).
            Add support for registered-only channel mode (+r). Closes #45.
            Add support for ssl-only channel mode (+S).
            Added color stripping mode (+c). Closes #49.
            Update configurations and documentation for new modes.

        77. $message::PARAM_BAD and $message::TRUE are now references. the literal strings '_PARAM_BAD_' and '_TAG_TRUE_' will no longer work.
            added 'cant_message', 'cant_privmsg', and 'cant_notice' events which are fired when a message is blocked.
            blocked message replies now use an {error_reply} key rather than calling ->numeric() directly. this allows other modules to cancel the replies.
            updated all modules that hook onto 'cant_message' to use the new {error_reply} key.

        78. renamed 'join_failed' event to 'cant_join' to correspond with 'cant_message'.
            failed channel join replies now use an {error_reply} key rather than calling ->numeric() directly. this allows other modules to cancel the replies.
            updated all modules that hook onto 'cant_join' to use the new {error_reply} key.
            Channel::Forward now sends the original error channel's message when the forward channel join fails. closes #60.

        79. listener and stream options are now properly updated on reload with configure_listener() and configure_stream().
            ->configure() for IO::Async::Stream objects is now consistent between linkage.pm and ircd.pm.
            error handlers for streams are now also shared between ircd.pm and linkage.pm.
            fixed an annoyance where "Connect fail" notices would still be displayed even after a connect attempt was canceled by SQUIT.
            added servers:warn_ping option which fires a 'server_not_responding' oper notice.
            ping:server:frequency is now servers:ping_freq. ping:server:timeout is now servers:ping_timeout.
            ping:user:frequency is now users:ping_freq. ping:user:timeout is now users:ping_timeout.
            servers:max_delta is now delta_max. servers:warn_delta is now delta_warn. servers:warn_ping is now ping_warn.

    8. added connection methods ->add_future(), ->remove_future(), and ->clear_futures().
        these provide a decent way to manage self-cancelling futures associated with a connection.
        so apparently the Ident module has been broken for a long time and no one noticed.
        fixed that and cleaned it up to use the new ->add_future().
        updated Resolve to use the new future methods.

        81. fixed an issue where INVITEs from TS6 without the optional channelTS parameter were dropped.
            fixed an issue where outgoing TS6 INVITEs which originated on a JELP link were not forward properly.
            ->take_lower_time() no longer resets the channel topic.
            this corresponds with TOPICBURST, TB, and ETB accepting topics for any channel which had no topic.
            renamed ->add_future() to ->adopt_future() and ->remove_future() to ->abandon_future().
            these names better reflect what the methods do.

        82. added a hack to handle SSL listener errors. I cannot find a documented way to catch miscellaneous SSL errors when accepting clients.
            this uses an undocumented option in IO::Async::Notifier which is subject to change. closes #128 (for now).
            renamed some channel-related oper notices to start with 'channel' rather than 'user'.
            outgoing PRIVMSG/NOTICE for TS6 now supports the '=' prefix used for +z.

        83. improved the Eval module. it now properly detects empty strings.
            it catches warnings produced by the eval and forward them to the user or channel.
            channel method ->user_is() can now take a status level in addition to a mode name.
            new channel method ->user_is_at_least() returns true if a user has a mode name or level greater than or equal to the one passed.
            added outgoing TS6 logic for messages that were blocked by +z.
            the former privmsgnotice_server_mask outgoing command is now an extension of privmsgnotice.
            'new' events for connections, users, and servers now occur after firing oper notices.
            this fixes 'connection closed' being sent out before 'new connection' when the connection is immediately terminated (due to bans or limits).

        84. added Channel::OpModerate which provides channel mode +z to send blocked messages to ops. closes #50.
            ->handle_privmsgnotice() was getting too complicated, so it now accepts most parameters as named options. updated everything uses it accordingly.
            added incoming TS6 handler for opmod (=#channel).
            added incoming JELP handler for opmod (=#channel).
            ->handle_privmsgnotice()'s dont_forward option is no longer used in JELP/TS6 because the routing of these commands may be modified by modules.

        85. added utils level_from_prefix_ts6() and ts6_closest_level().
            server::protocol now provides a generic PRIVMSG/NOTICE handler to eliminate code repetition.
            cleaned up/reorganized server::protocol.
            renamed ->handle_privmsgnotice() to ->do_privmsgnotice() such that it is consistent with other high-level 'do' methods.
            cleanup: renamed all occurrences of ->register_event() to ->on().
            cleanup: renamed all occurrences of ->fire_event() to ->fire().
            added support for user@server PRIVMSG target.
            added support for opers@server special target.
            added outgoing handlers for PRIVMSG user@server.
            fixed #125 where UPDATE sometimes did not send out oper notices.

        86. added support for PRIVMSG/NOTICE targets with a status prefix (@#channel).
            fixed a bug where SVINFO was sent with a juno SID.
            update Evented::Object.
            cleanup: omit 'with_eo' and 'name' callback options where they are implied.
            RELOAD now detects if upgrading or downgrading.
            UPDATE now uses '(g)update' flag instead of 'git'.
            the Git module now provides a CHECKOUT command to switch branches.
            CHECKOUT now works remotely. it also provides version/tag info.
            fixed an issue in TS6 outgoing INVITE.
            fixed an issue where "new channel time" notices were propagated

        87. bans now have a 'lifetime' field which allows them to be preserved for some time after expiration. #114.
            delete_deactivate_ban_by_id() no longer deletes the ban. it disables it until expiration.
            fixed irc_match() to use irc_lc(). thanks @GLolol for pointing this out.
            fixed deep recursion in pretty_mask().
            message.pm now checks if tags are undefined. the ->data() method can now use a new optional 'source_stringify_method' to stringify a source object.

        88. add jelp_message() and ts6_message().
            improved string<->object conversion in message.pm.
            in message.pm, check if params are undefined when passed to constructor. also convert objects with the new stringify function.

        89. the Ban implementation has been reworked to use Ban::Info objects instead of passing around hashes. closes #134.
            aside from the cleanup, this also fixes a lot of issues in ban expiration and adds proper lifetime support. closes #114.
            JELP ban propagation commands have been revised; instead of working with raw keys and value pairs, JELP now uses a combination of ordered command parameters and message tags.
            From objective-bans:
            ccb7ad3 new Ban::Info is an objective representation of a ban. #134.
            3f9acd0 move time prettifier functions to utils.
            da6874c add Ban::Info ->disable, timer methods, enforcement methods.
            3ecb132 move notifications to Info, add some ban info getters.
            edabc0c add ->validate.
            332d4b4 add ->update and create_my_ban().
            c8e6772 add create_or_update_ban(), ban_by_id().
            09eebef Merge branch 'master' into objective-bans.
            3e51ab8 update ban_by_id() to use ban table.
            812cfbc add ->activate(), all_bans().
            db9a2e5 activate ban on create_or_update(). enforce ban on ->enable_enforcement().
            3e5fec2 add ->has_expired, ->has_expired_lifetime, more ->hr_* getters.
            c8232f7 update BANS command.
            c52f657 fix timers, enforcement activation.
            8b5b243 update enforce_ban_on_conn(), enforce_ban_on_user().
            22aa80c add ban_enforces.
            bcd9004 add ->enforce_on_user(), ->enforce_on_conn(). get rid of 'id' field in ban actions; it's the same as 'name'.
            e7f3c15 add ->enforce_on_all_conns, ->enforce_on_all_users.
            f26780d update stuff to enforce all bans on one entity and move to add_enforcement_events().
            c379325 add more getters.
            c2fe2e1 even more getters.
            8541ea6 move enable_code and disable_code to Info. add ->enforce().
            19b9c31 update add/del commands to use objective bans. update create_my_ban(). add matcher getters.
            c5de606 make getters lvalues. update kline, line, resv to use new ban objects. add _deactivate_ban_timer().
            35dd148 fix expiration. add ->destroy.
            0b69c66 fix expiration notices to only show when it is truly expiring, not when it is deleted.
            851ceb8 improve the BANS command. add more ->hr_* getters.
            af9364a add lifetime checks.
            cf25fbf add ->match_user, ->match_host.
            dec672a rewrite Ban::TS6 to use objective bans.
            3367ab0 delete Info method additions on void.
            8005615 Merge branch 'master' into objective-bans.
            849025f Merge branch 'master' into objective-bans.
            e7fa917 update JELP ban implementation to use objective bans.
            a33fa8d get rid of confusing _just_set_by. this is now handled internally by new methods ->set_recent_source, ->recent_source, and ->recent_user.
            5eea4b5 use the newer all_bans() instead of get_all_bans(). improve TS6 ban type checks.

    9. use ->hr_reason in TS6 outgoing BAN command. this fixes TS6 propagation of bans without a reason.
        added additional checks in ban ->validate().
        fixed ban enforcement issues caused by get_ban_action() being passed action refs rather than string action names.
        updated Evented::API::Engine. this fixes #136.

        91. use max duration 314 days for global permanent bans in TS6.
            in create_or_update_ban(), check the modification time. ignore unchanged bans.
            this fixes an issue where new ban notifications were sent on TS6 burst for preexisting bans.
            fixed Ban::TS6 to use the ban agent again during our own burst.
            ircd and proto server keys are now always numeric. update oper notice to use link_type and ircd_name.

        92. cleaned up ircd.pm by splitting the initializing process into 8 phases. closes #129.

        93. added 'truncate_hosts' ircd option to specify the max host length an ircd supports. closes #135.
            the 'no_host_slashes' ircd option now replaces slashes with dots. closes #115 for now.

12. mihret.

    01. destroy the config object on each RELOAD. this is necessary to set new defaults from default.conf.

    02. added server method ->remove_umode().
        JELP AUM (add user mode) can now also remove mode definitions. #63.

    03. added server method ->remove_cmode().
        JELP ACM (add channel mode) can now also remove mode definitions. #63.

    04. added server::protocol utilities notify_umode_changes() and notify_cmode_changes(). #63.

    05. Reload now tracks mode mapping changes and notifies other servers when necessary. #63.

    06. added utilities mode_change_start() and mode_change_end().
        AUM and ACM are now sent out dynamically when new modes are added and removed. #63.
        AUM and ACM for juno servers now only advertise modes which are actually available for use.

    07. add channel method ->get_modes().
        add events for mode_change_end().
        started work on Channel::ModeSync. #63.
        unset modes locally when they are no longer available.

    08. do not change topic text when it is a truncated version of the existing topic. closes #132.

    09. temporarily store mode handling code while a mode is pending deletion. #63.

    10. fixed bug in SVINFO. fixed RPL_WELCOME bug.
        some work on #138.
        possibly resolved MAYBE #138. or maybe not.
        for #138, dispose of ghosts without connection objects.
        fixed #138.

    11. misc. cleanup in connection.pm.

    12. don't fire user_mask_change oper notice for cloaks applied to new users.
        closes #111.
        actually always do it for remote users. #111.

    13. implemented JELP MODEREQ. #63.
        added outgoing JELP MODEREQ and MODEREP.
        update Evented::Object.

    14. add channel ->modes_with() and ->mode_string_with().
        more work on MODESYNC #63.

    15. ->modes_with now accepts numeric mode types in addition to string mode names.
        ->mode_string, ->mode_string_hidden, ->mode_string_status, and ->mode_string_all
        now all are wrappers for the new ->modes_with.

    16. get rid of ->get_modes; it is replaced by ->modes_with and new ->all_modes.
        rename ->modes to ->send_modes and ->names to ->send_names.
        add MODEREP handler. #63

    17. send out MODEREQ upon cmodes_changed.

    18. fixed some issues with reloading companion submodules.
        update Evented::API::Engine.
        update Evented::Object.

    19. add MODESYNC user command. #63

    20. moderefs are now objects.
        got rid of ->strings_from_cmodes() and ->cmodes_from_string() in favor of new methods of the "modes" package.

    21. add moderef method ->invert.
        ->do_modes() and ->handle_modes() no longer require an $over_protocol option.
        got rid of {user_lookup} and {proto} mode block hints. these long-deprecated keys are no longer needed because mode blocks are passed user objects rather than nicks and UIDs.
        ->take_lower_time() now uses ->invert.

    22. in status mode blocks, check if the parameter is blessed.
        an unblessed string indicates the nickname or UID could not be resolved.

    23. new modes::difference() identifies the differences between two moderefs.
        new mode methods ->simplify and ->merge_in.
        ->handle_modes() now skips status modes whose parameters are not user objects.
        ->cmode_string_difference() has been removed in favor of modes::difference().
        ->combine_cmode_strings() has been removed in favor of $modes->merge_in().

    24. update JELP and TS6 to use moderefs rather working with mode strings.
        fixed a bug where the mode letter and/or type was sometimes omitted from JELP AUM and ACM.
        simplifed ->convert_cmode_string() using new moderef methods.

    25. add $modes->stated for easier iteration.
        add $modes->remove() and $modes->filter().
        removed now-unused $channel->mode_string_hidden.
        TS6 SJOIN no longer uses $server->convert_cmode_string().
        ->do_modes() and ->do_mode_string() now return moderefs of changes.
        removed unused $channel->mode_string_status.

    26. fixed a bug where AUM and ACM sometimes included modes not known to the source server.
        misc. cleanup TS6::Outgoing.
        misc. cleanup JELP::Outgoing.
        misc. cleanup JELP::Incoming.

    27. got rid of the deprecated {params} mode block hint.
        got rid of compat code for mode blocks which returned protocol-specific string parameters.
        modules can no longer manually modify mode parameters besides those of the modes they provide.
        Channel::Key now injects '*' as the parameter to -k when unsetting.

    28. added constants for mode types, exported by the modes package.
        RPL_CHANNELMODEIS now omits mode parameters for those not in the channel.
        RPL_CHANNELMODEIS now shows +k. closes #141.

    29. added server ->end_burst(), protocol-common code for burst end.
        new idea for #119 to postpone ban propagation requiring the ban agent during other uplinks' bursts until the burst is complete.
        send ENCAP RESV instead of NICKDELAY when EUID capab is not supported. closes #137.

    30. JELP SERVER command now has a timestamp parameter. closes #21.
        moved TS delta checking to server::protocol.

    31. added a hack to address #137 which looks for NickServ when we have to use RESV instead of NICKDELAY.
        added outgoing non-ENCAP TS6 RESV command (for use with CLUSTER capab).
        removed old server command handler code from pool.

    32. in ban delete commands like UNKLINE, check if the ban has already been expired.
        fixed an issue in user ban commands where the ->set_recent_source() was called AFTER propagation.

    33. added Channel::JoinThrottle (+j). closes #46.

    34. overhaul of DNSBL module. it now supports IPv6. closes #126.
        added cache to DNSBL. closes #142.

    35. added no forward channel mode (+Q). closes #48.

    36. added channels:resv_force_part option to force users to part reserved channels.

    37. replaced ->local_users with ->all_local_users and ->real_local_users.
        renamed ->actual_users to ->real_users.
        update TS6/registration to use ->end_burst().

    38. add handle_add() and handle_del() to Ban. this permits either a user or server source.
        on ban ->disable(), set the lifetime to 24hrs from now if it was a permanent ban.
        always send duration 0 in TS6 BAN command when the ban has already expired.
        Ban ->disable() now returns true only if the ban was not already disabled.
        added ->clear_recent_source().

    39. finished the MODESYNC user command. #63.
        added JELP FJOIN command. #121.

    40. added JELP FPART command. #121.

    41. added JELP FUMODE command. #121.

    42. added JELP FOPER command. closes #121.

    43. greatly improve parameter matchers. #113.
        the 'opt' attribute is now handled universally for all parameter types.
        added 'skip' matcher which skips the parameter, pushing nothing.

    44. added matcher options minlen, maxlen, and digit.
        added 'last' matcher which always pushes the last parameter. closes #113.

    45. lots of work on oper flag handling.
        added new ->update_flags() which sets +/-o when necessary.
        updated Grant module to use the new JELP FOPER command.

    46. update all TS6 ENCAP commands to use the new 'skip' matcher for encapsulated the command name.

    47. added command source checking for both JELP and TS6. closes #91.

    48. fixed a bug where TS6 ENCAP LOGIN was sent out even when EUID was used.
        fixed a bug where SQUIT for any server mask would cancel all connection timers.
        produce a warning when receiving CONNECT from a server.
        send out TS6 connect with 0 to indicate that the default port should be used.

    49. add JELP FLOGIN command. this is used by services to login a user. closes #151.
        FLOGIN is also used for logout. closes #152.
        this should fix all existing issues with account propagation.
        can_message will soon be used for user-to-user PRIVMSGs and NOTICEs in addition to channel messages.
        channel message checks are now fired as can_message_channel in addition to can_message. #154.
        the {new_message} option has been removed.
        now can_message events are passed a scalar reference to the message text which can be modified directly.
        this allows multiple callbacks to modify the message in order of priority. closes #156.
        updated all modules to use can_message_channel instead of can_message and to no longer use new_message.

    50. added user method ->do_privmsgnotice() which is argument-compatible with channel->do_privmsgnotice().
        greatly simplified the PRIVMSG and NOTICE user command handler as well as geenric S2S logic for these commands in server::protocol::handle_privmsgnotice().
        added new events can_message_user, can_notice_user, can_privmsg_user. these are fired along with can_message, etc. closes #154.

    51. added new can_receive_* events to both user and channel PRIVMSG/NOTICE handling.
        this will allow modules to modify the text sent to specific users, or prevent specific members of a channel from receiving a message. closes #155.
        rip JELP RETURN command.
        send KILL to the user being killed. closes #150.

    52. add JELP FUSERINFO. improved logic for CHGHOST and other user field changes. closes #159.

    53. added remote INFO request. closes #148.
        added 'semiopt' (semi-optional) matcher option. this is a more strict version of 'opt'.

    54. overhaul of Base::Capabilities, adding support for IRCv3.2 cap-notify. closes #84.
        added incomplete support for capability values in CAP LS and CAP NEW. #85 not done.
        new ->capability_change_start() and ->capability_change_end() can be used to monitor multiple changes in capabilities.
        new user functions sendfrom_to_all() and sendfrom_to_all_with_opts().
        update RELOAD to use capability change monitoring.
        update MODLOAD and friends to use capability change monitoring. cleaned up the Modules module.

    55. more work on capabilities.
        add capability values to CAP LS for 302.
        update SASL to use advertise when the SASL agent availability changes.
        fire initially_set_modes for remote users.
        fixed bug where Resolve sometimes would hang until registration timeout.
        fixed a bug where clients could CAP REQ capabilities that were disabled and not advertised.

    56. added SASL reauthentication support. #83.
        added outgoing signon handlers. TS6 uses SIGNON; JELP uses USERINFO.
        added options services:saslserv_allow_reauthentication and services:saslserv_max_failures. closes #153.

    57. added {error_reply} key to messages instead of calling ->numeric() directly. closes #160.

    58. improved message tag parameter matchers. new format is @tag_name=type(opts).

    59. the '@rest' matcher was removed in favor of '...'.
        the ':rest' matcher was removed in favor of ':'.
        the 'any' matcher will be removed in favor of '*'.

    60. added IRCv3.2 MONITOR implementation. closes #89.
        monitor list can now be limited by limit:monitor. closes #161.

    61. invites now override +jklr. closes #131.
        cleaned up Channel::Invite. closes #147.
        added new channel methods ->user_has_invite() and ->user_clear_invite().
        improved ->loc_get_invited_by(). max invites is now determined by limit:channel.

    62. added channel ->clear_all_invites().
        called on ->take_lower_time() and in SJOIN. closes #162.

    63. added Channel::Knock. closes #39.

    64. prevent knocking on private channels. closes #34.

    65. add support for ircv3 userhost-in-names.
        fixed a bug where NAMES would occasionally exceed 512 bytes.

    66. got rid of user ->loc_get_invited_by().
        now local invite handling is an event get_invited which has been moved to Channel::Invite.
        this is better because remote invites will be ignored when invites are disabled on the local server.

    67. new Base::AddUser adds a basic virtual user interface.

    68. fixed #165.

    69. update Evented::Object. fixes #140.

    70. fixed crash bug in DNSBL module. it affected 12.34-12.69.

    71. fixed Configuration::Set crash bug.
        update Evented::Configuration.
        update Evented::Database.

    72. added additional error checking in CONFGET.
        removed unused Evented::Properties.
        update Evented::Database.
        CONFGET now accepts '*' to list all config values in a block.

    73. greatly improved configuration error handling.
        new startup_error() prevents the IRCd from booting in the case of a configuration or dependency error.
        update Evented::Configuration.
        update Evented::API::Engine.

    74. new broadcast() utility replaces ->fire_command_all().

    75. added KNOCK in TS6 and JELP. closes #166.

    76. cleaned up Core::UserCommands for 2017.
        fixed a bug where remote VERSION query would send RPL_ISUPPORT.
        update Evented::Database.

    77. rewrote WHO command using who_query event. closes #95.
        added WHOX support, not quite complete.

    78. finished WHOX implementation by adding support for field filters.

    79. new local/global versions of many user and channel methods. closes #164.
        added user and channel method ->do_privmsgnotice_local().
        rename ->do_join() to ->do_join_local().
        rename ->attempt_local_join() to ->attempt_join().
        rename ->do_part() to ->do_part_local(). add global ->do_part().
        rename ->do_part_all() to ->do_part_all_local(). add global ->do_part_all().
        rename ->do_topic() to ->do_topic_local(). add global ->do_topic().
        rename ->do_away() to ->do_away_local(). add global ->do_away().
        rename ->do_login() to ->do_login_local(). add global ->do_login().
        rename ->do_logout() to ->do_logout_local(). add global ->do_logout().
        rename ->user_get_kicked() to ->do_kick_local(). add global ->do_kick().
        used mass replace to update all existing code which used these methods.

    80. update user command handlers to use new global versions methods where appropriate.

    81. rename $server->fire_command() to $server->forward().
        ->forward() can now also be used on users, as well as non-uplink servers.
        ->forward() will find the actual uplink associated with remote objects,
        using the new ->location method, which is available for users and servers.
        to prevent confusion, $msg->forward() was renamed to $msg->broadcast().
        this is now consistent with the broadcast() utility.
        mass replaced all existing uses of these methods with the new names.

    82. remove ->fire_command_all(), which was deprecated.
        remove ->fire_command_almost_all(), which I have no memory of adding.
        update SASL to use new ->forward() stuff.

    83. broadcast new_user in Base::AddUser.
        use location's ircd/proto info in oper notices for new servers.
        fix WHOIS on fake user. fixed AddUser to fire initially_propagated.

    84. in ->do_privmsgnotice(), forward the original message to uplinks.

    85. update Evented::API::Engine.
        make use of new @depends.bases.

    86. update Evented::API::Engine.
        make use of new syntax for lists and booleans.

    87. export mode type constants for configuration.
        update default.conf accordingly.

    88. fixed #167 where QUIT or CHGHOST was sent to users with the new host in the source.

    89. fixed a bug where sometimes new users weren't added to the server's {users} list.
    
    90. fixed #168 where notices sometimes were routed back to the source.
        fixed #170, warnings on join when mode string is of zero length.
        
    91. it is now possible to specify protocol-specific mode parameter formatters. closes #169.
        updated Channel::JoinThrottle to use this.
        
    92. fix mixmatched 'throttle' vs 'join_throttle' mode names.
        fix bug that allowed zero for joins per second in join throttle.
        misc. cleanup channel.pm.
        misc. cleanup server.pm.
        channel->id now returns the irc_lc()'d channel name.
        fix bug in channel->send_all().
        
13. ava.

    01. new configuration option channels:max_bans dictates the max entry count for channel list modes. closes #14.
        new Channel::LargeList adds support for large ban lists (+L).
        
    02. add support for IRCv3.2 echo-message. closes #173.
    
    03. add support for IRCv3.2 account-tag. closes #177.
    
    04. add support for IRCv3.2 invite-notify. closes #174.
    
    05. JELP 21.00:
        add nick TS parameter to NICK command.
        move TS parameter in SID command so that it is the same as SERVER.
        do not clear modes on bad channel time for CMODE, PART, TOPIC.

    06. JELP 22.00:
        CMODE now accepts a variable number of parameters, like other commands involving modes.
        remove TS from PART command.
        
    07, hidden servers are now actually hidden from MAP and LINKS.
        new option servers:allow_hidden is enabled by default but can be set to 'off' to prevent servers from hiding themselves. this is only locally effective.
        new oper flag see_hidden allows opers to see hidden servers regardless of that option.
        closes #31.
        
    08. added internal MLOCK support.
        added TS6 MLOCK.
        added JELP MLOCK.
        closes #79.

    09. fixed some bugs in new MLOCK.
    
    10. add support for ban reason to show to only opers. closes #145.
    
    11. add support for IRCv3.2 batch.
        add support for IRCv3.2 netsplit batch type.
        all user send functions can now take a message object instead of data string.
        
    12. fix bug with batch IDs.
        fix bug in TS6 MLOCK.
        fix bug with channel->mode_parameter that caused ghosts to show up in moderefs.
        
    13. all channel send functions are now based on sendfrom_to_many().
        add support for IRCv3.2 netjoin batch type. closes #172.
        refuse to load TS6::Base when server::casemapping != rfc1459.
        
    14. partially implemented user (#130) and server (#123) classes.
        new class.conf has default class definitions.
        update Evented::Object.
        update Evented::Configuration.
        
    15. warn when a connection allows neither users nor servers.
        added user->flags.
        added user->clear_flags.
        updated all modules that were accessing user flags manually.
        
    16. misc. cleanup connection.pm.
        finished transition of oper flags to the new class system. closes #179.

    17. update user limits to use those defined in connection classes.
        update server delta checks to use connection class values.
        closes #130.
    
    18. connection -> conn.
        moved flag stuff to connection.pm; added aliases for users and servers.
        added server matcher -priv(), which works like -oper() for users.
        move -priv() to server::protocol, to share it between TS6 and JELP.
        
    19. move mode type definitions to ircd.pm so they only have to be changed in one place.
        add JELP version checking.
        fix some bugs with delta_max and delta_warn in server classes.
        
    20. updates to atheme protocol module. closes #181.
        fixed issue where ChanServ QUIET did not work on juno.
        fixed bug where rehashing did not clear IRCd options.
        
    21. fix bug in ModeSync (caused by changes to channel modes API).
        more work on AddUser API.

    22. add ircd::change_start() and ircd::change_end().
        update Modules and Reload to use these.
        add compatibility fix in channel->do_modes().
        
    23. in AddUser, drop clients after a module is unloaded, but try to preserve them if reloading.
        if preserving, update cloak, ident, etc.
        improve list store naming.
        use lowercase for outgoing command hooks.
        in AddUser, change nick if necessary.
        
    24. add user->do_nick() and ->do_nick_local().
        update proto modules and other APIs to use these new methods.
        
    25. update Evented::API::Engine.
        rename unload_module to on_unload throughout bases to avoid conflict.
        use ->package instead of ->{package} (returns primary package).
        bless virtual users to M::Base::AddUser::User, which will allow adding extra user methods.
        
    26. fix bug in UID collision check.
        fix modes in incorrect order in channel MODE reply.
        
    27. fix NICK message being sent from new nick (broken since 13.24).
        fix wrong nick in nick change server notices.
        
    28. in the process of moving many unimportant log messages to debug level.
        fix bugs in connection classes pre-registration.
        new allow_anons option allows classes to match unregistered connections.
        update Evented::API::Engine.
        
    29. don't debug network traffic by default.
        update Evented::API::Engine.
        
    30. fix bug where you could /MODUNLOAD ircd, causing crash.
        
    
